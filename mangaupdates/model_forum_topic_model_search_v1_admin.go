/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ForumTopicModelSearchV1Admin type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForumTopicModelSearchV1Admin{}

// ForumTopicModelSearchV1Admin struct for ForumTopicModelSearchV1Admin
type ForumTopicModelSearchV1Admin struct {
	Pinned *bool `json:"pinned,omitempty"`
	Locked *bool `json:"locked,omitempty"`
	Global *bool `json:"global,omitempty"`
}

// NewForumTopicModelSearchV1Admin instantiates a new ForumTopicModelSearchV1Admin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForumTopicModelSearchV1Admin() *ForumTopicModelSearchV1Admin {
	this := ForumTopicModelSearchV1Admin{}
	return &this
}

// NewForumTopicModelSearchV1AdminWithDefaults instantiates a new ForumTopicModelSearchV1Admin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForumTopicModelSearchV1AdminWithDefaults() *ForumTopicModelSearchV1Admin {
	this := ForumTopicModelSearchV1Admin{}
	return &this
}

// GetPinned returns the Pinned field value if set, zero value otherwise.
func (o *ForumTopicModelSearchV1Admin) GetPinned() bool {
	if o == nil || IsNil(o.Pinned) {
		var ret bool
		return ret
	}
	return *o.Pinned
}

// GetPinnedOk returns a tuple with the Pinned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumTopicModelSearchV1Admin) GetPinnedOk() (*bool, bool) {
	if o == nil || IsNil(o.Pinned) {
		return nil, false
	}
	return o.Pinned, true
}

// HasPinned returns a boolean if a field has been set.
func (o *ForumTopicModelSearchV1Admin) HasPinned() bool {
	if o != nil && !IsNil(o.Pinned) {
		return true
	}

	return false
}

// SetPinned gets a reference to the given bool and assigns it to the Pinned field.
func (o *ForumTopicModelSearchV1Admin) SetPinned(v bool) {
	o.Pinned = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *ForumTopicModelSearchV1Admin) GetLocked() bool {
	if o == nil || IsNil(o.Locked) {
		var ret bool
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumTopicModelSearchV1Admin) GetLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.Locked) {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *ForumTopicModelSearchV1Admin) HasLocked() bool {
	if o != nil && !IsNil(o.Locked) {
		return true
	}

	return false
}

// SetLocked gets a reference to the given bool and assigns it to the Locked field.
func (o *ForumTopicModelSearchV1Admin) SetLocked(v bool) {
	o.Locked = &v
}

// GetGlobal returns the Global field value if set, zero value otherwise.
func (o *ForumTopicModelSearchV1Admin) GetGlobal() bool {
	if o == nil || IsNil(o.Global) {
		var ret bool
		return ret
	}
	return *o.Global
}

// GetGlobalOk returns a tuple with the Global field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumTopicModelSearchV1Admin) GetGlobalOk() (*bool, bool) {
	if o == nil || IsNil(o.Global) {
		return nil, false
	}
	return o.Global, true
}

// HasGlobal returns a boolean if a field has been set.
func (o *ForumTopicModelSearchV1Admin) HasGlobal() bool {
	if o != nil && !IsNil(o.Global) {
		return true
	}

	return false
}

// SetGlobal gets a reference to the given bool and assigns it to the Global field.
func (o *ForumTopicModelSearchV1Admin) SetGlobal(v bool) {
	o.Global = &v
}

func (o ForumTopicModelSearchV1Admin) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForumTopicModelSearchV1Admin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Pinned) {
		toSerialize["pinned"] = o.Pinned
	}
	if !IsNil(o.Locked) {
		toSerialize["locked"] = o.Locked
	}
	if !IsNil(o.Global) {
		toSerialize["global"] = o.Global
	}
	return toSerialize, nil
}

type NullableForumTopicModelSearchV1Admin struct {
	value *ForumTopicModelSearchV1Admin
	isSet bool
}

func (v NullableForumTopicModelSearchV1Admin) Get() *ForumTopicModelSearchV1Admin {
	return v.value
}

func (v *NullableForumTopicModelSearchV1Admin) Set(val *ForumTopicModelSearchV1Admin) {
	v.value = val
	v.isSet = true
}

func (v NullableForumTopicModelSearchV1Admin) IsSet() bool {
	return v.isSet
}

func (v *NullableForumTopicModelSearchV1Admin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForumTopicModelSearchV1Admin(val *ForumTopicModelSearchV1Admin) *NullableForumTopicModelSearchV1Admin {
	return &NullableForumTopicModelSearchV1Admin{value: val, isSet: true}
}

func (v NullableForumTopicModelSearchV1Admin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForumTopicModelSearchV1Admin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


