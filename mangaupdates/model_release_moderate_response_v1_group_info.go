/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReleaseModerateResponseV1GroupInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReleaseModerateResponseV1GroupInfo{}

// ReleaseModerateResponseV1GroupInfo struct for ReleaseModerateResponseV1GroupInfo
type ReleaseModerateResponseV1GroupInfo struct {
	GroupId *int64 `json:"group_id,omitempty"`
	Hold    *bool  `json:"hold,omitempty"`
}

// NewReleaseModerateResponseV1GroupInfo instantiates a new ReleaseModerateResponseV1GroupInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleaseModerateResponseV1GroupInfo() *ReleaseModerateResponseV1GroupInfo {
	this := ReleaseModerateResponseV1GroupInfo{}
	return &this
}

// NewReleaseModerateResponseV1GroupInfoWithDefaults instantiates a new ReleaseModerateResponseV1GroupInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseModerateResponseV1GroupInfoWithDefaults() *ReleaseModerateResponseV1GroupInfo {
	this := ReleaseModerateResponseV1GroupInfo{}
	return &this
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *ReleaseModerateResponseV1GroupInfo) GetGroupId() int64 {
	if o == nil || IsNil(o.GroupId) {
		var ret int64
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseModerateResponseV1GroupInfo) GetGroupIdOk() (*int64, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *ReleaseModerateResponseV1GroupInfo) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given int64 and assigns it to the GroupId field.
func (o *ReleaseModerateResponseV1GroupInfo) SetGroupId(v int64) {
	o.GroupId = &v
}

// GetHold returns the Hold field value if set, zero value otherwise.
func (o *ReleaseModerateResponseV1GroupInfo) GetHold() bool {
	if o == nil || IsNil(o.Hold) {
		var ret bool
		return ret
	}
	return *o.Hold
}

// GetHoldOk returns a tuple with the Hold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseModerateResponseV1GroupInfo) GetHoldOk() (*bool, bool) {
	if o == nil || IsNil(o.Hold) {
		return nil, false
	}
	return o.Hold, true
}

// HasHold returns a boolean if a field has been set.
func (o *ReleaseModerateResponseV1GroupInfo) HasHold() bool {
	if o != nil && !IsNil(o.Hold) {
		return true
	}

	return false
}

// SetHold gets a reference to the given bool and assigns it to the Hold field.
func (o *ReleaseModerateResponseV1GroupInfo) SetHold(v bool) {
	o.Hold = &v
}

func (o ReleaseModerateResponseV1GroupInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReleaseModerateResponseV1GroupInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GroupId) {
		toSerialize["group_id"] = o.GroupId
	}
	if !IsNil(o.Hold) {
		toSerialize["hold"] = o.Hold
	}
	return toSerialize, nil
}

type NullableReleaseModerateResponseV1GroupInfo struct {
	value *ReleaseModerateResponseV1GroupInfo
	isSet bool
}

func (v NullableReleaseModerateResponseV1GroupInfo) Get() *ReleaseModerateResponseV1GroupInfo {
	return v.value
}

func (v *NullableReleaseModerateResponseV1GroupInfo) Set(val *ReleaseModerateResponseV1GroupInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseModerateResponseV1GroupInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseModerateResponseV1GroupInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseModerateResponseV1GroupInfo(val *ReleaseModerateResponseV1GroupInfo) *NullableReleaseModerateResponseV1GroupInfo {
	return &NullableReleaseModerateResponseV1GroupInfo{value: val, isSet: true}
}

func (v NullableReleaseModerateResponseV1GroupInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseModerateResponseV1GroupInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
