/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserModelV1Admin type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserModelV1Admin{}

// UserModelV1Admin struct for UserModelV1Admin
type UserModelV1Admin struct {
	IsAdmin *bool `json:"is_admin,omitempty"`
	RegistrationIp *string `json:"registration_ip,omitempty"`
	Permissions *UserModelV1AdminPermissions `json:"permissions,omitempty"`
	LastSeriesUpdate *TimeV1 `json:"last_series_update,omitempty"`
	Approved *bool `json:"approved,omitempty"`
	EmailApproved *bool `json:"email_approved,omitempty"`
	ForumAdmin *bool `json:"forum_admin,omitempty"`
	RegistrationReason *string `json:"registration_reason,omitempty"`
	Upgrade *UserModelV1AdminUpgrade `json:"upgrade,omitempty"`
	Banned *bool `json:"banned,omitempty"`
}

// NewUserModelV1Admin instantiates a new UserModelV1Admin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserModelV1Admin() *UserModelV1Admin {
	this := UserModelV1Admin{}
	return &this
}

// NewUserModelV1AdminWithDefaults instantiates a new UserModelV1Admin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserModelV1AdminWithDefaults() *UserModelV1Admin {
	this := UserModelV1Admin{}
	return &this
}

// GetIsAdmin returns the IsAdmin field value if set, zero value otherwise.
func (o *UserModelV1Admin) GetIsAdmin() bool {
	if o == nil || IsNil(o.IsAdmin) {
		var ret bool
		return ret
	}
	return *o.IsAdmin
}

// GetIsAdminOk returns a tuple with the IsAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelV1Admin) GetIsAdminOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAdmin) {
		return nil, false
	}
	return o.IsAdmin, true
}

// HasIsAdmin returns a boolean if a field has been set.
func (o *UserModelV1Admin) HasIsAdmin() bool {
	if o != nil && !IsNil(o.IsAdmin) {
		return true
	}

	return false
}

// SetIsAdmin gets a reference to the given bool and assigns it to the IsAdmin field.
func (o *UserModelV1Admin) SetIsAdmin(v bool) {
	o.IsAdmin = &v
}

// GetRegistrationIp returns the RegistrationIp field value if set, zero value otherwise.
func (o *UserModelV1Admin) GetRegistrationIp() string {
	if o == nil || IsNil(o.RegistrationIp) {
		var ret string
		return ret
	}
	return *o.RegistrationIp
}

// GetRegistrationIpOk returns a tuple with the RegistrationIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelV1Admin) GetRegistrationIpOk() (*string, bool) {
	if o == nil || IsNil(o.RegistrationIp) {
		return nil, false
	}
	return o.RegistrationIp, true
}

// HasRegistrationIp returns a boolean if a field has been set.
func (o *UserModelV1Admin) HasRegistrationIp() bool {
	if o != nil && !IsNil(o.RegistrationIp) {
		return true
	}

	return false
}

// SetRegistrationIp gets a reference to the given string and assigns it to the RegistrationIp field.
func (o *UserModelV1Admin) SetRegistrationIp(v string) {
	o.RegistrationIp = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *UserModelV1Admin) GetPermissions() UserModelV1AdminPermissions {
	if o == nil || IsNil(o.Permissions) {
		var ret UserModelV1AdminPermissions
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelV1Admin) GetPermissionsOk() (*UserModelV1AdminPermissions, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *UserModelV1Admin) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given UserModelV1AdminPermissions and assigns it to the Permissions field.
func (o *UserModelV1Admin) SetPermissions(v UserModelV1AdminPermissions) {
	o.Permissions = &v
}

// GetLastSeriesUpdate returns the LastSeriesUpdate field value if set, zero value otherwise.
func (o *UserModelV1Admin) GetLastSeriesUpdate() TimeV1 {
	if o == nil || IsNil(o.LastSeriesUpdate) {
		var ret TimeV1
		return ret
	}
	return *o.LastSeriesUpdate
}

// GetLastSeriesUpdateOk returns a tuple with the LastSeriesUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelV1Admin) GetLastSeriesUpdateOk() (*TimeV1, bool) {
	if o == nil || IsNil(o.LastSeriesUpdate) {
		return nil, false
	}
	return o.LastSeriesUpdate, true
}

// HasLastSeriesUpdate returns a boolean if a field has been set.
func (o *UserModelV1Admin) HasLastSeriesUpdate() bool {
	if o != nil && !IsNil(o.LastSeriesUpdate) {
		return true
	}

	return false
}

// SetLastSeriesUpdate gets a reference to the given TimeV1 and assigns it to the LastSeriesUpdate field.
func (o *UserModelV1Admin) SetLastSeriesUpdate(v TimeV1) {
	o.LastSeriesUpdate = &v
}

// GetApproved returns the Approved field value if set, zero value otherwise.
func (o *UserModelV1Admin) GetApproved() bool {
	if o == nil || IsNil(o.Approved) {
		var ret bool
		return ret
	}
	return *o.Approved
}

// GetApprovedOk returns a tuple with the Approved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelV1Admin) GetApprovedOk() (*bool, bool) {
	if o == nil || IsNil(o.Approved) {
		return nil, false
	}
	return o.Approved, true
}

// HasApproved returns a boolean if a field has been set.
func (o *UserModelV1Admin) HasApproved() bool {
	if o != nil && !IsNil(o.Approved) {
		return true
	}

	return false
}

// SetApproved gets a reference to the given bool and assigns it to the Approved field.
func (o *UserModelV1Admin) SetApproved(v bool) {
	o.Approved = &v
}

// GetEmailApproved returns the EmailApproved field value if set, zero value otherwise.
func (o *UserModelV1Admin) GetEmailApproved() bool {
	if o == nil || IsNil(o.EmailApproved) {
		var ret bool
		return ret
	}
	return *o.EmailApproved
}

// GetEmailApprovedOk returns a tuple with the EmailApproved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelV1Admin) GetEmailApprovedOk() (*bool, bool) {
	if o == nil || IsNil(o.EmailApproved) {
		return nil, false
	}
	return o.EmailApproved, true
}

// HasEmailApproved returns a boolean if a field has been set.
func (o *UserModelV1Admin) HasEmailApproved() bool {
	if o != nil && !IsNil(o.EmailApproved) {
		return true
	}

	return false
}

// SetEmailApproved gets a reference to the given bool and assigns it to the EmailApproved field.
func (o *UserModelV1Admin) SetEmailApproved(v bool) {
	o.EmailApproved = &v
}

// GetForumAdmin returns the ForumAdmin field value if set, zero value otherwise.
func (o *UserModelV1Admin) GetForumAdmin() bool {
	if o == nil || IsNil(o.ForumAdmin) {
		var ret bool
		return ret
	}
	return *o.ForumAdmin
}

// GetForumAdminOk returns a tuple with the ForumAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelV1Admin) GetForumAdminOk() (*bool, bool) {
	if o == nil || IsNil(o.ForumAdmin) {
		return nil, false
	}
	return o.ForumAdmin, true
}

// HasForumAdmin returns a boolean if a field has been set.
func (o *UserModelV1Admin) HasForumAdmin() bool {
	if o != nil && !IsNil(o.ForumAdmin) {
		return true
	}

	return false
}

// SetForumAdmin gets a reference to the given bool and assigns it to the ForumAdmin field.
func (o *UserModelV1Admin) SetForumAdmin(v bool) {
	o.ForumAdmin = &v
}

// GetRegistrationReason returns the RegistrationReason field value if set, zero value otherwise.
func (o *UserModelV1Admin) GetRegistrationReason() string {
	if o == nil || IsNil(o.RegistrationReason) {
		var ret string
		return ret
	}
	return *o.RegistrationReason
}

// GetRegistrationReasonOk returns a tuple with the RegistrationReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelV1Admin) GetRegistrationReasonOk() (*string, bool) {
	if o == nil || IsNil(o.RegistrationReason) {
		return nil, false
	}
	return o.RegistrationReason, true
}

// HasRegistrationReason returns a boolean if a field has been set.
func (o *UserModelV1Admin) HasRegistrationReason() bool {
	if o != nil && !IsNil(o.RegistrationReason) {
		return true
	}

	return false
}

// SetRegistrationReason gets a reference to the given string and assigns it to the RegistrationReason field.
func (o *UserModelV1Admin) SetRegistrationReason(v string) {
	o.RegistrationReason = &v
}

// GetUpgrade returns the Upgrade field value if set, zero value otherwise.
func (o *UserModelV1Admin) GetUpgrade() UserModelV1AdminUpgrade {
	if o == nil || IsNil(o.Upgrade) {
		var ret UserModelV1AdminUpgrade
		return ret
	}
	return *o.Upgrade
}

// GetUpgradeOk returns a tuple with the Upgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelV1Admin) GetUpgradeOk() (*UserModelV1AdminUpgrade, bool) {
	if o == nil || IsNil(o.Upgrade) {
		return nil, false
	}
	return o.Upgrade, true
}

// HasUpgrade returns a boolean if a field has been set.
func (o *UserModelV1Admin) HasUpgrade() bool {
	if o != nil && !IsNil(o.Upgrade) {
		return true
	}

	return false
}

// SetUpgrade gets a reference to the given UserModelV1AdminUpgrade and assigns it to the Upgrade field.
func (o *UserModelV1Admin) SetUpgrade(v UserModelV1AdminUpgrade) {
	o.Upgrade = &v
}

// GetBanned returns the Banned field value if set, zero value otherwise.
func (o *UserModelV1Admin) GetBanned() bool {
	if o == nil || IsNil(o.Banned) {
		var ret bool
		return ret
	}
	return *o.Banned
}

// GetBannedOk returns a tuple with the Banned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelV1Admin) GetBannedOk() (*bool, bool) {
	if o == nil || IsNil(o.Banned) {
		return nil, false
	}
	return o.Banned, true
}

// HasBanned returns a boolean if a field has been set.
func (o *UserModelV1Admin) HasBanned() bool {
	if o != nil && !IsNil(o.Banned) {
		return true
	}

	return false
}

// SetBanned gets a reference to the given bool and assigns it to the Banned field.
func (o *UserModelV1Admin) SetBanned(v bool) {
	o.Banned = &v
}

func (o UserModelV1Admin) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserModelV1Admin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsAdmin) {
		toSerialize["is_admin"] = o.IsAdmin
	}
	if !IsNil(o.RegistrationIp) {
		toSerialize["registration_ip"] = o.RegistrationIp
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.LastSeriesUpdate) {
		toSerialize["last_series_update"] = o.LastSeriesUpdate
	}
	if !IsNil(o.Approved) {
		toSerialize["approved"] = o.Approved
	}
	if !IsNil(o.EmailApproved) {
		toSerialize["email_approved"] = o.EmailApproved
	}
	if !IsNil(o.ForumAdmin) {
		toSerialize["forum_admin"] = o.ForumAdmin
	}
	if !IsNil(o.RegistrationReason) {
		toSerialize["registration_reason"] = o.RegistrationReason
	}
	if !IsNil(o.Upgrade) {
		toSerialize["upgrade"] = o.Upgrade
	}
	if !IsNil(o.Banned) {
		toSerialize["banned"] = o.Banned
	}
	return toSerialize, nil
}

type NullableUserModelV1Admin struct {
	value *UserModelV1Admin
	isSet bool
}

func (v NullableUserModelV1Admin) Get() *UserModelV1Admin {
	return v.value
}

func (v *NullableUserModelV1Admin) Set(val *UserModelV1Admin) {
	v.value = val
	v.isSet = true
}

func (v NullableUserModelV1Admin) IsSet() bool {
	return v.isSet
}

func (v *NullableUserModelV1Admin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserModelV1Admin(val *UserModelV1Admin) *NullableUserModelV1Admin {
	return &NullableUserModelV1Admin{value: val, isSet: true}
}

func (v NullableUserModelV1Admin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserModelV1Admin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


