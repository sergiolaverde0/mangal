/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GroupsSeriesListResponseV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupsSeriesListResponseV1{}

// GroupsSeriesListResponseV1 struct for GroupsSeriesListResponseV1
type GroupsSeriesListResponseV1 struct {
	ReleaseFrequency *string `json:"release_frequency,omitempty"`
	SeriesTitles []GroupsSeriesListResponseV1SeriesTitles `json:"series_titles,omitempty"`
	SeriesGenres []GroupsSeriesListResponseV1SeriesGenres `json:"series_genres,omitempty"`
	SeriesCategories []GroupsSeriesListResponseV1SeriesCategories `json:"series_categories,omitempty"`
}

// NewGroupsSeriesListResponseV1 instantiates a new GroupsSeriesListResponseV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupsSeriesListResponseV1() *GroupsSeriesListResponseV1 {
	this := GroupsSeriesListResponseV1{}
	return &this
}

// NewGroupsSeriesListResponseV1WithDefaults instantiates a new GroupsSeriesListResponseV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupsSeriesListResponseV1WithDefaults() *GroupsSeriesListResponseV1 {
	this := GroupsSeriesListResponseV1{}
	return &this
}

// GetReleaseFrequency returns the ReleaseFrequency field value if set, zero value otherwise.
func (o *GroupsSeriesListResponseV1) GetReleaseFrequency() string {
	if o == nil || IsNil(o.ReleaseFrequency) {
		var ret string
		return ret
	}
	return *o.ReleaseFrequency
}

// GetReleaseFrequencyOk returns a tuple with the ReleaseFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupsSeriesListResponseV1) GetReleaseFrequencyOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseFrequency) {
		return nil, false
	}
	return o.ReleaseFrequency, true
}

// HasReleaseFrequency returns a boolean if a field has been set.
func (o *GroupsSeriesListResponseV1) HasReleaseFrequency() bool {
	if o != nil && !IsNil(o.ReleaseFrequency) {
		return true
	}

	return false
}

// SetReleaseFrequency gets a reference to the given string and assigns it to the ReleaseFrequency field.
func (o *GroupsSeriesListResponseV1) SetReleaseFrequency(v string) {
	o.ReleaseFrequency = &v
}

// GetSeriesTitles returns the SeriesTitles field value if set, zero value otherwise.
func (o *GroupsSeriesListResponseV1) GetSeriesTitles() []GroupsSeriesListResponseV1SeriesTitles {
	if o == nil || IsNil(o.SeriesTitles) {
		var ret []GroupsSeriesListResponseV1SeriesTitles
		return ret
	}
	return o.SeriesTitles
}

// GetSeriesTitlesOk returns a tuple with the SeriesTitles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupsSeriesListResponseV1) GetSeriesTitlesOk() ([]GroupsSeriesListResponseV1SeriesTitles, bool) {
	if o == nil || IsNil(o.SeriesTitles) {
		return nil, false
	}
	return o.SeriesTitles, true
}

// HasSeriesTitles returns a boolean if a field has been set.
func (o *GroupsSeriesListResponseV1) HasSeriesTitles() bool {
	if o != nil && !IsNil(o.SeriesTitles) {
		return true
	}

	return false
}

// SetSeriesTitles gets a reference to the given []GroupsSeriesListResponseV1SeriesTitles and assigns it to the SeriesTitles field.
func (o *GroupsSeriesListResponseV1) SetSeriesTitles(v []GroupsSeriesListResponseV1SeriesTitles) {
	o.SeriesTitles = v
}

// GetSeriesGenres returns the SeriesGenres field value if set, zero value otherwise.
func (o *GroupsSeriesListResponseV1) GetSeriesGenres() []GroupsSeriesListResponseV1SeriesGenres {
	if o == nil || IsNil(o.SeriesGenres) {
		var ret []GroupsSeriesListResponseV1SeriesGenres
		return ret
	}
	return o.SeriesGenres
}

// GetSeriesGenresOk returns a tuple with the SeriesGenres field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupsSeriesListResponseV1) GetSeriesGenresOk() ([]GroupsSeriesListResponseV1SeriesGenres, bool) {
	if o == nil || IsNil(o.SeriesGenres) {
		return nil, false
	}
	return o.SeriesGenres, true
}

// HasSeriesGenres returns a boolean if a field has been set.
func (o *GroupsSeriesListResponseV1) HasSeriesGenres() bool {
	if o != nil && !IsNil(o.SeriesGenres) {
		return true
	}

	return false
}

// SetSeriesGenres gets a reference to the given []GroupsSeriesListResponseV1SeriesGenres and assigns it to the SeriesGenres field.
func (o *GroupsSeriesListResponseV1) SetSeriesGenres(v []GroupsSeriesListResponseV1SeriesGenres) {
	o.SeriesGenres = v
}

// GetSeriesCategories returns the SeriesCategories field value if set, zero value otherwise.
func (o *GroupsSeriesListResponseV1) GetSeriesCategories() []GroupsSeriesListResponseV1SeriesCategories {
	if o == nil || IsNil(o.SeriesCategories) {
		var ret []GroupsSeriesListResponseV1SeriesCategories
		return ret
	}
	return o.SeriesCategories
}

// GetSeriesCategoriesOk returns a tuple with the SeriesCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupsSeriesListResponseV1) GetSeriesCategoriesOk() ([]GroupsSeriesListResponseV1SeriesCategories, bool) {
	if o == nil || IsNil(o.SeriesCategories) {
		return nil, false
	}
	return o.SeriesCategories, true
}

// HasSeriesCategories returns a boolean if a field has been set.
func (o *GroupsSeriesListResponseV1) HasSeriesCategories() bool {
	if o != nil && !IsNil(o.SeriesCategories) {
		return true
	}

	return false
}

// SetSeriesCategories gets a reference to the given []GroupsSeriesListResponseV1SeriesCategories and assigns it to the SeriesCategories field.
func (o *GroupsSeriesListResponseV1) SetSeriesCategories(v []GroupsSeriesListResponseV1SeriesCategories) {
	o.SeriesCategories = v
}

func (o GroupsSeriesListResponseV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupsSeriesListResponseV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReleaseFrequency) {
		toSerialize["release_frequency"] = o.ReleaseFrequency
	}
	if !IsNil(o.SeriesTitles) {
		toSerialize["series_titles"] = o.SeriesTitles
	}
	if !IsNil(o.SeriesGenres) {
		toSerialize["series_genres"] = o.SeriesGenres
	}
	if !IsNil(o.SeriesCategories) {
		toSerialize["series_categories"] = o.SeriesCategories
	}
	return toSerialize, nil
}

type NullableGroupsSeriesListResponseV1 struct {
	value *GroupsSeriesListResponseV1
	isSet bool
}

func (v NullableGroupsSeriesListResponseV1) Get() *GroupsSeriesListResponseV1 {
	return v.value
}

func (v *NullableGroupsSeriesListResponseV1) Set(val *GroupsSeriesListResponseV1) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupsSeriesListResponseV1) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupsSeriesListResponseV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupsSeriesListResponseV1(val *GroupsSeriesListResponseV1) *NullableGroupsSeriesListResponseV1 {
	return &NullableGroupsSeriesListResponseV1{value: val, isSet: true}
}

func (v NullableGroupsSeriesListResponseV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupsSeriesListResponseV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


