/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PollModelV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PollModelV1{}

// PollModelV1 struct for PollModelV1
type PollModelV1 struct {
	Active     *bool                `json:"active,omitempty"`
	Question   *string              `json:"question,omitempty"`
	Answers    []PollModelV1Answers `json:"answers,omitempty"`
	TotalVotes *int64               `json:"total_votes,omitempty"`
}

// NewPollModelV1 instantiates a new PollModelV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPollModelV1() *PollModelV1 {
	this := PollModelV1{}
	return &this
}

// NewPollModelV1WithDefaults instantiates a new PollModelV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPollModelV1WithDefaults() *PollModelV1 {
	this := PollModelV1{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *PollModelV1) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PollModelV1) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *PollModelV1) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *PollModelV1) SetActive(v bool) {
	o.Active = &v
}

// GetQuestion returns the Question field value if set, zero value otherwise.
func (o *PollModelV1) GetQuestion() string {
	if o == nil || IsNil(o.Question) {
		var ret string
		return ret
	}
	return *o.Question
}

// GetQuestionOk returns a tuple with the Question field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PollModelV1) GetQuestionOk() (*string, bool) {
	if o == nil || IsNil(o.Question) {
		return nil, false
	}
	return o.Question, true
}

// HasQuestion returns a boolean if a field has been set.
func (o *PollModelV1) HasQuestion() bool {
	if o != nil && !IsNil(o.Question) {
		return true
	}

	return false
}

// SetQuestion gets a reference to the given string and assigns it to the Question field.
func (o *PollModelV1) SetQuestion(v string) {
	o.Question = &v
}

// GetAnswers returns the Answers field value if set, zero value otherwise.
func (o *PollModelV1) GetAnswers() []PollModelV1Answers {
	if o == nil || IsNil(o.Answers) {
		var ret []PollModelV1Answers
		return ret
	}
	return o.Answers
}

// GetAnswersOk returns a tuple with the Answers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PollModelV1) GetAnswersOk() ([]PollModelV1Answers, bool) {
	if o == nil || IsNil(o.Answers) {
		return nil, false
	}
	return o.Answers, true
}

// HasAnswers returns a boolean if a field has been set.
func (o *PollModelV1) HasAnswers() bool {
	if o != nil && !IsNil(o.Answers) {
		return true
	}

	return false
}

// SetAnswers gets a reference to the given []PollModelV1Answers and assigns it to the Answers field.
func (o *PollModelV1) SetAnswers(v []PollModelV1Answers) {
	o.Answers = v
}

// GetTotalVotes returns the TotalVotes field value if set, zero value otherwise.
func (o *PollModelV1) GetTotalVotes() int64 {
	if o == nil || IsNil(o.TotalVotes) {
		var ret int64
		return ret
	}
	return *o.TotalVotes
}

// GetTotalVotesOk returns a tuple with the TotalVotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PollModelV1) GetTotalVotesOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalVotes) {
		return nil, false
	}
	return o.TotalVotes, true
}

// HasTotalVotes returns a boolean if a field has been set.
func (o *PollModelV1) HasTotalVotes() bool {
	if o != nil && !IsNil(o.TotalVotes) {
		return true
	}

	return false
}

// SetTotalVotes gets a reference to the given int64 and assigns it to the TotalVotes field.
func (o *PollModelV1) SetTotalVotes(v int64) {
	o.TotalVotes = &v
}

func (o PollModelV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PollModelV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Question) {
		toSerialize["question"] = o.Question
	}
	if !IsNil(o.Answers) {
		toSerialize["answers"] = o.Answers
	}
	if !IsNil(o.TotalVotes) {
		toSerialize["total_votes"] = o.TotalVotes
	}
	return toSerialize, nil
}

type NullablePollModelV1 struct {
	value *PollModelV1
	isSet bool
}

func (v NullablePollModelV1) Get() *PollModelV1 {
	return v.value
}

func (v *NullablePollModelV1) Set(val *PollModelV1) {
	v.value = val
	v.isSet = true
}

func (v NullablePollModelV1) IsSet() bool {
	return v.isSet
}

func (v *NullablePollModelV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePollModelV1(val *PollModelV1) *NullablePollModelV1 {
	return &NullablePollModelV1{value: val, isSet: true}
}

func (v NullablePollModelV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePollModelV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
