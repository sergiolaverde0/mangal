/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ForumPollAnswerModelV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForumPollAnswerModelV1{}

// ForumPollAnswerModelV1 struct for ForumPollAnswerModelV1
type ForumPollAnswerModelV1 struct {
	AnswerId int64                        `json:"answer_id"`
	Answer   string                       `json:"answer"`
	Votes    *int64                       `json:"votes,omitempty"`
	Image    *ForumPollAnswerModelV1Image `json:"image,omitempty"`
}

// NewForumPollAnswerModelV1 instantiates a new ForumPollAnswerModelV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForumPollAnswerModelV1(answerId int64, answer string) *ForumPollAnswerModelV1 {
	this := ForumPollAnswerModelV1{}
	this.AnswerId = answerId
	this.Answer = answer
	return &this
}

// NewForumPollAnswerModelV1WithDefaults instantiates a new ForumPollAnswerModelV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForumPollAnswerModelV1WithDefaults() *ForumPollAnswerModelV1 {
	this := ForumPollAnswerModelV1{}
	return &this
}

// GetAnswerId returns the AnswerId field value
func (o *ForumPollAnswerModelV1) GetAnswerId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.AnswerId
}

// GetAnswerIdOk returns a tuple with the AnswerId field value
// and a boolean to check if the value has been set.
func (o *ForumPollAnswerModelV1) GetAnswerIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AnswerId, true
}

// SetAnswerId sets field value
func (o *ForumPollAnswerModelV1) SetAnswerId(v int64) {
	o.AnswerId = v
}

// GetAnswer returns the Answer field value
func (o *ForumPollAnswerModelV1) GetAnswer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Answer
}

// GetAnswerOk returns a tuple with the Answer field value
// and a boolean to check if the value has been set.
func (o *ForumPollAnswerModelV1) GetAnswerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Answer, true
}

// SetAnswer sets field value
func (o *ForumPollAnswerModelV1) SetAnswer(v string) {
	o.Answer = v
}

// GetVotes returns the Votes field value if set, zero value otherwise.
func (o *ForumPollAnswerModelV1) GetVotes() int64 {
	if o == nil || IsNil(o.Votes) {
		var ret int64
		return ret
	}
	return *o.Votes
}

// GetVotesOk returns a tuple with the Votes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumPollAnswerModelV1) GetVotesOk() (*int64, bool) {
	if o == nil || IsNil(o.Votes) {
		return nil, false
	}
	return o.Votes, true
}

// HasVotes returns a boolean if a field has been set.
func (o *ForumPollAnswerModelV1) HasVotes() bool {
	if o != nil && !IsNil(o.Votes) {
		return true
	}

	return false
}

// SetVotes gets a reference to the given int64 and assigns it to the Votes field.
func (o *ForumPollAnswerModelV1) SetVotes(v int64) {
	o.Votes = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *ForumPollAnswerModelV1) GetImage() ForumPollAnswerModelV1Image {
	if o == nil || IsNil(o.Image) {
		var ret ForumPollAnswerModelV1Image
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumPollAnswerModelV1) GetImageOk() (*ForumPollAnswerModelV1Image, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *ForumPollAnswerModelV1) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given ForumPollAnswerModelV1Image and assigns it to the Image field.
func (o *ForumPollAnswerModelV1) SetImage(v ForumPollAnswerModelV1Image) {
	o.Image = &v
}

func (o ForumPollAnswerModelV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForumPollAnswerModelV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["answer_id"] = o.AnswerId
	toSerialize["answer"] = o.Answer
	if !IsNil(o.Votes) {
		toSerialize["votes"] = o.Votes
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	return toSerialize, nil
}

type NullableForumPollAnswerModelV1 struct {
	value *ForumPollAnswerModelV1
	isSet bool
}

func (v NullableForumPollAnswerModelV1) Get() *ForumPollAnswerModelV1 {
	return v.value
}

func (v *NullableForumPollAnswerModelV1) Set(val *ForumPollAnswerModelV1) {
	v.value = val
	v.isSet = true
}

func (v NullableForumPollAnswerModelV1) IsSet() bool {
	return v.isSet
}

func (v *NullableForumPollAnswerModelV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForumPollAnswerModelV1(val *ForumPollAnswerModelV1) *NullableForumPollAnswerModelV1 {
	return &NullableForumPollAnswerModelV1{value: val, isSet: true}
}

func (v NullableForumPollAnswerModelV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForumPollAnswerModelV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
