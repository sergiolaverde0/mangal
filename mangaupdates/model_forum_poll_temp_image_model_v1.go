/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ForumPollTempImageModelV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForumPollTempImageModelV1{}

// ForumPollTempImageModelV1 struct for ForumPollTempImageModelV1
type ForumPollTempImageModelV1 struct {
	ImageId   *int64                        `json:"image_id,omitempty"`
	Caption   *string                       `json:"caption,omitempty"`
	Url       *ForumPollTempImageModelV1Url `json:"url,omitempty"`
	Height    *int64                        `json:"height,omitempty"`
	Width     *int64                        `json:"width,omitempty"`
	TimeAdded *TimeV1                       `json:"time_added,omitempty"`
}

// NewForumPollTempImageModelV1 instantiates a new ForumPollTempImageModelV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForumPollTempImageModelV1() *ForumPollTempImageModelV1 {
	this := ForumPollTempImageModelV1{}
	return &this
}

// NewForumPollTempImageModelV1WithDefaults instantiates a new ForumPollTempImageModelV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForumPollTempImageModelV1WithDefaults() *ForumPollTempImageModelV1 {
	this := ForumPollTempImageModelV1{}
	return &this
}

// GetImageId returns the ImageId field value if set, zero value otherwise.
func (o *ForumPollTempImageModelV1) GetImageId() int64 {
	if o == nil || IsNil(o.ImageId) {
		var ret int64
		return ret
	}
	return *o.ImageId
}

// GetImageIdOk returns a tuple with the ImageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumPollTempImageModelV1) GetImageIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ImageId) {
		return nil, false
	}
	return o.ImageId, true
}

// HasImageId returns a boolean if a field has been set.
func (o *ForumPollTempImageModelV1) HasImageId() bool {
	if o != nil && !IsNil(o.ImageId) {
		return true
	}

	return false
}

// SetImageId gets a reference to the given int64 and assigns it to the ImageId field.
func (o *ForumPollTempImageModelV1) SetImageId(v int64) {
	o.ImageId = &v
}

// GetCaption returns the Caption field value if set, zero value otherwise.
func (o *ForumPollTempImageModelV1) GetCaption() string {
	if o == nil || IsNil(o.Caption) {
		var ret string
		return ret
	}
	return *o.Caption
}

// GetCaptionOk returns a tuple with the Caption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumPollTempImageModelV1) GetCaptionOk() (*string, bool) {
	if o == nil || IsNil(o.Caption) {
		return nil, false
	}
	return o.Caption, true
}

// HasCaption returns a boolean if a field has been set.
func (o *ForumPollTempImageModelV1) HasCaption() bool {
	if o != nil && !IsNil(o.Caption) {
		return true
	}

	return false
}

// SetCaption gets a reference to the given string and assigns it to the Caption field.
func (o *ForumPollTempImageModelV1) SetCaption(v string) {
	o.Caption = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ForumPollTempImageModelV1) GetUrl() ForumPollTempImageModelV1Url {
	if o == nil || IsNil(o.Url) {
		var ret ForumPollTempImageModelV1Url
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumPollTempImageModelV1) GetUrlOk() (*ForumPollTempImageModelV1Url, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ForumPollTempImageModelV1) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given ForumPollTempImageModelV1Url and assigns it to the Url field.
func (o *ForumPollTempImageModelV1) SetUrl(v ForumPollTempImageModelV1Url) {
	o.Url = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *ForumPollTempImageModelV1) GetHeight() int64 {
	if o == nil || IsNil(o.Height) {
		var ret int64
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumPollTempImageModelV1) GetHeightOk() (*int64, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *ForumPollTempImageModelV1) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int64 and assigns it to the Height field.
func (o *ForumPollTempImageModelV1) SetHeight(v int64) {
	o.Height = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *ForumPollTempImageModelV1) GetWidth() int64 {
	if o == nil || IsNil(o.Width) {
		var ret int64
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumPollTempImageModelV1) GetWidthOk() (*int64, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *ForumPollTempImageModelV1) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given int64 and assigns it to the Width field.
func (o *ForumPollTempImageModelV1) SetWidth(v int64) {
	o.Width = &v
}

// GetTimeAdded returns the TimeAdded field value if set, zero value otherwise.
func (o *ForumPollTempImageModelV1) GetTimeAdded() TimeV1 {
	if o == nil || IsNil(o.TimeAdded) {
		var ret TimeV1
		return ret
	}
	return *o.TimeAdded
}

// GetTimeAddedOk returns a tuple with the TimeAdded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumPollTempImageModelV1) GetTimeAddedOk() (*TimeV1, bool) {
	if o == nil || IsNil(o.TimeAdded) {
		return nil, false
	}
	return o.TimeAdded, true
}

// HasTimeAdded returns a boolean if a field has been set.
func (o *ForumPollTempImageModelV1) HasTimeAdded() bool {
	if o != nil && !IsNil(o.TimeAdded) {
		return true
	}

	return false
}

// SetTimeAdded gets a reference to the given TimeV1 and assigns it to the TimeAdded field.
func (o *ForumPollTempImageModelV1) SetTimeAdded(v TimeV1) {
	o.TimeAdded = &v
}

func (o ForumPollTempImageModelV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForumPollTempImageModelV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ImageId) {
		toSerialize["image_id"] = o.ImageId
	}
	if !IsNil(o.Caption) {
		toSerialize["caption"] = o.Caption
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	if !IsNil(o.TimeAdded) {
		toSerialize["time_added"] = o.TimeAdded
	}
	return toSerialize, nil
}

type NullableForumPollTempImageModelV1 struct {
	value *ForumPollTempImageModelV1
	isSet bool
}

func (v NullableForumPollTempImageModelV1) Get() *ForumPollTempImageModelV1 {
	return v.value
}

func (v *NullableForumPollTempImageModelV1) Set(val *ForumPollTempImageModelV1) {
	v.value = val
	v.isSet = true
}

func (v NullableForumPollTempImageModelV1) IsSet() bool {
	return v.isSet
}

func (v *NullableForumPollTempImageModelV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForumPollTempImageModelV1(val *ForumPollTempImageModelV1) *NullableForumPollTempImageModelV1 {
	return &NullableForumPollTempImageModelV1{value: val, isSet: true}
}

func (v NullableForumPollTempImageModelV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForumPollTempImageModelV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
