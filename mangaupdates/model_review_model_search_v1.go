/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReviewModelSearchV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReviewModelSearchV1{}

// ReviewModelSearchV1 struct for ReviewModelSearchV1
type ReviewModelSearchV1 struct {
	Id          *int64                     `json:"id,omitempty"`
	Title       *string                    `json:"title,omitempty"`
	BodyExcerpt *string                    `json:"body_excerpt,omitempty"`
	Author      *ReviewModelSearchV1Author `json:"author,omitempty"`
	Series      *SeriesModelSearchV1       `json:"series,omitempty"`
	Review      *ReviewModelSearchV1Review `json:"review,omitempty"`
	TimeAdded   *TimeV1                    `json:"time_added,omitempty"`
}

// NewReviewModelSearchV1 instantiates a new ReviewModelSearchV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReviewModelSearchV1() *ReviewModelSearchV1 {
	this := ReviewModelSearchV1{}
	return &this
}

// NewReviewModelSearchV1WithDefaults instantiates a new ReviewModelSearchV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReviewModelSearchV1WithDefaults() *ReviewModelSearchV1 {
	this := ReviewModelSearchV1{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ReviewModelSearchV1) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewModelSearchV1) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ReviewModelSearchV1) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ReviewModelSearchV1) SetId(v int64) {
	o.Id = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ReviewModelSearchV1) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewModelSearchV1) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ReviewModelSearchV1) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ReviewModelSearchV1) SetTitle(v string) {
	o.Title = &v
}

// GetBodyExcerpt returns the BodyExcerpt field value if set, zero value otherwise.
func (o *ReviewModelSearchV1) GetBodyExcerpt() string {
	if o == nil || IsNil(o.BodyExcerpt) {
		var ret string
		return ret
	}
	return *o.BodyExcerpt
}

// GetBodyExcerptOk returns a tuple with the BodyExcerpt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewModelSearchV1) GetBodyExcerptOk() (*string, bool) {
	if o == nil || IsNil(o.BodyExcerpt) {
		return nil, false
	}
	return o.BodyExcerpt, true
}

// HasBodyExcerpt returns a boolean if a field has been set.
func (o *ReviewModelSearchV1) HasBodyExcerpt() bool {
	if o != nil && !IsNil(o.BodyExcerpt) {
		return true
	}

	return false
}

// SetBodyExcerpt gets a reference to the given string and assigns it to the BodyExcerpt field.
func (o *ReviewModelSearchV1) SetBodyExcerpt(v string) {
	o.BodyExcerpt = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *ReviewModelSearchV1) GetAuthor() ReviewModelSearchV1Author {
	if o == nil || IsNil(o.Author) {
		var ret ReviewModelSearchV1Author
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewModelSearchV1) GetAuthorOk() (*ReviewModelSearchV1Author, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *ReviewModelSearchV1) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given ReviewModelSearchV1Author and assigns it to the Author field.
func (o *ReviewModelSearchV1) SetAuthor(v ReviewModelSearchV1Author) {
	o.Author = &v
}

// GetSeries returns the Series field value if set, zero value otherwise.
func (o *ReviewModelSearchV1) GetSeries() SeriesModelSearchV1 {
	if o == nil || IsNil(o.Series) {
		var ret SeriesModelSearchV1
		return ret
	}
	return *o.Series
}

// GetSeriesOk returns a tuple with the Series field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewModelSearchV1) GetSeriesOk() (*SeriesModelSearchV1, bool) {
	if o == nil || IsNil(o.Series) {
		return nil, false
	}
	return o.Series, true
}

// HasSeries returns a boolean if a field has been set.
func (o *ReviewModelSearchV1) HasSeries() bool {
	if o != nil && !IsNil(o.Series) {
		return true
	}

	return false
}

// SetSeries gets a reference to the given SeriesModelSearchV1 and assigns it to the Series field.
func (o *ReviewModelSearchV1) SetSeries(v SeriesModelSearchV1) {
	o.Series = &v
}

// GetReview returns the Review field value if set, zero value otherwise.
func (o *ReviewModelSearchV1) GetReview() ReviewModelSearchV1Review {
	if o == nil || IsNil(o.Review) {
		var ret ReviewModelSearchV1Review
		return ret
	}
	return *o.Review
}

// GetReviewOk returns a tuple with the Review field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewModelSearchV1) GetReviewOk() (*ReviewModelSearchV1Review, bool) {
	if o == nil || IsNil(o.Review) {
		return nil, false
	}
	return o.Review, true
}

// HasReview returns a boolean if a field has been set.
func (o *ReviewModelSearchV1) HasReview() bool {
	if o != nil && !IsNil(o.Review) {
		return true
	}

	return false
}

// SetReview gets a reference to the given ReviewModelSearchV1Review and assigns it to the Review field.
func (o *ReviewModelSearchV1) SetReview(v ReviewModelSearchV1Review) {
	o.Review = &v
}

// GetTimeAdded returns the TimeAdded field value if set, zero value otherwise.
func (o *ReviewModelSearchV1) GetTimeAdded() TimeV1 {
	if o == nil || IsNil(o.TimeAdded) {
		var ret TimeV1
		return ret
	}
	return *o.TimeAdded
}

// GetTimeAddedOk returns a tuple with the TimeAdded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewModelSearchV1) GetTimeAddedOk() (*TimeV1, bool) {
	if o == nil || IsNil(o.TimeAdded) {
		return nil, false
	}
	return o.TimeAdded, true
}

// HasTimeAdded returns a boolean if a field has been set.
func (o *ReviewModelSearchV1) HasTimeAdded() bool {
	if o != nil && !IsNil(o.TimeAdded) {
		return true
	}

	return false
}

// SetTimeAdded gets a reference to the given TimeV1 and assigns it to the TimeAdded field.
func (o *ReviewModelSearchV1) SetTimeAdded(v TimeV1) {
	o.TimeAdded = &v
}

func (o ReviewModelSearchV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReviewModelSearchV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.BodyExcerpt) {
		toSerialize["body_excerpt"] = o.BodyExcerpt
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Series) {
		toSerialize["series"] = o.Series
	}
	if !IsNil(o.Review) {
		toSerialize["review"] = o.Review
	}
	if !IsNil(o.TimeAdded) {
		toSerialize["time_added"] = o.TimeAdded
	}
	return toSerialize, nil
}

type NullableReviewModelSearchV1 struct {
	value *ReviewModelSearchV1
	isSet bool
}

func (v NullableReviewModelSearchV1) Get() *ReviewModelSearchV1 {
	return v.value
}

func (v *NullableReviewModelSearchV1) Set(val *ReviewModelSearchV1) {
	v.value = val
	v.isSet = true
}

func (v NullableReviewModelSearchV1) IsSet() bool {
	return v.isSet
}

func (v *NullableReviewModelSearchV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReviewModelSearchV1(val *ReviewModelSearchV1) *NullableReviewModelSearchV1 {
	return &NullableReviewModelSearchV1{value: val, isSet: true}
}

func (v NullableReviewModelSearchV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReviewModelSearchV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
