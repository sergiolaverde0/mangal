/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserModelUpdateV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserModelUpdateV1{}

// UserModelUpdateV1 struct for UserModelUpdateV1
type UserModelUpdateV1 struct {
	Username      *string                   `json:"username,omitempty"`
	Email         *string                   `json:"email,omitempty"`
	Password      *string                   `json:"password,omitempty"`
	NewAvatarId   *int64                    `json:"new_avatar_id,omitempty"`
	Gender        *string                   `json:"gender,omitempty"`
	Birthday      *BirthdayModelV1          `json:"birthday,omitempty"`
	Timezone      *int64                    `json:"timezone,omitempty"`
	Signature     *string                   `json:"signature,omitempty"`
	Location      *string                   `json:"location,omitempty"`
	ForumTitle    *string                   `json:"forum_title,omitempty"`
	FoldingAtHome *bool                     `json:"folding_at_home,omitempty"`
	Profile       *UserModelUpdateV1Profile `json:"profile,omitempty"`
	Admin         *UserModelUpdateV1Admin   `json:"admin,omitempty"`
	UserGroup     *string                   `json:"user_group,omitempty"`
}

// NewUserModelUpdateV1 instantiates a new UserModelUpdateV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserModelUpdateV1() *UserModelUpdateV1 {
	this := UserModelUpdateV1{}
	return &this
}

// NewUserModelUpdateV1WithDefaults instantiates a new UserModelUpdateV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserModelUpdateV1WithDefaults() *UserModelUpdateV1 {
	this := UserModelUpdateV1{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UserModelUpdateV1) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelUpdateV1) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UserModelUpdateV1) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UserModelUpdateV1) SetUsername(v string) {
	o.Username = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserModelUpdateV1) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelUpdateV1) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserModelUpdateV1) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserModelUpdateV1) SetEmail(v string) {
	o.Email = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UserModelUpdateV1) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelUpdateV1) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UserModelUpdateV1) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UserModelUpdateV1) SetPassword(v string) {
	o.Password = &v
}

// GetNewAvatarId returns the NewAvatarId field value if set, zero value otherwise.
func (o *UserModelUpdateV1) GetNewAvatarId() int64 {
	if o == nil || IsNil(o.NewAvatarId) {
		var ret int64
		return ret
	}
	return *o.NewAvatarId
}

// GetNewAvatarIdOk returns a tuple with the NewAvatarId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelUpdateV1) GetNewAvatarIdOk() (*int64, bool) {
	if o == nil || IsNil(o.NewAvatarId) {
		return nil, false
	}
	return o.NewAvatarId, true
}

// HasNewAvatarId returns a boolean if a field has been set.
func (o *UserModelUpdateV1) HasNewAvatarId() bool {
	if o != nil && !IsNil(o.NewAvatarId) {
		return true
	}

	return false
}

// SetNewAvatarId gets a reference to the given int64 and assigns it to the NewAvatarId field.
func (o *UserModelUpdateV1) SetNewAvatarId(v int64) {
	o.NewAvatarId = &v
}

// GetGender returns the Gender field value if set, zero value otherwise.
func (o *UserModelUpdateV1) GetGender() string {
	if o == nil || IsNil(o.Gender) {
		var ret string
		return ret
	}
	return *o.Gender
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelUpdateV1) GetGenderOk() (*string, bool) {
	if o == nil || IsNil(o.Gender) {
		return nil, false
	}
	return o.Gender, true
}

// HasGender returns a boolean if a field has been set.
func (o *UserModelUpdateV1) HasGender() bool {
	if o != nil && !IsNil(o.Gender) {
		return true
	}

	return false
}

// SetGender gets a reference to the given string and assigns it to the Gender field.
func (o *UserModelUpdateV1) SetGender(v string) {
	o.Gender = &v
}

// GetBirthday returns the Birthday field value if set, zero value otherwise.
func (o *UserModelUpdateV1) GetBirthday() BirthdayModelV1 {
	if o == nil || IsNil(o.Birthday) {
		var ret BirthdayModelV1
		return ret
	}
	return *o.Birthday
}

// GetBirthdayOk returns a tuple with the Birthday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelUpdateV1) GetBirthdayOk() (*BirthdayModelV1, bool) {
	if o == nil || IsNil(o.Birthday) {
		return nil, false
	}
	return o.Birthday, true
}

// HasBirthday returns a boolean if a field has been set.
func (o *UserModelUpdateV1) HasBirthday() bool {
	if o != nil && !IsNil(o.Birthday) {
		return true
	}

	return false
}

// SetBirthday gets a reference to the given BirthdayModelV1 and assigns it to the Birthday field.
func (o *UserModelUpdateV1) SetBirthday(v BirthdayModelV1) {
	o.Birthday = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *UserModelUpdateV1) GetTimezone() int64 {
	if o == nil || IsNil(o.Timezone) {
		var ret int64
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelUpdateV1) GetTimezoneOk() (*int64, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *UserModelUpdateV1) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given int64 and assigns it to the Timezone field.
func (o *UserModelUpdateV1) SetTimezone(v int64) {
	o.Timezone = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *UserModelUpdateV1) GetSignature() string {
	if o == nil || IsNil(o.Signature) {
		var ret string
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelUpdateV1) GetSignatureOk() (*string, bool) {
	if o == nil || IsNil(o.Signature) {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *UserModelUpdateV1) HasSignature() bool {
	if o != nil && !IsNil(o.Signature) {
		return true
	}

	return false
}

// SetSignature gets a reference to the given string and assigns it to the Signature field.
func (o *UserModelUpdateV1) SetSignature(v string) {
	o.Signature = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *UserModelUpdateV1) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelUpdateV1) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *UserModelUpdateV1) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *UserModelUpdateV1) SetLocation(v string) {
	o.Location = &v
}

// GetForumTitle returns the ForumTitle field value if set, zero value otherwise.
func (o *UserModelUpdateV1) GetForumTitle() string {
	if o == nil || IsNil(o.ForumTitle) {
		var ret string
		return ret
	}
	return *o.ForumTitle
}

// GetForumTitleOk returns a tuple with the ForumTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelUpdateV1) GetForumTitleOk() (*string, bool) {
	if o == nil || IsNil(o.ForumTitle) {
		return nil, false
	}
	return o.ForumTitle, true
}

// HasForumTitle returns a boolean if a field has been set.
func (o *UserModelUpdateV1) HasForumTitle() bool {
	if o != nil && !IsNil(o.ForumTitle) {
		return true
	}

	return false
}

// SetForumTitle gets a reference to the given string and assigns it to the ForumTitle field.
func (o *UserModelUpdateV1) SetForumTitle(v string) {
	o.ForumTitle = &v
}

// GetFoldingAtHome returns the FoldingAtHome field value if set, zero value otherwise.
func (o *UserModelUpdateV1) GetFoldingAtHome() bool {
	if o == nil || IsNil(o.FoldingAtHome) {
		var ret bool
		return ret
	}
	return *o.FoldingAtHome
}

// GetFoldingAtHomeOk returns a tuple with the FoldingAtHome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelUpdateV1) GetFoldingAtHomeOk() (*bool, bool) {
	if o == nil || IsNil(o.FoldingAtHome) {
		return nil, false
	}
	return o.FoldingAtHome, true
}

// HasFoldingAtHome returns a boolean if a field has been set.
func (o *UserModelUpdateV1) HasFoldingAtHome() bool {
	if o != nil && !IsNil(o.FoldingAtHome) {
		return true
	}

	return false
}

// SetFoldingAtHome gets a reference to the given bool and assigns it to the FoldingAtHome field.
func (o *UserModelUpdateV1) SetFoldingAtHome(v bool) {
	o.FoldingAtHome = &v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *UserModelUpdateV1) GetProfile() UserModelUpdateV1Profile {
	if o == nil || IsNil(o.Profile) {
		var ret UserModelUpdateV1Profile
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelUpdateV1) GetProfileOk() (*UserModelUpdateV1Profile, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *UserModelUpdateV1) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given UserModelUpdateV1Profile and assigns it to the Profile field.
func (o *UserModelUpdateV1) SetProfile(v UserModelUpdateV1Profile) {
	o.Profile = &v
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *UserModelUpdateV1) GetAdmin() UserModelUpdateV1Admin {
	if o == nil || IsNil(o.Admin) {
		var ret UserModelUpdateV1Admin
		return ret
	}
	return *o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelUpdateV1) GetAdminOk() (*UserModelUpdateV1Admin, bool) {
	if o == nil || IsNil(o.Admin) {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *UserModelUpdateV1) HasAdmin() bool {
	if o != nil && !IsNil(o.Admin) {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given UserModelUpdateV1Admin and assigns it to the Admin field.
func (o *UserModelUpdateV1) SetAdmin(v UserModelUpdateV1Admin) {
	o.Admin = &v
}

// GetUserGroup returns the UserGroup field value if set, zero value otherwise.
func (o *UserModelUpdateV1) GetUserGroup() string {
	if o == nil || IsNil(o.UserGroup) {
		var ret string
		return ret
	}
	return *o.UserGroup
}

// GetUserGroupOk returns a tuple with the UserGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelUpdateV1) GetUserGroupOk() (*string, bool) {
	if o == nil || IsNil(o.UserGroup) {
		return nil, false
	}
	return o.UserGroup, true
}

// HasUserGroup returns a boolean if a field has been set.
func (o *UserModelUpdateV1) HasUserGroup() bool {
	if o != nil && !IsNil(o.UserGroup) {
		return true
	}

	return false
}

// SetUserGroup gets a reference to the given string and assigns it to the UserGroup field.
func (o *UserModelUpdateV1) SetUserGroup(v string) {
	o.UserGroup = &v
}

func (o UserModelUpdateV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserModelUpdateV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.NewAvatarId) {
		toSerialize["new_avatar_id"] = o.NewAvatarId
	}
	if !IsNil(o.Gender) {
		toSerialize["gender"] = o.Gender
	}
	if !IsNil(o.Birthday) {
		toSerialize["birthday"] = o.Birthday
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	if !IsNil(o.Signature) {
		toSerialize["signature"] = o.Signature
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.ForumTitle) {
		toSerialize["forum_title"] = o.ForumTitle
	}
	if !IsNil(o.FoldingAtHome) {
		toSerialize["folding_at_home"] = o.FoldingAtHome
	}
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	if !IsNil(o.Admin) {
		toSerialize["admin"] = o.Admin
	}
	if !IsNil(o.UserGroup) {
		toSerialize["user_group"] = o.UserGroup
	}
	return toSerialize, nil
}

type NullableUserModelUpdateV1 struct {
	value *UserModelUpdateV1
	isSet bool
}

func (v NullableUserModelUpdateV1) Get() *UserModelUpdateV1 {
	return v.value
}

func (v *NullableUserModelUpdateV1) Set(val *UserModelUpdateV1) {
	v.value = val
	v.isSet = true
}

func (v NullableUserModelUpdateV1) IsSet() bool {
	return v.isSet
}

func (v *NullableUserModelUpdateV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserModelUpdateV1(val *UserModelUpdateV1) *NullableUserModelUpdateV1 {
	return &NullableUserModelUpdateV1{value: val, isSet: true}
}

func (v NullableUserModelUpdateV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserModelUpdateV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
