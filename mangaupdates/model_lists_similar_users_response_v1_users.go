/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ListsSimilarUsersResponseV1Users type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListsSimilarUsersResponseV1Users{}

// ListsSimilarUsersResponseV1Users struct for ListsSimilarUsersResponseV1Users
type ListsSimilarUsersResponseV1Users struct {
	UserId         *int64   `json:"user_id,omitempty"`
	UserName       *string  `json:"user_name,omitempty"`
	UserRating     *float32 `json:"user_rating,omitempty"`
	IntersectCount *int64   `json:"intersect_count,omitempty"`
	PercentMatch   *int64   `json:"percent_match,omitempty"`
}

// NewListsSimilarUsersResponseV1Users instantiates a new ListsSimilarUsersResponseV1Users object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListsSimilarUsersResponseV1Users() *ListsSimilarUsersResponseV1Users {
	this := ListsSimilarUsersResponseV1Users{}
	return &this
}

// NewListsSimilarUsersResponseV1UsersWithDefaults instantiates a new ListsSimilarUsersResponseV1Users object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListsSimilarUsersResponseV1UsersWithDefaults() *ListsSimilarUsersResponseV1Users {
	this := ListsSimilarUsersResponseV1Users{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *ListsSimilarUsersResponseV1Users) GetUserId() int64 {
	if o == nil || IsNil(o.UserId) {
		var ret int64
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListsSimilarUsersResponseV1Users) GetUserIdOk() (*int64, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *ListsSimilarUsersResponseV1Users) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int64 and assigns it to the UserId field.
func (o *ListsSimilarUsersResponseV1Users) SetUserId(v int64) {
	o.UserId = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *ListsSimilarUsersResponseV1Users) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListsSimilarUsersResponseV1Users) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *ListsSimilarUsersResponseV1Users) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *ListsSimilarUsersResponseV1Users) SetUserName(v string) {
	o.UserName = &v
}

// GetUserRating returns the UserRating field value if set, zero value otherwise.
func (o *ListsSimilarUsersResponseV1Users) GetUserRating() float32 {
	if o == nil || IsNil(o.UserRating) {
		var ret float32
		return ret
	}
	return *o.UserRating
}

// GetUserRatingOk returns a tuple with the UserRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListsSimilarUsersResponseV1Users) GetUserRatingOk() (*float32, bool) {
	if o == nil || IsNil(o.UserRating) {
		return nil, false
	}
	return o.UserRating, true
}

// HasUserRating returns a boolean if a field has been set.
func (o *ListsSimilarUsersResponseV1Users) HasUserRating() bool {
	if o != nil && !IsNil(o.UserRating) {
		return true
	}

	return false
}

// SetUserRating gets a reference to the given float32 and assigns it to the UserRating field.
func (o *ListsSimilarUsersResponseV1Users) SetUserRating(v float32) {
	o.UserRating = &v
}

// GetIntersectCount returns the IntersectCount field value if set, zero value otherwise.
func (o *ListsSimilarUsersResponseV1Users) GetIntersectCount() int64 {
	if o == nil || IsNil(o.IntersectCount) {
		var ret int64
		return ret
	}
	return *o.IntersectCount
}

// GetIntersectCountOk returns a tuple with the IntersectCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListsSimilarUsersResponseV1Users) GetIntersectCountOk() (*int64, bool) {
	if o == nil || IsNil(o.IntersectCount) {
		return nil, false
	}
	return o.IntersectCount, true
}

// HasIntersectCount returns a boolean if a field has been set.
func (o *ListsSimilarUsersResponseV1Users) HasIntersectCount() bool {
	if o != nil && !IsNil(o.IntersectCount) {
		return true
	}

	return false
}

// SetIntersectCount gets a reference to the given int64 and assigns it to the IntersectCount field.
func (o *ListsSimilarUsersResponseV1Users) SetIntersectCount(v int64) {
	o.IntersectCount = &v
}

// GetPercentMatch returns the PercentMatch field value if set, zero value otherwise.
func (o *ListsSimilarUsersResponseV1Users) GetPercentMatch() int64 {
	if o == nil || IsNil(o.PercentMatch) {
		var ret int64
		return ret
	}
	return *o.PercentMatch
}

// GetPercentMatchOk returns a tuple with the PercentMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListsSimilarUsersResponseV1Users) GetPercentMatchOk() (*int64, bool) {
	if o == nil || IsNil(o.PercentMatch) {
		return nil, false
	}
	return o.PercentMatch, true
}

// HasPercentMatch returns a boolean if a field has been set.
func (o *ListsSimilarUsersResponseV1Users) HasPercentMatch() bool {
	if o != nil && !IsNil(o.PercentMatch) {
		return true
	}

	return false
}

// SetPercentMatch gets a reference to the given int64 and assigns it to the PercentMatch field.
func (o *ListsSimilarUsersResponseV1Users) SetPercentMatch(v int64) {
	o.PercentMatch = &v
}

func (o ListsSimilarUsersResponseV1Users) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListsSimilarUsersResponseV1Users) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.UserName) {
		toSerialize["user_name"] = o.UserName
	}
	if !IsNil(o.UserRating) {
		toSerialize["user_rating"] = o.UserRating
	}
	if !IsNil(o.IntersectCount) {
		toSerialize["intersect_count"] = o.IntersectCount
	}
	if !IsNil(o.PercentMatch) {
		toSerialize["percent_match"] = o.PercentMatch
	}
	return toSerialize, nil
}

type NullableListsSimilarUsersResponseV1Users struct {
	value *ListsSimilarUsersResponseV1Users
	isSet bool
}

func (v NullableListsSimilarUsersResponseV1Users) Get() *ListsSimilarUsersResponseV1Users {
	return v.value
}

func (v *NullableListsSimilarUsersResponseV1Users) Set(val *ListsSimilarUsersResponseV1Users) {
	v.value = val
	v.isSet = true
}

func (v NullableListsSimilarUsersResponseV1Users) IsSet() bool {
	return v.isSet
}

func (v *NullableListsSimilarUsersResponseV1Users) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListsSimilarUsersResponseV1Users(val *ListsSimilarUsersResponseV1Users) *NullableListsSimilarUsersResponseV1Users {
	return &NullableListsSimilarUsersResponseV1Users{value: val, isSet: true}
}

func (v NullableListsSimilarUsersResponseV1Users) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListsSimilarUsersResponseV1Users) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
