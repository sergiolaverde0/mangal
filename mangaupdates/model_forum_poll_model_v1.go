/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ForumPollModelV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForumPollModelV1{}

// ForumPollModelV1 struct for ForumPollModelV1
type ForumPollModelV1 struct {
	Question *string                  `json:"question,omitempty"`
	Answers  []ForumPollAnswerModelV1 `json:"answers,omitempty"`
	Votes    *int64                   `json:"votes,omitempty"`
	Admin    *ForumPollModelV1Admin   `json:"admin,omitempty"`
}

// NewForumPollModelV1 instantiates a new ForumPollModelV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForumPollModelV1() *ForumPollModelV1 {
	this := ForumPollModelV1{}
	return &this
}

// NewForumPollModelV1WithDefaults instantiates a new ForumPollModelV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForumPollModelV1WithDefaults() *ForumPollModelV1 {
	this := ForumPollModelV1{}
	return &this
}

// GetQuestion returns the Question field value if set, zero value otherwise.
func (o *ForumPollModelV1) GetQuestion() string {
	if o == nil || IsNil(o.Question) {
		var ret string
		return ret
	}
	return *o.Question
}

// GetQuestionOk returns a tuple with the Question field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumPollModelV1) GetQuestionOk() (*string, bool) {
	if o == nil || IsNil(o.Question) {
		return nil, false
	}
	return o.Question, true
}

// HasQuestion returns a boolean if a field has been set.
func (o *ForumPollModelV1) HasQuestion() bool {
	if o != nil && !IsNil(o.Question) {
		return true
	}

	return false
}

// SetQuestion gets a reference to the given string and assigns it to the Question field.
func (o *ForumPollModelV1) SetQuestion(v string) {
	o.Question = &v
}

// GetAnswers returns the Answers field value if set, zero value otherwise.
func (o *ForumPollModelV1) GetAnswers() []ForumPollAnswerModelV1 {
	if o == nil || IsNil(o.Answers) {
		var ret []ForumPollAnswerModelV1
		return ret
	}
	return o.Answers
}

// GetAnswersOk returns a tuple with the Answers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumPollModelV1) GetAnswersOk() ([]ForumPollAnswerModelV1, bool) {
	if o == nil || IsNil(o.Answers) {
		return nil, false
	}
	return o.Answers, true
}

// HasAnswers returns a boolean if a field has been set.
func (o *ForumPollModelV1) HasAnswers() bool {
	if o != nil && !IsNil(o.Answers) {
		return true
	}

	return false
}

// SetAnswers gets a reference to the given []ForumPollAnswerModelV1 and assigns it to the Answers field.
func (o *ForumPollModelV1) SetAnswers(v []ForumPollAnswerModelV1) {
	o.Answers = v
}

// GetVotes returns the Votes field value if set, zero value otherwise.
func (o *ForumPollModelV1) GetVotes() int64 {
	if o == nil || IsNil(o.Votes) {
		var ret int64
		return ret
	}
	return *o.Votes
}

// GetVotesOk returns a tuple with the Votes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumPollModelV1) GetVotesOk() (*int64, bool) {
	if o == nil || IsNil(o.Votes) {
		return nil, false
	}
	return o.Votes, true
}

// HasVotes returns a boolean if a field has been set.
func (o *ForumPollModelV1) HasVotes() bool {
	if o != nil && !IsNil(o.Votes) {
		return true
	}

	return false
}

// SetVotes gets a reference to the given int64 and assigns it to the Votes field.
func (o *ForumPollModelV1) SetVotes(v int64) {
	o.Votes = &v
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *ForumPollModelV1) GetAdmin() ForumPollModelV1Admin {
	if o == nil || IsNil(o.Admin) {
		var ret ForumPollModelV1Admin
		return ret
	}
	return *o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumPollModelV1) GetAdminOk() (*ForumPollModelV1Admin, bool) {
	if o == nil || IsNil(o.Admin) {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *ForumPollModelV1) HasAdmin() bool {
	if o != nil && !IsNil(o.Admin) {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given ForumPollModelV1Admin and assigns it to the Admin field.
func (o *ForumPollModelV1) SetAdmin(v ForumPollModelV1Admin) {
	o.Admin = &v
}

func (o ForumPollModelV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForumPollModelV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Question) {
		toSerialize["question"] = o.Question
	}
	if !IsNil(o.Answers) {
		toSerialize["answers"] = o.Answers
	}
	if !IsNil(o.Votes) {
		toSerialize["votes"] = o.Votes
	}
	if !IsNil(o.Admin) {
		toSerialize["admin"] = o.Admin
	}
	return toSerialize, nil
}

type NullableForumPollModelV1 struct {
	value *ForumPollModelV1
	isSet bool
}

func (v NullableForumPollModelV1) Get() *ForumPollModelV1 {
	return v.value
}

func (v *NullableForumPollModelV1) Set(val *ForumPollModelV1) {
	v.value = val
	v.isSet = true
}

func (v NullableForumPollModelV1) IsSet() bool {
	return v.isSet
}

func (v *NullableForumPollModelV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForumPollModelV1(val *ForumPollModelV1) *NullableForumPollModelV1 {
	return &NullableForumPollModelV1{value: val, isSet: true}
}

func (v NullableForumPollModelV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForumPollModelV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
