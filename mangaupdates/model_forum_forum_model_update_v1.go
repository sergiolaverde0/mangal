/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ForumForumModelUpdateV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForumForumModelUpdateV1{}

// ForumForumModelUpdateV1 struct for ForumForumModelUpdateV1
type ForumForumModelUpdateV1 struct {
	Name        *string                       `json:"name,omitempty"`
	Description *string                       `json:"description,omitempty"`
	Position    *int64                        `json:"position,omitempty"`
	Admin       *ForumForumModelUpdateV1Admin `json:"admin,omitempty"`
}

// NewForumForumModelUpdateV1 instantiates a new ForumForumModelUpdateV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForumForumModelUpdateV1() *ForumForumModelUpdateV1 {
	this := ForumForumModelUpdateV1{}
	return &this
}

// NewForumForumModelUpdateV1WithDefaults instantiates a new ForumForumModelUpdateV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForumForumModelUpdateV1WithDefaults() *ForumForumModelUpdateV1 {
	this := ForumForumModelUpdateV1{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ForumForumModelUpdateV1) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumForumModelUpdateV1) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ForumForumModelUpdateV1) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ForumForumModelUpdateV1) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ForumForumModelUpdateV1) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumForumModelUpdateV1) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ForumForumModelUpdateV1) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ForumForumModelUpdateV1) SetDescription(v string) {
	o.Description = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *ForumForumModelUpdateV1) GetPosition() int64 {
	if o == nil || IsNil(o.Position) {
		var ret int64
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumForumModelUpdateV1) GetPositionOk() (*int64, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *ForumForumModelUpdateV1) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int64 and assigns it to the Position field.
func (o *ForumForumModelUpdateV1) SetPosition(v int64) {
	o.Position = &v
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *ForumForumModelUpdateV1) GetAdmin() ForumForumModelUpdateV1Admin {
	if o == nil || IsNil(o.Admin) {
		var ret ForumForumModelUpdateV1Admin
		return ret
	}
	return *o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumForumModelUpdateV1) GetAdminOk() (*ForumForumModelUpdateV1Admin, bool) {
	if o == nil || IsNil(o.Admin) {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *ForumForumModelUpdateV1) HasAdmin() bool {
	if o != nil && !IsNil(o.Admin) {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given ForumForumModelUpdateV1Admin and assigns it to the Admin field.
func (o *ForumForumModelUpdateV1) SetAdmin(v ForumForumModelUpdateV1Admin) {
	o.Admin = &v
}

func (o ForumForumModelUpdateV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForumForumModelUpdateV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.Admin) {
		toSerialize["admin"] = o.Admin
	}
	return toSerialize, nil
}

type NullableForumForumModelUpdateV1 struct {
	value *ForumForumModelUpdateV1
	isSet bool
}

func (v NullableForumForumModelUpdateV1) Get() *ForumForumModelUpdateV1 {
	return v.value
}

func (v *NullableForumForumModelUpdateV1) Set(val *ForumForumModelUpdateV1) {
	v.value = val
	v.isSet = true
}

func (v NullableForumForumModelUpdateV1) IsSet() bool {
	return v.isSet
}

func (v *NullableForumForumModelUpdateV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForumForumModelUpdateV1(val *ForumForumModelUpdateV1) *NullableForumForumModelUpdateV1 {
	return &NullableForumForumModelUpdateV1{value: val, isSet: true}
}

func (v NullableForumForumModelUpdateV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForumForumModelUpdateV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
