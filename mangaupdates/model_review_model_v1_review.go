/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReviewModelV1Review type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReviewModelV1Review{}

// ReviewModelV1Review struct for ReviewModelV1Review
type ReviewModelV1Review struct {
	User *float32 `json:"user,omitempty"`
	Plot *float32 `json:"plot,omitempty"`
	Drawing *float32 `json:"drawing,omitempty"`
	Characters *float32 `json:"characters,omitempty"`
	Enjoy *float32 `json:"enjoy,omitempty"`
	Overall *float32 `json:"overall,omitempty"`
}

// NewReviewModelV1Review instantiates a new ReviewModelV1Review object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReviewModelV1Review() *ReviewModelV1Review {
	this := ReviewModelV1Review{}
	return &this
}

// NewReviewModelV1ReviewWithDefaults instantiates a new ReviewModelV1Review object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReviewModelV1ReviewWithDefaults() *ReviewModelV1Review {
	this := ReviewModelV1Review{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *ReviewModelV1Review) GetUser() float32 {
	if o == nil || IsNil(o.User) {
		var ret float32
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewModelV1Review) GetUserOk() (*float32, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *ReviewModelV1Review) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given float32 and assigns it to the User field.
func (o *ReviewModelV1Review) SetUser(v float32) {
	o.User = &v
}

// GetPlot returns the Plot field value if set, zero value otherwise.
func (o *ReviewModelV1Review) GetPlot() float32 {
	if o == nil || IsNil(o.Plot) {
		var ret float32
		return ret
	}
	return *o.Plot
}

// GetPlotOk returns a tuple with the Plot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewModelV1Review) GetPlotOk() (*float32, bool) {
	if o == nil || IsNil(o.Plot) {
		return nil, false
	}
	return o.Plot, true
}

// HasPlot returns a boolean if a field has been set.
func (o *ReviewModelV1Review) HasPlot() bool {
	if o != nil && !IsNil(o.Plot) {
		return true
	}

	return false
}

// SetPlot gets a reference to the given float32 and assigns it to the Plot field.
func (o *ReviewModelV1Review) SetPlot(v float32) {
	o.Plot = &v
}

// GetDrawing returns the Drawing field value if set, zero value otherwise.
func (o *ReviewModelV1Review) GetDrawing() float32 {
	if o == nil || IsNil(o.Drawing) {
		var ret float32
		return ret
	}
	return *o.Drawing
}

// GetDrawingOk returns a tuple with the Drawing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewModelV1Review) GetDrawingOk() (*float32, bool) {
	if o == nil || IsNil(o.Drawing) {
		return nil, false
	}
	return o.Drawing, true
}

// HasDrawing returns a boolean if a field has been set.
func (o *ReviewModelV1Review) HasDrawing() bool {
	if o != nil && !IsNil(o.Drawing) {
		return true
	}

	return false
}

// SetDrawing gets a reference to the given float32 and assigns it to the Drawing field.
func (o *ReviewModelV1Review) SetDrawing(v float32) {
	o.Drawing = &v
}

// GetCharacters returns the Characters field value if set, zero value otherwise.
func (o *ReviewModelV1Review) GetCharacters() float32 {
	if o == nil || IsNil(o.Characters) {
		var ret float32
		return ret
	}
	return *o.Characters
}

// GetCharactersOk returns a tuple with the Characters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewModelV1Review) GetCharactersOk() (*float32, bool) {
	if o == nil || IsNil(o.Characters) {
		return nil, false
	}
	return o.Characters, true
}

// HasCharacters returns a boolean if a field has been set.
func (o *ReviewModelV1Review) HasCharacters() bool {
	if o != nil && !IsNil(o.Characters) {
		return true
	}

	return false
}

// SetCharacters gets a reference to the given float32 and assigns it to the Characters field.
func (o *ReviewModelV1Review) SetCharacters(v float32) {
	o.Characters = &v
}

// GetEnjoy returns the Enjoy field value if set, zero value otherwise.
func (o *ReviewModelV1Review) GetEnjoy() float32 {
	if o == nil || IsNil(o.Enjoy) {
		var ret float32
		return ret
	}
	return *o.Enjoy
}

// GetEnjoyOk returns a tuple with the Enjoy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewModelV1Review) GetEnjoyOk() (*float32, bool) {
	if o == nil || IsNil(o.Enjoy) {
		return nil, false
	}
	return o.Enjoy, true
}

// HasEnjoy returns a boolean if a field has been set.
func (o *ReviewModelV1Review) HasEnjoy() bool {
	if o != nil && !IsNil(o.Enjoy) {
		return true
	}

	return false
}

// SetEnjoy gets a reference to the given float32 and assigns it to the Enjoy field.
func (o *ReviewModelV1Review) SetEnjoy(v float32) {
	o.Enjoy = &v
}

// GetOverall returns the Overall field value if set, zero value otherwise.
func (o *ReviewModelV1Review) GetOverall() float32 {
	if o == nil || IsNil(o.Overall) {
		var ret float32
		return ret
	}
	return *o.Overall
}

// GetOverallOk returns a tuple with the Overall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewModelV1Review) GetOverallOk() (*float32, bool) {
	if o == nil || IsNil(o.Overall) {
		return nil, false
	}
	return o.Overall, true
}

// HasOverall returns a boolean if a field has been set.
func (o *ReviewModelV1Review) HasOverall() bool {
	if o != nil && !IsNil(o.Overall) {
		return true
	}

	return false
}

// SetOverall gets a reference to the given float32 and assigns it to the Overall field.
func (o *ReviewModelV1Review) SetOverall(v float32) {
	o.Overall = &v
}

func (o ReviewModelV1Review) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReviewModelV1Review) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Plot) {
		toSerialize["plot"] = o.Plot
	}
	if !IsNil(o.Drawing) {
		toSerialize["drawing"] = o.Drawing
	}
	if !IsNil(o.Characters) {
		toSerialize["characters"] = o.Characters
	}
	if !IsNil(o.Enjoy) {
		toSerialize["enjoy"] = o.Enjoy
	}
	if !IsNil(o.Overall) {
		toSerialize["overall"] = o.Overall
	}
	return toSerialize, nil
}

type NullableReviewModelV1Review struct {
	value *ReviewModelV1Review
	isSet bool
}

func (v NullableReviewModelV1Review) Get() *ReviewModelV1Review {
	return v.value
}

func (v *NullableReviewModelV1Review) Set(val *ReviewModelV1Review) {
	v.value = val
	v.isSet = true
}

func (v NullableReviewModelV1Review) IsSet() bool {
	return v.isSet
}

func (v *NullableReviewModelV1Review) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReviewModelV1Review(val *ReviewModelV1Review) *NullableReviewModelV1Review {
	return &NullableReviewModelV1Review{value: val, isSet: true}
}

func (v NullableReviewModelV1Review) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReviewModelV1Review) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


