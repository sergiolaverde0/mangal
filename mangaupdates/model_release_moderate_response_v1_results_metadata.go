/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReleaseModerateResponseV1ResultsMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReleaseModerateResponseV1ResultsMetadata{}

// ReleaseModerateResponseV1ResultsMetadata struct for ReleaseModerateResponseV1ResultsMetadata
type ReleaseModerateResponseV1ResultsMetadata struct {
	Series       *int64           `json:"series,omitempty"`
	LikeReleases []ReleaseModelV1 `json:"like_releases,omitempty"`
}

// NewReleaseModerateResponseV1ResultsMetadata instantiates a new ReleaseModerateResponseV1ResultsMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleaseModerateResponseV1ResultsMetadata() *ReleaseModerateResponseV1ResultsMetadata {
	this := ReleaseModerateResponseV1ResultsMetadata{}
	return &this
}

// NewReleaseModerateResponseV1ResultsMetadataWithDefaults instantiates a new ReleaseModerateResponseV1ResultsMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseModerateResponseV1ResultsMetadataWithDefaults() *ReleaseModerateResponseV1ResultsMetadata {
	this := ReleaseModerateResponseV1ResultsMetadata{}
	return &this
}

// GetSeries returns the Series field value if set, zero value otherwise.
func (o *ReleaseModerateResponseV1ResultsMetadata) GetSeries() int64 {
	if o == nil || IsNil(o.Series) {
		var ret int64
		return ret
	}
	return *o.Series
}

// GetSeriesOk returns a tuple with the Series field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseModerateResponseV1ResultsMetadata) GetSeriesOk() (*int64, bool) {
	if o == nil || IsNil(o.Series) {
		return nil, false
	}
	return o.Series, true
}

// HasSeries returns a boolean if a field has been set.
func (o *ReleaseModerateResponseV1ResultsMetadata) HasSeries() bool {
	if o != nil && !IsNil(o.Series) {
		return true
	}

	return false
}

// SetSeries gets a reference to the given int64 and assigns it to the Series field.
func (o *ReleaseModerateResponseV1ResultsMetadata) SetSeries(v int64) {
	o.Series = &v
}

// GetLikeReleases returns the LikeReleases field value if set, zero value otherwise.
func (o *ReleaseModerateResponseV1ResultsMetadata) GetLikeReleases() []ReleaseModelV1 {
	if o == nil || IsNil(o.LikeReleases) {
		var ret []ReleaseModelV1
		return ret
	}
	return o.LikeReleases
}

// GetLikeReleasesOk returns a tuple with the LikeReleases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseModerateResponseV1ResultsMetadata) GetLikeReleasesOk() ([]ReleaseModelV1, bool) {
	if o == nil || IsNil(o.LikeReleases) {
		return nil, false
	}
	return o.LikeReleases, true
}

// HasLikeReleases returns a boolean if a field has been set.
func (o *ReleaseModerateResponseV1ResultsMetadata) HasLikeReleases() bool {
	if o != nil && !IsNil(o.LikeReleases) {
		return true
	}

	return false
}

// SetLikeReleases gets a reference to the given []ReleaseModelV1 and assigns it to the LikeReleases field.
func (o *ReleaseModerateResponseV1ResultsMetadata) SetLikeReleases(v []ReleaseModelV1) {
	o.LikeReleases = v
}

func (o ReleaseModerateResponseV1ResultsMetadata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReleaseModerateResponseV1ResultsMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Series) {
		toSerialize["series"] = o.Series
	}
	if !IsNil(o.LikeReleases) {
		toSerialize["like_releases"] = o.LikeReleases
	}
	return toSerialize, nil
}

type NullableReleaseModerateResponseV1ResultsMetadata struct {
	value *ReleaseModerateResponseV1ResultsMetadata
	isSet bool
}

func (v NullableReleaseModerateResponseV1ResultsMetadata) Get() *ReleaseModerateResponseV1ResultsMetadata {
	return v.value
}

func (v *NullableReleaseModerateResponseV1ResultsMetadata) Set(val *ReleaseModerateResponseV1ResultsMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseModerateResponseV1ResultsMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseModerateResponseV1ResultsMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseModerateResponseV1ResultsMetadata(val *ReleaseModerateResponseV1ResultsMetadata) *NullableReleaseModerateResponseV1ResultsMetadata {
	return &NullableReleaseModerateResponseV1ResultsMetadata{value: val, isSet: true}
}

func (v NullableReleaseModerateResponseV1ResultsMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseModerateResponseV1ResultsMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
