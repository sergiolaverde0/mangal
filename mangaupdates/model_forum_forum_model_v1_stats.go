/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ForumForumModelV1Stats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForumForumModelV1Stats{}

// ForumForumModelV1Stats struct for ForumForumModelV1Stats
type ForumForumModelV1Stats struct {
	Topics *int64 `json:"topics,omitempty"`
	Posts  *int64 `json:"posts,omitempty"`
}

// NewForumForumModelV1Stats instantiates a new ForumForumModelV1Stats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForumForumModelV1Stats() *ForumForumModelV1Stats {
	this := ForumForumModelV1Stats{}
	return &this
}

// NewForumForumModelV1StatsWithDefaults instantiates a new ForumForumModelV1Stats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForumForumModelV1StatsWithDefaults() *ForumForumModelV1Stats {
	this := ForumForumModelV1Stats{}
	return &this
}

// GetTopics returns the Topics field value if set, zero value otherwise.
func (o *ForumForumModelV1Stats) GetTopics() int64 {
	if o == nil || IsNil(o.Topics) {
		var ret int64
		return ret
	}
	return *o.Topics
}

// GetTopicsOk returns a tuple with the Topics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumForumModelV1Stats) GetTopicsOk() (*int64, bool) {
	if o == nil || IsNil(o.Topics) {
		return nil, false
	}
	return o.Topics, true
}

// HasTopics returns a boolean if a field has been set.
func (o *ForumForumModelV1Stats) HasTopics() bool {
	if o != nil && !IsNil(o.Topics) {
		return true
	}

	return false
}

// SetTopics gets a reference to the given int64 and assigns it to the Topics field.
func (o *ForumForumModelV1Stats) SetTopics(v int64) {
	o.Topics = &v
}

// GetPosts returns the Posts field value if set, zero value otherwise.
func (o *ForumForumModelV1Stats) GetPosts() int64 {
	if o == nil || IsNil(o.Posts) {
		var ret int64
		return ret
	}
	return *o.Posts
}

// GetPostsOk returns a tuple with the Posts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumForumModelV1Stats) GetPostsOk() (*int64, bool) {
	if o == nil || IsNil(o.Posts) {
		return nil, false
	}
	return o.Posts, true
}

// HasPosts returns a boolean if a field has been set.
func (o *ForumForumModelV1Stats) HasPosts() bool {
	if o != nil && !IsNil(o.Posts) {
		return true
	}

	return false
}

// SetPosts gets a reference to the given int64 and assigns it to the Posts field.
func (o *ForumForumModelV1Stats) SetPosts(v int64) {
	o.Posts = &v
}

func (o ForumForumModelV1Stats) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForumForumModelV1Stats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Topics) {
		toSerialize["topics"] = o.Topics
	}
	if !IsNil(o.Posts) {
		toSerialize["posts"] = o.Posts
	}
	return toSerialize, nil
}

type NullableForumForumModelV1Stats struct {
	value *ForumForumModelV1Stats
	isSet bool
}

func (v NullableForumForumModelV1Stats) Get() *ForumForumModelV1Stats {
	return v.value
}

func (v *NullableForumForumModelV1Stats) Set(val *ForumForumModelV1Stats) {
	v.value = val
	v.isSet = true
}

func (v NullableForumForumModelV1Stats) IsSet() bool {
	return v.isSet
}

func (v *NullableForumForumModelV1Stats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForumForumModelV1Stats(val *ForumForumModelV1Stats) *NullableForumForumModelV1Stats {
	return &NullableForumForumModelV1Stats{value: val, isSet: true}
}

func (v NullableForumForumModelV1Stats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForumForumModelV1Stats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
