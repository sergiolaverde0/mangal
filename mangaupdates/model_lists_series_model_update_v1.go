/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ListsSeriesModelUpdateV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListsSeriesModelUpdateV1{}

// ListsSeriesModelUpdateV1 struct for ListsSeriesModelUpdateV1
type ListsSeriesModelUpdateV1 struct {
	Series   ListsSeriesModelUpdateV1Series  `json:"series"`
	ListId   *int64                          `json:"list_id,omitempty"`
	Status   *ListsSeriesModelUpdateV1Status `json:"status,omitempty"`
	Priority *int64                          `json:"priority,omitempty"`
}

// NewListsSeriesModelUpdateV1 instantiates a new ListsSeriesModelUpdateV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListsSeriesModelUpdateV1(series ListsSeriesModelUpdateV1Series) *ListsSeriesModelUpdateV1 {
	this := ListsSeriesModelUpdateV1{}
	this.Series = series
	return &this
}

// NewListsSeriesModelUpdateV1WithDefaults instantiates a new ListsSeriesModelUpdateV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListsSeriesModelUpdateV1WithDefaults() *ListsSeriesModelUpdateV1 {
	this := ListsSeriesModelUpdateV1{}
	return &this
}

// GetSeries returns the Series field value
func (o *ListsSeriesModelUpdateV1) GetSeries() ListsSeriesModelUpdateV1Series {
	if o == nil {
		var ret ListsSeriesModelUpdateV1Series
		return ret
	}

	return o.Series
}

// GetSeriesOk returns a tuple with the Series field value
// and a boolean to check if the value has been set.
func (o *ListsSeriesModelUpdateV1) GetSeriesOk() (*ListsSeriesModelUpdateV1Series, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Series, true
}

// SetSeries sets field value
func (o *ListsSeriesModelUpdateV1) SetSeries(v ListsSeriesModelUpdateV1Series) {
	o.Series = v
}

// GetListId returns the ListId field value if set, zero value otherwise.
func (o *ListsSeriesModelUpdateV1) GetListId() int64 {
	if o == nil || IsNil(o.ListId) {
		var ret int64
		return ret
	}
	return *o.ListId
}

// GetListIdOk returns a tuple with the ListId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListsSeriesModelUpdateV1) GetListIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ListId) {
		return nil, false
	}
	return o.ListId, true
}

// HasListId returns a boolean if a field has been set.
func (o *ListsSeriesModelUpdateV1) HasListId() bool {
	if o != nil && !IsNil(o.ListId) {
		return true
	}

	return false
}

// SetListId gets a reference to the given int64 and assigns it to the ListId field.
func (o *ListsSeriesModelUpdateV1) SetListId(v int64) {
	o.ListId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ListsSeriesModelUpdateV1) GetStatus() ListsSeriesModelUpdateV1Status {
	if o == nil || IsNil(o.Status) {
		var ret ListsSeriesModelUpdateV1Status
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListsSeriesModelUpdateV1) GetStatusOk() (*ListsSeriesModelUpdateV1Status, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ListsSeriesModelUpdateV1) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ListsSeriesModelUpdateV1Status and assigns it to the Status field.
func (o *ListsSeriesModelUpdateV1) SetStatus(v ListsSeriesModelUpdateV1Status) {
	o.Status = &v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *ListsSeriesModelUpdateV1) GetPriority() int64 {
	if o == nil || IsNil(o.Priority) {
		var ret int64
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListsSeriesModelUpdateV1) GetPriorityOk() (*int64, bool) {
	if o == nil || IsNil(o.Priority) {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *ListsSeriesModelUpdateV1) HasPriority() bool {
	if o != nil && !IsNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given int64 and assigns it to the Priority field.
func (o *ListsSeriesModelUpdateV1) SetPriority(v int64) {
	o.Priority = &v
}

func (o ListsSeriesModelUpdateV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListsSeriesModelUpdateV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["series"] = o.Series
	if !IsNil(o.ListId) {
		toSerialize["list_id"] = o.ListId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	return toSerialize, nil
}

type NullableListsSeriesModelUpdateV1 struct {
	value *ListsSeriesModelUpdateV1
	isSet bool
}

func (v NullableListsSeriesModelUpdateV1) Get() *ListsSeriesModelUpdateV1 {
	return v.value
}

func (v *NullableListsSeriesModelUpdateV1) Set(val *ListsSeriesModelUpdateV1) {
	v.value = val
	v.isSet = true
}

func (v NullableListsSeriesModelUpdateV1) IsSet() bool {
	return v.isSet
}

func (v *NullableListsSeriesModelUpdateV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListsSeriesModelUpdateV1(val *ListsSeriesModelUpdateV1) *NullableListsSeriesModelUpdateV1 {
	return &NullableListsSeriesModelUpdateV1{value: val, isSet: true}
}

func (v NullableListsSeriesModelUpdateV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListsSeriesModelUpdateV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
