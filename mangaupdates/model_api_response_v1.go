/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ApiResponseV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiResponseV1{}

// ApiResponseV1 struct for ApiResponseV1
type ApiResponseV1 struct {
	Status string `json:"status"`
	Reason string `json:"reason"`
	Context map[string]interface{} `json:"context,omitempty"`
}

// NewApiResponseV1 instantiates a new ApiResponseV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiResponseV1(status string, reason string) *ApiResponseV1 {
	this := ApiResponseV1{}
	this.Status = status
	this.Reason = reason
	return &this
}

// NewApiResponseV1WithDefaults instantiates a new ApiResponseV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiResponseV1WithDefaults() *ApiResponseV1 {
	this := ApiResponseV1{}
	return &this
}

// GetStatus returns the Status field value
func (o *ApiResponseV1) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ApiResponseV1) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ApiResponseV1) SetStatus(v string) {
	o.Status = v
}

// GetReason returns the Reason field value
func (o *ApiResponseV1) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *ApiResponseV1) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *ApiResponseV1) SetReason(v string) {
	o.Reason = v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *ApiResponseV1) GetContext() map[string]interface{} {
	if o == nil || IsNil(o.Context) {
		var ret map[string]interface{}
		return ret
	}
	return o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiResponseV1) GetContextOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Context) {
		return map[string]interface{}{}, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *ApiResponseV1) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given map[string]interface{} and assigns it to the Context field.
func (o *ApiResponseV1) SetContext(v map[string]interface{}) {
	o.Context = v
}

func (o ApiResponseV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiResponseV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["status"] = o.Status
	toSerialize["reason"] = o.Reason
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	return toSerialize, nil
}

type NullableApiResponseV1 struct {
	value *ApiResponseV1
	isSet bool
}

func (v NullableApiResponseV1) Get() *ApiResponseV1 {
	return v.value
}

func (v *NullableApiResponseV1) Set(val *ApiResponseV1) {
	v.value = val
	v.isSet = true
}

func (v NullableApiResponseV1) IsSet() bool {
	return v.isSet
}

func (v *NullableApiResponseV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiResponseV1(val *ApiResponseV1) *NullableApiResponseV1 {
	return &NullableApiResponseV1{value: val, isSet: true}
}

func (v NullableApiResponseV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiResponseV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


