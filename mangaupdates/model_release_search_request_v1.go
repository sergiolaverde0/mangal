/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReleaseSearchRequestV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReleaseSearchRequestV1{}

// ReleaseSearchRequestV1 struct for ReleaseSearchRequestV1
type ReleaseSearchRequestV1 struct {
	Search          *string `json:"search,omitempty"`
	SearchType      *string `json:"search_type,omitempty"`
	AddedBy         *int64  `json:"added_by,omitempty"`
	Page            *int64  `json:"page,omitempty"`
	Perpage         *int64  `json:"perpage,omitempty"`
	Letter          *string `json:"letter,omitempty"`
	Orderby         *string `json:"orderby,omitempty"`
	StartDate       *string `json:"start_date,omitempty"`
	EndDate         *string `json:"end_date,omitempty"`
	Asc             *string `json:"asc,omitempty"`
	GroupId         *int64  `json:"group_id,omitempty"`
	Pending         *bool   `json:"pending,omitempty"`
	IncludeMetadata *bool   `json:"include_metadata,omitempty"`
}

// NewReleaseSearchRequestV1 instantiates a new ReleaseSearchRequestV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleaseSearchRequestV1() *ReleaseSearchRequestV1 {
	this := ReleaseSearchRequestV1{}
	return &this
}

// NewReleaseSearchRequestV1WithDefaults instantiates a new ReleaseSearchRequestV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseSearchRequestV1WithDefaults() *ReleaseSearchRequestV1 {
	this := ReleaseSearchRequestV1{}
	return &this
}

// GetSearch returns the Search field value if set, zero value otherwise.
func (o *ReleaseSearchRequestV1) GetSearch() string {
	if o == nil || IsNil(o.Search) {
		var ret string
		return ret
	}
	return *o.Search
}

// GetSearchOk returns a tuple with the Search field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseSearchRequestV1) GetSearchOk() (*string, bool) {
	if o == nil || IsNil(o.Search) {
		return nil, false
	}
	return o.Search, true
}

// HasSearch returns a boolean if a field has been set.
func (o *ReleaseSearchRequestV1) HasSearch() bool {
	if o != nil && !IsNil(o.Search) {
		return true
	}

	return false
}

// SetSearch gets a reference to the given string and assigns it to the Search field.
func (o *ReleaseSearchRequestV1) SetSearch(v string) {
	o.Search = &v
}

// GetSearchType returns the SearchType field value if set, zero value otherwise.
func (o *ReleaseSearchRequestV1) GetSearchType() string {
	if o == nil || IsNil(o.SearchType) {
		var ret string
		return ret
	}
	return *o.SearchType
}

// GetSearchTypeOk returns a tuple with the SearchType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseSearchRequestV1) GetSearchTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SearchType) {
		return nil, false
	}
	return o.SearchType, true
}

// HasSearchType returns a boolean if a field has been set.
func (o *ReleaseSearchRequestV1) HasSearchType() bool {
	if o != nil && !IsNil(o.SearchType) {
		return true
	}

	return false
}

// SetSearchType gets a reference to the given string and assigns it to the SearchType field.
func (o *ReleaseSearchRequestV1) SetSearchType(v string) {
	o.SearchType = &v
}

// GetAddedBy returns the AddedBy field value if set, zero value otherwise.
func (o *ReleaseSearchRequestV1) GetAddedBy() int64 {
	if o == nil || IsNil(o.AddedBy) {
		var ret int64
		return ret
	}
	return *o.AddedBy
}

// GetAddedByOk returns a tuple with the AddedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseSearchRequestV1) GetAddedByOk() (*int64, bool) {
	if o == nil || IsNil(o.AddedBy) {
		return nil, false
	}
	return o.AddedBy, true
}

// HasAddedBy returns a boolean if a field has been set.
func (o *ReleaseSearchRequestV1) HasAddedBy() bool {
	if o != nil && !IsNil(o.AddedBy) {
		return true
	}

	return false
}

// SetAddedBy gets a reference to the given int64 and assigns it to the AddedBy field.
func (o *ReleaseSearchRequestV1) SetAddedBy(v int64) {
	o.AddedBy = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *ReleaseSearchRequestV1) GetPage() int64 {
	if o == nil || IsNil(o.Page) {
		var ret int64
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseSearchRequestV1) GetPageOk() (*int64, bool) {
	if o == nil || IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *ReleaseSearchRequestV1) HasPage() bool {
	if o != nil && !IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given int64 and assigns it to the Page field.
func (o *ReleaseSearchRequestV1) SetPage(v int64) {
	o.Page = &v
}

// GetPerpage returns the Perpage field value if set, zero value otherwise.
func (o *ReleaseSearchRequestV1) GetPerpage() int64 {
	if o == nil || IsNil(o.Perpage) {
		var ret int64
		return ret
	}
	return *o.Perpage
}

// GetPerpageOk returns a tuple with the Perpage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseSearchRequestV1) GetPerpageOk() (*int64, bool) {
	if o == nil || IsNil(o.Perpage) {
		return nil, false
	}
	return o.Perpage, true
}

// HasPerpage returns a boolean if a field has been set.
func (o *ReleaseSearchRequestV1) HasPerpage() bool {
	if o != nil && !IsNil(o.Perpage) {
		return true
	}

	return false
}

// SetPerpage gets a reference to the given int64 and assigns it to the Perpage field.
func (o *ReleaseSearchRequestV1) SetPerpage(v int64) {
	o.Perpage = &v
}

// GetLetter returns the Letter field value if set, zero value otherwise.
func (o *ReleaseSearchRequestV1) GetLetter() string {
	if o == nil || IsNil(o.Letter) {
		var ret string
		return ret
	}
	return *o.Letter
}

// GetLetterOk returns a tuple with the Letter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseSearchRequestV1) GetLetterOk() (*string, bool) {
	if o == nil || IsNil(o.Letter) {
		return nil, false
	}
	return o.Letter, true
}

// HasLetter returns a boolean if a field has been set.
func (o *ReleaseSearchRequestV1) HasLetter() bool {
	if o != nil && !IsNil(o.Letter) {
		return true
	}

	return false
}

// SetLetter gets a reference to the given string and assigns it to the Letter field.
func (o *ReleaseSearchRequestV1) SetLetter(v string) {
	o.Letter = &v
}

// GetOrderby returns the Orderby field value if set, zero value otherwise.
func (o *ReleaseSearchRequestV1) GetOrderby() string {
	if o == nil || IsNil(o.Orderby) {
		var ret string
		return ret
	}
	return *o.Orderby
}

// GetOrderbyOk returns a tuple with the Orderby field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseSearchRequestV1) GetOrderbyOk() (*string, bool) {
	if o == nil || IsNil(o.Orderby) {
		return nil, false
	}
	return o.Orderby, true
}

// HasOrderby returns a boolean if a field has been set.
func (o *ReleaseSearchRequestV1) HasOrderby() bool {
	if o != nil && !IsNil(o.Orderby) {
		return true
	}

	return false
}

// SetOrderby gets a reference to the given string and assigns it to the Orderby field.
func (o *ReleaseSearchRequestV1) SetOrderby(v string) {
	o.Orderby = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *ReleaseSearchRequestV1) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseSearchRequestV1) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *ReleaseSearchRequestV1) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *ReleaseSearchRequestV1) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *ReleaseSearchRequestV1) GetEndDate() string {
	if o == nil || IsNil(o.EndDate) {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseSearchRequestV1) GetEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *ReleaseSearchRequestV1) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *ReleaseSearchRequestV1) SetEndDate(v string) {
	o.EndDate = &v
}

// GetAsc returns the Asc field value if set, zero value otherwise.
func (o *ReleaseSearchRequestV1) GetAsc() string {
	if o == nil || IsNil(o.Asc) {
		var ret string
		return ret
	}
	return *o.Asc
}

// GetAscOk returns a tuple with the Asc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseSearchRequestV1) GetAscOk() (*string, bool) {
	if o == nil || IsNil(o.Asc) {
		return nil, false
	}
	return o.Asc, true
}

// HasAsc returns a boolean if a field has been set.
func (o *ReleaseSearchRequestV1) HasAsc() bool {
	if o != nil && !IsNil(o.Asc) {
		return true
	}

	return false
}

// SetAsc gets a reference to the given string and assigns it to the Asc field.
func (o *ReleaseSearchRequestV1) SetAsc(v string) {
	o.Asc = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *ReleaseSearchRequestV1) GetGroupId() int64 {
	if o == nil || IsNil(o.GroupId) {
		var ret int64
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseSearchRequestV1) GetGroupIdOk() (*int64, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *ReleaseSearchRequestV1) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given int64 and assigns it to the GroupId field.
func (o *ReleaseSearchRequestV1) SetGroupId(v int64) {
	o.GroupId = &v
}

// GetPending returns the Pending field value if set, zero value otherwise.
func (o *ReleaseSearchRequestV1) GetPending() bool {
	if o == nil || IsNil(o.Pending) {
		var ret bool
		return ret
	}
	return *o.Pending
}

// GetPendingOk returns a tuple with the Pending field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseSearchRequestV1) GetPendingOk() (*bool, bool) {
	if o == nil || IsNil(o.Pending) {
		return nil, false
	}
	return o.Pending, true
}

// HasPending returns a boolean if a field has been set.
func (o *ReleaseSearchRequestV1) HasPending() bool {
	if o != nil && !IsNil(o.Pending) {
		return true
	}

	return false
}

// SetPending gets a reference to the given bool and assigns it to the Pending field.
func (o *ReleaseSearchRequestV1) SetPending(v bool) {
	o.Pending = &v
}

// GetIncludeMetadata returns the IncludeMetadata field value if set, zero value otherwise.
func (o *ReleaseSearchRequestV1) GetIncludeMetadata() bool {
	if o == nil || IsNil(o.IncludeMetadata) {
		var ret bool
		return ret
	}
	return *o.IncludeMetadata
}

// GetIncludeMetadataOk returns a tuple with the IncludeMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseSearchRequestV1) GetIncludeMetadataOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeMetadata) {
		return nil, false
	}
	return o.IncludeMetadata, true
}

// HasIncludeMetadata returns a boolean if a field has been set.
func (o *ReleaseSearchRequestV1) HasIncludeMetadata() bool {
	if o != nil && !IsNil(o.IncludeMetadata) {
		return true
	}

	return false
}

// SetIncludeMetadata gets a reference to the given bool and assigns it to the IncludeMetadata field.
func (o *ReleaseSearchRequestV1) SetIncludeMetadata(v bool) {
	o.IncludeMetadata = &v
}

func (o ReleaseSearchRequestV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReleaseSearchRequestV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Search) {
		toSerialize["search"] = o.Search
	}
	if !IsNil(o.SearchType) {
		toSerialize["search_type"] = o.SearchType
	}
	if !IsNil(o.AddedBy) {
		toSerialize["added_by"] = o.AddedBy
	}
	if !IsNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	if !IsNil(o.Perpage) {
		toSerialize["perpage"] = o.Perpage
	}
	if !IsNil(o.Letter) {
		toSerialize["letter"] = o.Letter
	}
	if !IsNil(o.Orderby) {
		toSerialize["orderby"] = o.Orderby
	}
	if !IsNil(o.StartDate) {
		toSerialize["start_date"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["end_date"] = o.EndDate
	}
	if !IsNil(o.Asc) {
		toSerialize["asc"] = o.Asc
	}
	if !IsNil(o.GroupId) {
		toSerialize["group_id"] = o.GroupId
	}
	if !IsNil(o.Pending) {
		toSerialize["pending"] = o.Pending
	}
	if !IsNil(o.IncludeMetadata) {
		toSerialize["include_metadata"] = o.IncludeMetadata
	}
	return toSerialize, nil
}

type NullableReleaseSearchRequestV1 struct {
	value *ReleaseSearchRequestV1
	isSet bool
}

func (v NullableReleaseSearchRequestV1) Get() *ReleaseSearchRequestV1 {
	return v.value
}

func (v *NullableReleaseSearchRequestV1) Set(val *ReleaseSearchRequestV1) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseSearchRequestV1) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseSearchRequestV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseSearchRequestV1(val *ReleaseSearchRequestV1) *NullableReleaseSearchRequestV1 {
	return &NullableReleaseSearchRequestV1{value: val, isSet: true}
}

func (v NullableReleaseSearchRequestV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseSearchRequestV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
