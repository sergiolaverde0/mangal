/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ForumPostListResponseV1ResultsMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForumPostListResponseV1ResultsMetadata{}

// ForumPostListResponseV1ResultsMetadata struct for ForumPostListResponseV1ResultsMetadata
type ForumPostListResponseV1ResultsMetadata struct {
	UserWarn *ForumWarnModelPublicV1 `json:"user_warn,omitempty"`
	Reported *bool `json:"reported,omitempty"`
	IsModerator *bool `json:"is_moderator,omitempty"`
	IsForumAdmin *bool `json:"is_forum_admin,omitempty"`
}

// NewForumPostListResponseV1ResultsMetadata instantiates a new ForumPostListResponseV1ResultsMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForumPostListResponseV1ResultsMetadata() *ForumPostListResponseV1ResultsMetadata {
	this := ForumPostListResponseV1ResultsMetadata{}
	return &this
}

// NewForumPostListResponseV1ResultsMetadataWithDefaults instantiates a new ForumPostListResponseV1ResultsMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForumPostListResponseV1ResultsMetadataWithDefaults() *ForumPostListResponseV1ResultsMetadata {
	this := ForumPostListResponseV1ResultsMetadata{}
	return &this
}

// GetUserWarn returns the UserWarn field value if set, zero value otherwise.
func (o *ForumPostListResponseV1ResultsMetadata) GetUserWarn() ForumWarnModelPublicV1 {
	if o == nil || IsNil(o.UserWarn) {
		var ret ForumWarnModelPublicV1
		return ret
	}
	return *o.UserWarn
}

// GetUserWarnOk returns a tuple with the UserWarn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumPostListResponseV1ResultsMetadata) GetUserWarnOk() (*ForumWarnModelPublicV1, bool) {
	if o == nil || IsNil(o.UserWarn) {
		return nil, false
	}
	return o.UserWarn, true
}

// HasUserWarn returns a boolean if a field has been set.
func (o *ForumPostListResponseV1ResultsMetadata) HasUserWarn() bool {
	if o != nil && !IsNil(o.UserWarn) {
		return true
	}

	return false
}

// SetUserWarn gets a reference to the given ForumWarnModelPublicV1 and assigns it to the UserWarn field.
func (o *ForumPostListResponseV1ResultsMetadata) SetUserWarn(v ForumWarnModelPublicV1) {
	o.UserWarn = &v
}

// GetReported returns the Reported field value if set, zero value otherwise.
func (o *ForumPostListResponseV1ResultsMetadata) GetReported() bool {
	if o == nil || IsNil(o.Reported) {
		var ret bool
		return ret
	}
	return *o.Reported
}

// GetReportedOk returns a tuple with the Reported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumPostListResponseV1ResultsMetadata) GetReportedOk() (*bool, bool) {
	if o == nil || IsNil(o.Reported) {
		return nil, false
	}
	return o.Reported, true
}

// HasReported returns a boolean if a field has been set.
func (o *ForumPostListResponseV1ResultsMetadata) HasReported() bool {
	if o != nil && !IsNil(o.Reported) {
		return true
	}

	return false
}

// SetReported gets a reference to the given bool and assigns it to the Reported field.
func (o *ForumPostListResponseV1ResultsMetadata) SetReported(v bool) {
	o.Reported = &v
}

// GetIsModerator returns the IsModerator field value if set, zero value otherwise.
func (o *ForumPostListResponseV1ResultsMetadata) GetIsModerator() bool {
	if o == nil || IsNil(o.IsModerator) {
		var ret bool
		return ret
	}
	return *o.IsModerator
}

// GetIsModeratorOk returns a tuple with the IsModerator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumPostListResponseV1ResultsMetadata) GetIsModeratorOk() (*bool, bool) {
	if o == nil || IsNil(o.IsModerator) {
		return nil, false
	}
	return o.IsModerator, true
}

// HasIsModerator returns a boolean if a field has been set.
func (o *ForumPostListResponseV1ResultsMetadata) HasIsModerator() bool {
	if o != nil && !IsNil(o.IsModerator) {
		return true
	}

	return false
}

// SetIsModerator gets a reference to the given bool and assigns it to the IsModerator field.
func (o *ForumPostListResponseV1ResultsMetadata) SetIsModerator(v bool) {
	o.IsModerator = &v
}

// GetIsForumAdmin returns the IsForumAdmin field value if set, zero value otherwise.
func (o *ForumPostListResponseV1ResultsMetadata) GetIsForumAdmin() bool {
	if o == nil || IsNil(o.IsForumAdmin) {
		var ret bool
		return ret
	}
	return *o.IsForumAdmin
}

// GetIsForumAdminOk returns a tuple with the IsForumAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumPostListResponseV1ResultsMetadata) GetIsForumAdminOk() (*bool, bool) {
	if o == nil || IsNil(o.IsForumAdmin) {
		return nil, false
	}
	return o.IsForumAdmin, true
}

// HasIsForumAdmin returns a boolean if a field has been set.
func (o *ForumPostListResponseV1ResultsMetadata) HasIsForumAdmin() bool {
	if o != nil && !IsNil(o.IsForumAdmin) {
		return true
	}

	return false
}

// SetIsForumAdmin gets a reference to the given bool and assigns it to the IsForumAdmin field.
func (o *ForumPostListResponseV1ResultsMetadata) SetIsForumAdmin(v bool) {
	o.IsForumAdmin = &v
}

func (o ForumPostListResponseV1ResultsMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForumPostListResponseV1ResultsMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserWarn) {
		toSerialize["user_warn"] = o.UserWarn
	}
	if !IsNil(o.Reported) {
		toSerialize["reported"] = o.Reported
	}
	if !IsNil(o.IsModerator) {
		toSerialize["is_moderator"] = o.IsModerator
	}
	if !IsNil(o.IsForumAdmin) {
		toSerialize["is_forum_admin"] = o.IsForumAdmin
	}
	return toSerialize, nil
}

type NullableForumPostListResponseV1ResultsMetadata struct {
	value *ForumPostListResponseV1ResultsMetadata
	isSet bool
}

func (v NullableForumPostListResponseV1ResultsMetadata) Get() *ForumPostListResponseV1ResultsMetadata {
	return v.value
}

func (v *NullableForumPostListResponseV1ResultsMetadata) Set(val *ForumPostListResponseV1ResultsMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableForumPostListResponseV1ResultsMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableForumPostListResponseV1ResultsMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForumPostListResponseV1ResultsMetadata(val *ForumPostListResponseV1ResultsMetadata) *NullableForumPostListResponseV1ResultsMetadata {
	return &NullableForumPostListResponseV1ResultsMetadata{value: val, isSet: true}
}

func (v NullableForumPostListResponseV1ResultsMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForumPostListResponseV1ResultsMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


