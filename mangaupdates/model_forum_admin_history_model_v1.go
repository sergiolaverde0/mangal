/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ForumAdminHistoryModelV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForumAdminHistoryModelV1{}

// ForumAdminHistoryModelV1 struct for ForumAdminHistoryModelV1
type ForumAdminHistoryModelV1 struct {
	User *UserModelSearchV1 `json:"user,omitempty"`
	ActionTime *TimeV1 `json:"action_time,omitempty"`
	Action *string `json:"action,omitempty"`
}

// NewForumAdminHistoryModelV1 instantiates a new ForumAdminHistoryModelV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForumAdminHistoryModelV1() *ForumAdminHistoryModelV1 {
	this := ForumAdminHistoryModelV1{}
	return &this
}

// NewForumAdminHistoryModelV1WithDefaults instantiates a new ForumAdminHistoryModelV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForumAdminHistoryModelV1WithDefaults() *ForumAdminHistoryModelV1 {
	this := ForumAdminHistoryModelV1{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *ForumAdminHistoryModelV1) GetUser() UserModelSearchV1 {
	if o == nil || IsNil(o.User) {
		var ret UserModelSearchV1
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumAdminHistoryModelV1) GetUserOk() (*UserModelSearchV1, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *ForumAdminHistoryModelV1) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given UserModelSearchV1 and assigns it to the User field.
func (o *ForumAdminHistoryModelV1) SetUser(v UserModelSearchV1) {
	o.User = &v
}

// GetActionTime returns the ActionTime field value if set, zero value otherwise.
func (o *ForumAdminHistoryModelV1) GetActionTime() TimeV1 {
	if o == nil || IsNil(o.ActionTime) {
		var ret TimeV1
		return ret
	}
	return *o.ActionTime
}

// GetActionTimeOk returns a tuple with the ActionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumAdminHistoryModelV1) GetActionTimeOk() (*TimeV1, bool) {
	if o == nil || IsNil(o.ActionTime) {
		return nil, false
	}
	return o.ActionTime, true
}

// HasActionTime returns a boolean if a field has been set.
func (o *ForumAdminHistoryModelV1) HasActionTime() bool {
	if o != nil && !IsNil(o.ActionTime) {
		return true
	}

	return false
}

// SetActionTime gets a reference to the given TimeV1 and assigns it to the ActionTime field.
func (o *ForumAdminHistoryModelV1) SetActionTime(v TimeV1) {
	o.ActionTime = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *ForumAdminHistoryModelV1) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumAdminHistoryModelV1) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *ForumAdminHistoryModelV1) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *ForumAdminHistoryModelV1) SetAction(v string) {
	o.Action = &v
}

func (o ForumAdminHistoryModelV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForumAdminHistoryModelV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.ActionTime) {
		toSerialize["action_time"] = o.ActionTime
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	return toSerialize, nil
}

type NullableForumAdminHistoryModelV1 struct {
	value *ForumAdminHistoryModelV1
	isSet bool
}

func (v NullableForumAdminHistoryModelV1) Get() *ForumAdminHistoryModelV1 {
	return v.value
}

func (v *NullableForumAdminHistoryModelV1) Set(val *ForumAdminHistoryModelV1) {
	v.value = val
	v.isSet = true
}

func (v NullableForumAdminHistoryModelV1) IsSet() bool {
	return v.isSet
}

func (v *NullableForumAdminHistoryModelV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForumAdminHistoryModelV1(val *ForumAdminHistoryModelV1) *NullableForumAdminHistoryModelV1 {
	return &NullableForumAdminHistoryModelV1{value: val, isSet: true}
}

func (v NullableForumAdminHistoryModelV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForumAdminHistoryModelV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


