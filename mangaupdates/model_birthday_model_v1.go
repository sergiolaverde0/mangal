/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BirthdayModelV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BirthdayModelV1{}

// BirthdayModelV1 struct for BirthdayModelV1
type BirthdayModelV1 struct {
	Month    *int64  `json:"month,omitempty"`
	Day      *int64  `json:"day,omitempty"`
	Year     *int64  `json:"year,omitempty"`
	AsString *string `json:"as_string,omitempty"`
	Zodiac   *string `json:"zodiac,omitempty"`
}

// NewBirthdayModelV1 instantiates a new BirthdayModelV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBirthdayModelV1() *BirthdayModelV1 {
	this := BirthdayModelV1{}
	return &this
}

// NewBirthdayModelV1WithDefaults instantiates a new BirthdayModelV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBirthdayModelV1WithDefaults() *BirthdayModelV1 {
	this := BirthdayModelV1{}
	return &this
}

// GetMonth returns the Month field value if set, zero value otherwise.
func (o *BirthdayModelV1) GetMonth() int64 {
	if o == nil || IsNil(o.Month) {
		var ret int64
		return ret
	}
	return *o.Month
}

// GetMonthOk returns a tuple with the Month field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BirthdayModelV1) GetMonthOk() (*int64, bool) {
	if o == nil || IsNil(o.Month) {
		return nil, false
	}
	return o.Month, true
}

// HasMonth returns a boolean if a field has been set.
func (o *BirthdayModelV1) HasMonth() bool {
	if o != nil && !IsNil(o.Month) {
		return true
	}

	return false
}

// SetMonth gets a reference to the given int64 and assigns it to the Month field.
func (o *BirthdayModelV1) SetMonth(v int64) {
	o.Month = &v
}

// GetDay returns the Day field value if set, zero value otherwise.
func (o *BirthdayModelV1) GetDay() int64 {
	if o == nil || IsNil(o.Day) {
		var ret int64
		return ret
	}
	return *o.Day
}

// GetDayOk returns a tuple with the Day field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BirthdayModelV1) GetDayOk() (*int64, bool) {
	if o == nil || IsNil(o.Day) {
		return nil, false
	}
	return o.Day, true
}

// HasDay returns a boolean if a field has been set.
func (o *BirthdayModelV1) HasDay() bool {
	if o != nil && !IsNil(o.Day) {
		return true
	}

	return false
}

// SetDay gets a reference to the given int64 and assigns it to the Day field.
func (o *BirthdayModelV1) SetDay(v int64) {
	o.Day = &v
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *BirthdayModelV1) GetYear() int64 {
	if o == nil || IsNil(o.Year) {
		var ret int64
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BirthdayModelV1) GetYearOk() (*int64, bool) {
	if o == nil || IsNil(o.Year) {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *BirthdayModelV1) HasYear() bool {
	if o != nil && !IsNil(o.Year) {
		return true
	}

	return false
}

// SetYear gets a reference to the given int64 and assigns it to the Year field.
func (o *BirthdayModelV1) SetYear(v int64) {
	o.Year = &v
}

// GetAsString returns the AsString field value if set, zero value otherwise.
func (o *BirthdayModelV1) GetAsString() string {
	if o == nil || IsNil(o.AsString) {
		var ret string
		return ret
	}
	return *o.AsString
}

// GetAsStringOk returns a tuple with the AsString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BirthdayModelV1) GetAsStringOk() (*string, bool) {
	if o == nil || IsNil(o.AsString) {
		return nil, false
	}
	return o.AsString, true
}

// HasAsString returns a boolean if a field has been set.
func (o *BirthdayModelV1) HasAsString() bool {
	if o != nil && !IsNil(o.AsString) {
		return true
	}

	return false
}

// SetAsString gets a reference to the given string and assigns it to the AsString field.
func (o *BirthdayModelV1) SetAsString(v string) {
	o.AsString = &v
}

// GetZodiac returns the Zodiac field value if set, zero value otherwise.
func (o *BirthdayModelV1) GetZodiac() string {
	if o == nil || IsNil(o.Zodiac) {
		var ret string
		return ret
	}
	return *o.Zodiac
}

// GetZodiacOk returns a tuple with the Zodiac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BirthdayModelV1) GetZodiacOk() (*string, bool) {
	if o == nil || IsNil(o.Zodiac) {
		return nil, false
	}
	return o.Zodiac, true
}

// HasZodiac returns a boolean if a field has been set.
func (o *BirthdayModelV1) HasZodiac() bool {
	if o != nil && !IsNil(o.Zodiac) {
		return true
	}

	return false
}

// SetZodiac gets a reference to the given string and assigns it to the Zodiac field.
func (o *BirthdayModelV1) SetZodiac(v string) {
	o.Zodiac = &v
}

func (o BirthdayModelV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BirthdayModelV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Month) {
		toSerialize["month"] = o.Month
	}
	if !IsNil(o.Day) {
		toSerialize["day"] = o.Day
	}
	if !IsNil(o.Year) {
		toSerialize["year"] = o.Year
	}
	if !IsNil(o.AsString) {
		toSerialize["as_string"] = o.AsString
	}
	if !IsNil(o.Zodiac) {
		toSerialize["zodiac"] = o.Zodiac
	}
	return toSerialize, nil
}

type NullableBirthdayModelV1 struct {
	value *BirthdayModelV1
	isSet bool
}

func (v NullableBirthdayModelV1) Get() *BirthdayModelV1 {
	return v.value
}

func (v *NullableBirthdayModelV1) Set(val *BirthdayModelV1) {
	v.value = val
	v.isSet = true
}

func (v NullableBirthdayModelV1) IsSet() bool {
	return v.isSet
}

func (v *NullableBirthdayModelV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBirthdayModelV1(val *BirthdayModelV1) *NullableBirthdayModelV1 {
	return &NullableBirthdayModelV1{value: val, isSet: true}
}

func (v NullableBirthdayModelV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBirthdayModelV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
