/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ForumPostModelV1ReplyTo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForumPostModelV1ReplyTo{}

// ForumPostModelV1ReplyTo struct for ForumPostModelV1ReplyTo
type ForumPostModelV1ReplyTo struct {
	PostId     *int64                             `json:"post_id,omitempty"`
	PostAuthor *ForumPostModelV1ReplyToPostAuthor `json:"post_author,omitempty"`
}

// NewForumPostModelV1ReplyTo instantiates a new ForumPostModelV1ReplyTo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForumPostModelV1ReplyTo() *ForumPostModelV1ReplyTo {
	this := ForumPostModelV1ReplyTo{}
	return &this
}

// NewForumPostModelV1ReplyToWithDefaults instantiates a new ForumPostModelV1ReplyTo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForumPostModelV1ReplyToWithDefaults() *ForumPostModelV1ReplyTo {
	this := ForumPostModelV1ReplyTo{}
	return &this
}

// GetPostId returns the PostId field value if set, zero value otherwise.
func (o *ForumPostModelV1ReplyTo) GetPostId() int64 {
	if o == nil || IsNil(o.PostId) {
		var ret int64
		return ret
	}
	return *o.PostId
}

// GetPostIdOk returns a tuple with the PostId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumPostModelV1ReplyTo) GetPostIdOk() (*int64, bool) {
	if o == nil || IsNil(o.PostId) {
		return nil, false
	}
	return o.PostId, true
}

// HasPostId returns a boolean if a field has been set.
func (o *ForumPostModelV1ReplyTo) HasPostId() bool {
	if o != nil && !IsNil(o.PostId) {
		return true
	}

	return false
}

// SetPostId gets a reference to the given int64 and assigns it to the PostId field.
func (o *ForumPostModelV1ReplyTo) SetPostId(v int64) {
	o.PostId = &v
}

// GetPostAuthor returns the PostAuthor field value if set, zero value otherwise.
func (o *ForumPostModelV1ReplyTo) GetPostAuthor() ForumPostModelV1ReplyToPostAuthor {
	if o == nil || IsNil(o.PostAuthor) {
		var ret ForumPostModelV1ReplyToPostAuthor
		return ret
	}
	return *o.PostAuthor
}

// GetPostAuthorOk returns a tuple with the PostAuthor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumPostModelV1ReplyTo) GetPostAuthorOk() (*ForumPostModelV1ReplyToPostAuthor, bool) {
	if o == nil || IsNil(o.PostAuthor) {
		return nil, false
	}
	return o.PostAuthor, true
}

// HasPostAuthor returns a boolean if a field has been set.
func (o *ForumPostModelV1ReplyTo) HasPostAuthor() bool {
	if o != nil && !IsNil(o.PostAuthor) {
		return true
	}

	return false
}

// SetPostAuthor gets a reference to the given ForumPostModelV1ReplyToPostAuthor and assigns it to the PostAuthor field.
func (o *ForumPostModelV1ReplyTo) SetPostAuthor(v ForumPostModelV1ReplyToPostAuthor) {
	o.PostAuthor = &v
}

func (o ForumPostModelV1ReplyTo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForumPostModelV1ReplyTo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PostId) {
		toSerialize["post_id"] = o.PostId
	}
	if !IsNil(o.PostAuthor) {
		toSerialize["post_author"] = o.PostAuthor
	}
	return toSerialize, nil
}

type NullableForumPostModelV1ReplyTo struct {
	value *ForumPostModelV1ReplyTo
	isSet bool
}

func (v NullableForumPostModelV1ReplyTo) Get() *ForumPostModelV1ReplyTo {
	return v.value
}

func (v *NullableForumPostModelV1ReplyTo) Set(val *ForumPostModelV1ReplyTo) {
	v.value = val
	v.isSet = true
}

func (v NullableForumPostModelV1ReplyTo) IsSet() bool {
	return v.isSet
}

func (v *NullableForumPostModelV1ReplyTo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForumPostModelV1ReplyTo(val *ForumPostModelV1ReplyTo) *NullableForumPostModelV1ReplyTo {
	return &NullableForumPostModelV1ReplyTo{value: val, isSet: true}
}

func (v NullableForumPostModelV1ReplyTo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForumPostModelV1ReplyTo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
