/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReviewModelUpdateV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReviewModelUpdateV1{}

// ReviewModelUpdateV1 struct for ReviewModelUpdateV1
type ReviewModelUpdateV1 struct {
	Title *string `json:"title,omitempty"`
	Body *string `json:"body,omitempty"`
	SeriesTitle *string `json:"series_title,omitempty"`
	Review *ReviewModelUpdateV1Review `json:"review,omitempty"`
	Admin *ReviewModelUpdateV1Admin `json:"admin,omitempty"`
}

// NewReviewModelUpdateV1 instantiates a new ReviewModelUpdateV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReviewModelUpdateV1() *ReviewModelUpdateV1 {
	this := ReviewModelUpdateV1{}
	return &this
}

// NewReviewModelUpdateV1WithDefaults instantiates a new ReviewModelUpdateV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReviewModelUpdateV1WithDefaults() *ReviewModelUpdateV1 {
	this := ReviewModelUpdateV1{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ReviewModelUpdateV1) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewModelUpdateV1) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ReviewModelUpdateV1) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ReviewModelUpdateV1) SetTitle(v string) {
	o.Title = &v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *ReviewModelUpdateV1) GetBody() string {
	if o == nil || IsNil(o.Body) {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewModelUpdateV1) GetBodyOk() (*string, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *ReviewModelUpdateV1) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *ReviewModelUpdateV1) SetBody(v string) {
	o.Body = &v
}

// GetSeriesTitle returns the SeriesTitle field value if set, zero value otherwise.
func (o *ReviewModelUpdateV1) GetSeriesTitle() string {
	if o == nil || IsNil(o.SeriesTitle) {
		var ret string
		return ret
	}
	return *o.SeriesTitle
}

// GetSeriesTitleOk returns a tuple with the SeriesTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewModelUpdateV1) GetSeriesTitleOk() (*string, bool) {
	if o == nil || IsNil(o.SeriesTitle) {
		return nil, false
	}
	return o.SeriesTitle, true
}

// HasSeriesTitle returns a boolean if a field has been set.
func (o *ReviewModelUpdateV1) HasSeriesTitle() bool {
	if o != nil && !IsNil(o.SeriesTitle) {
		return true
	}

	return false
}

// SetSeriesTitle gets a reference to the given string and assigns it to the SeriesTitle field.
func (o *ReviewModelUpdateV1) SetSeriesTitle(v string) {
	o.SeriesTitle = &v
}

// GetReview returns the Review field value if set, zero value otherwise.
func (o *ReviewModelUpdateV1) GetReview() ReviewModelUpdateV1Review {
	if o == nil || IsNil(o.Review) {
		var ret ReviewModelUpdateV1Review
		return ret
	}
	return *o.Review
}

// GetReviewOk returns a tuple with the Review field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewModelUpdateV1) GetReviewOk() (*ReviewModelUpdateV1Review, bool) {
	if o == nil || IsNil(o.Review) {
		return nil, false
	}
	return o.Review, true
}

// HasReview returns a boolean if a field has been set.
func (o *ReviewModelUpdateV1) HasReview() bool {
	if o != nil && !IsNil(o.Review) {
		return true
	}

	return false
}

// SetReview gets a reference to the given ReviewModelUpdateV1Review and assigns it to the Review field.
func (o *ReviewModelUpdateV1) SetReview(v ReviewModelUpdateV1Review) {
	o.Review = &v
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *ReviewModelUpdateV1) GetAdmin() ReviewModelUpdateV1Admin {
	if o == nil || IsNil(o.Admin) {
		var ret ReviewModelUpdateV1Admin
		return ret
	}
	return *o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewModelUpdateV1) GetAdminOk() (*ReviewModelUpdateV1Admin, bool) {
	if o == nil || IsNil(o.Admin) {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *ReviewModelUpdateV1) HasAdmin() bool {
	if o != nil && !IsNil(o.Admin) {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given ReviewModelUpdateV1Admin and assigns it to the Admin field.
func (o *ReviewModelUpdateV1) SetAdmin(v ReviewModelUpdateV1Admin) {
	o.Admin = &v
}

func (o ReviewModelUpdateV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReviewModelUpdateV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	if !IsNil(o.SeriesTitle) {
		toSerialize["series_title"] = o.SeriesTitle
	}
	if !IsNil(o.Review) {
		toSerialize["review"] = o.Review
	}
	if !IsNil(o.Admin) {
		toSerialize["admin"] = o.Admin
	}
	return toSerialize, nil
}

type NullableReviewModelUpdateV1 struct {
	value *ReviewModelUpdateV1
	isSet bool
}

func (v NullableReviewModelUpdateV1) Get() *ReviewModelUpdateV1 {
	return v.value
}

func (v *NullableReviewModelUpdateV1) Set(val *ReviewModelUpdateV1) {
	v.value = val
	v.isSet = true
}

func (v NullableReviewModelUpdateV1) IsSet() bool {
	return v.isSet
}

func (v *NullableReviewModelUpdateV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReviewModelUpdateV1(val *ReviewModelUpdateV1) *NullableReviewModelUpdateV1 {
	return &NullableReviewModelUpdateV1{value: val, isSet: true}
}

func (v NullableReviewModelUpdateV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReviewModelUpdateV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


