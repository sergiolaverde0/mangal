/*
MangaUpdates API

Testing MembersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/belphemur/mangal/mangaupdates"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_MembersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MembersAPIService AddMember", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MembersAPI.AddMember(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService AddMemberAvatar", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.MembersAPI.AddMemberAvatar(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService AddMemberChangeRequest", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.MembersAPI.AddMemberChangeRequest(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService AddMemberGenreFilter", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64
		var genreId int64

		resp, httpRes, err := apiClient.MembersAPI.AddMemberGenreFilter(context.Background(), id, genreId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService AddMemberGenreHighlight", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64
		var genreId int64

		resp, httpRes, err := apiClient.MembersAPI.AddMemberGenreHighlight(context.Background(), id, genreId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService AddOrUpdateUserGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.MembersAPI.AddOrUpdateUserGroup(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService AddUserGroupFilter", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64
		var groupId int64

		resp, httpRes, err := apiClient.MembersAPI.AddUserGroupFilter(context.Background(), id, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService AddUserTopicSubscription", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64
		var topicId int64

		resp, httpRes, err := apiClient.MembersAPI.AddUserTopicSubscription(context.Background(), id, topicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService ApproveMemberUpgrade", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.MembersAPI.ApproveMemberUpgrade(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService DeleteMember", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.MembersAPI.DeleteMember(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService DeleteMemberAvatar", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64
		var avatarId int64

		resp, httpRes, err := apiClient.MembersAPI.DeleteMemberAvatar(context.Background(), id, avatarId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService DeleteMemberChangeRequest", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64
		var requestId int64

		resp, httpRes, err := apiClient.MembersAPI.DeleteMemberChangeRequest(context.Background(), id, requestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService DeleteUserGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.MembersAPI.DeleteUserGroup(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService RejectMemberUpgrade", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.MembersAPI.RejectMemberUpgrade(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService RemoveMemberGenreFilter", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64
		var genreId int64

		resp, httpRes, err := apiClient.MembersAPI.RemoveMemberGenreFilter(context.Background(), id, genreId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService RemoveMemberGenreHighlight", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64
		var genreId int64

		resp, httpRes, err := apiClient.MembersAPI.RemoveMemberGenreHighlight(context.Background(), id, genreId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService RemoveUserGroupFilter", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64
		var groupId int64

		resp, httpRes, err := apiClient.MembersAPI.RemoveUserGroupFilter(context.Background(), id, groupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService RemoveUserTopicSubscription", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64
		var topicId int64

		resp, httpRes, err := apiClient.MembersAPI.RemoveUserTopicSubscription(context.Background(), id, topicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService ResetGenreSettings", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.MembersAPI.ResetGenreSettings(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService RetrieveMember", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.MembersAPI.RetrieveMember(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService RetrieveMemberAvatars", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.MembersAPI.RetrieveMemberAvatars(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService RetrieveMemberChangeRequest", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64
		var requestId int64

		resp, httpRes, err := apiClient.MembersAPI.RetrieveMemberChangeRequest(context.Background(), id, requestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService RetrieveMemberGenreFilters", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.MembersAPI.RetrieveMemberGenreFilters(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService RetrieveMemberGenreHighlights", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.MembersAPI.RetrieveMemberGenreHighlights(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService RetrieveMemberGroupFilters", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.MembersAPI.RetrieveMemberGroupFilters(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService RetrieveMemberTopicSubscription", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64
		var topicId int64

		resp, httpRes, err := apiClient.MembersAPI.RetrieveMemberTopicSubscription(context.Background(), id, topicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService RetrieveMemberTopicSubscriptions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.MembersAPI.RetrieveMemberTopicSubscriptions(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService RetrieveUserGroupById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.MembersAPI.RetrieveUserGroupById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService RetrieveUserGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MembersAPI.RetrieveUserGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService SearchMemberChangeRequests", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.MembersAPI.SearchMemberChangeRequests(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService SearchMembersPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MembersAPI.SearchMembersPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService UpdateMember", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.MembersAPI.UpdateMember(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MembersAPIService UpdateMemberChangeRequest", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64
		var requestId int64

		resp, httpRes, err := apiClient.MembersAPI.UpdateMemberChangeRequest(context.Background(), id, requestId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
