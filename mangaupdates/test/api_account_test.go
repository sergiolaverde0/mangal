/*
MangaUpdates API

Testing AccountAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/belphemur/mangal/mangaupdates"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_AccountAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AccountAPIService Captcha", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AccountAPI.Captcha(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountAPIService ConfirmAndChangePassword", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var authHash string

		resp, httpRes, err := apiClient.AccountAPI.ConfirmAndChangePassword(context.Background(), authHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountAPIService ConfirmDeleteAccount", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var authHash string

		resp, httpRes, err := apiClient.AccountAPI.ConfirmDeleteAccount(context.Background(), authHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountAPIService ConfirmRegistration", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var authHash string

		resp, httpRes, err := apiClient.AccountAPI.ConfirmRegistration(context.Background(), authHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountAPIService DeleteAccount", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var captchaResponse string

		resp, httpRes, err := apiClient.AccountAPI.DeleteAccount(context.Background(), captchaResponse).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountAPIService ForgotPassword", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var captchaResponse string

		resp, httpRes, err := apiClient.AccountAPI.ForgotPassword(context.Background(), captchaResponse).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountAPIService Login", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AccountAPI.Login(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountAPIService Logout", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AccountAPI.Logout(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountAPIService Profile", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AccountAPI.Profile(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountAPIService RegisterMember", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var captchaResponse string

		resp, httpRes, err := apiClient.AccountAPI.RegisterMember(context.Background(), captchaResponse).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountAPIService ResendAuthEmail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.AccountAPI.ResendAuthEmail(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountAPIService SendForgotEmail", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.AccountAPI.SendForgotEmail(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
