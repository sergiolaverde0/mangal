/*
MangaUpdates API

Testing SeriesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/belphemur/mangal/mangaupdates"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_SeriesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SeriesAPIService AddSeries", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SeriesAPI.AddSeries(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService AddSeriesCategoryVote", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.SeriesAPI.AddSeriesCategoryVote(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService AddSeriesComment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.SeriesAPI.AddSeriesComment(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService AddSeriesCommentUsefulFlag", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64
		var commentId int64

		resp, httpRes, err := apiClient.SeriesAPI.AddSeriesCommentUsefulFlag(context.Background(), id, commentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService CombineSeriesCategories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.SeriesAPI.CombineSeriesCategories(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService DeleteSeries", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.SeriesAPI.DeleteSeries(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService DeleteSeriesCategory", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.SeriesAPI.DeleteSeriesCategory(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService DeleteSeriesComment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64
		var commentId int64

		resp, httpRes, err := apiClient.SeriesAPI.DeleteSeriesComment(context.Background(), id, commentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService DeleteSeriesImage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.SeriesAPI.DeleteSeriesImage(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService DeleteUserSeriesRating", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.SeriesAPI.DeleteUserSeriesRating(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService LockSeriesField", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64
		var item string

		resp, httpRes, err := apiClient.SeriesAPI.LockSeriesField(context.Background(), id, item).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService RemoveSeriesCategoryVote", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.SeriesAPI.RemoveSeriesCategoryVote(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService RemoveSeriesCommentUsefulFlag", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64
		var commentId int64

		resp, httpRes, err := apiClient.SeriesAPI.RemoveSeriesCommentUsefulFlag(context.Background(), id, commentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService RenameSeriesCategory", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.SeriesAPI.RenameSeriesCategory(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService ReportSeriesComment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64
		var commentId int64

		resp, httpRes, err := apiClient.SeriesAPI.ReportSeriesComment(context.Background(), id, commentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService RetrieveMySeriesComment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.SeriesAPI.RetrieveMySeriesComment(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService RetrieveSeries", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.SeriesAPI.RetrieveSeries(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService RetrieveSeriesCategoryVotes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.SeriesAPI.RetrieveSeriesCategoryVotes(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService RetrieveSeriesComment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64
		var commentId int64

		resp, httpRes, err := apiClient.SeriesAPI.RetrieveSeriesComment(context.Background(), id, commentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService RetrieveSeriesCommentLocation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64
		var commentId int64

		resp, httpRes, err := apiClient.SeriesAPI.RetrieveSeriesCommentLocation(context.Background(), id, commentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService RetrieveSeriesGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.SeriesAPI.RetrieveSeriesGroups(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService RetrieveSeriesLocks", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.SeriesAPI.RetrieveSeriesLocks(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService RetrieveSeriesRankLocation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64
		var type_ string

		resp, httpRes, err := apiClient.SeriesAPI.RetrieveSeriesRankLocation(context.Background(), id, type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService RetrieveSeriesRatingRainbow", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.SeriesAPI.RetrieveSeriesRatingRainbow(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService RetrieveUserSeriesRating", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.SeriesAPI.RetrieveUserSeriesRating(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService SearchSeriesCommentsPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.SeriesAPI.SearchSeriesCommentsPost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService SearchSeriesHistoryPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.SeriesAPI.SearchSeriesHistoryPost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService SearchSeriesPost", func(t *testing.T) {

		resp, httpRes, err := apiClient.SeriesAPI.SearchSeriesPost(context.Background()).SeriesSearchRequestV1(openapiclient.SeriesSearchRequestV1{
			Search: openapiclient.PtrString("Naruto"),
		}).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService SeriesCommentsModerationPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SeriesAPI.SeriesCommentsModerationPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService SeriesReleaseRssFeed", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.SeriesAPI.SeriesReleaseRssFeed(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService UnlockSeriesField", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64
		var item string

		resp, httpRes, err := apiClient.SeriesAPI.UnlockSeriesField(context.Background(), id, item).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService UpdateSeries", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.SeriesAPI.UpdateSeries(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService UpdateSeriesComment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64
		var commentId int64

		resp, httpRes, err := apiClient.SeriesAPI.UpdateSeriesComment(context.Background(), id, commentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService UpdateSeriesImage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.SeriesAPI.UpdateSeriesImage(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SeriesAPIService UpdateUserSeriesRating", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id int64

		resp, httpRes, err := apiClient.SeriesAPI.UpdateUserSeriesRating(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
