/*
MangaUpdates API

Testing ForumAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/belphemur/mangal/mangaupdates"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_ForumAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ForumAPIService AddForumAdmin", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var forumId int64
		var userId int64

		resp, httpRes, err := apiClient.ForumAPI.AddForumAdmin(context.Background(), forumId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService AddPollVote", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var forumId int64
		var topicId int64
		var choiceId int64

		resp, httpRes, err := apiClient.ForumAPI.AddPollVote(context.Background(), forumId, topicId, choiceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService AddPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var forumId int64
		var topicId int64

		resp, httpRes, err := apiClient.ForumAPI.AddPost(context.Background(), forumId, topicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService AddTemporaryPollImage", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ForumAPI.AddTemporaryPollImage(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService AddTopic", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var forumId int64

		resp, httpRes, err := apiClient.ForumAPI.AddTopic(context.Background(), forumId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService DeletePost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var forumId int64
		var topicId int64
		var postId int64

		resp, httpRes, err := apiClient.ForumAPI.DeletePost(context.Background(), forumId, topicId, postId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService DeletePostReport", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var forumId int64
		var topicId int64
		var postId int64

		resp, httpRes, err := apiClient.ForumAPI.DeletePostReport(context.Background(), forumId, topicId, postId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService DeleteTopic", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var forumId int64
		var topicId int64

		resp, httpRes, err := apiClient.ForumAPI.DeleteTopic(context.Background(), forumId, topicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService GetCurrentWarnForUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId int64

		resp, httpRes, err := apiClient.ForumAPI.GetCurrentWarnForUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService ListCategories", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ForumAPI.ListCategories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService ListGlobalTopics", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ForumAPI.ListGlobalTopics(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService ListPopularForums", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ForumAPI.ListPopularForums(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService ListPosts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var forumId int64
		var topicId int64

		resp, httpRes, err := apiClient.ForumAPI.ListPosts(context.Background(), forumId, topicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService ListPostsByMe", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var forumId int64
		var topicId int64

		resp, httpRes, err := apiClient.ForumAPI.ListPostsByMe(context.Background(), forumId, topicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService ListReportedPosts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ForumAPI.ListReportedPosts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService ListTopics", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var forumId int64

		resp, httpRes, err := apiClient.ForumAPI.ListTopics(context.Background(), forumId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService ListWarnHistoryForUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId int64

		resp, httpRes, err := apiClient.ForumAPI.ListWarnHistoryForUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService LookupPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var postId int64

		resp, httpRes, err := apiClient.ForumAPI.LookupPost(context.Background(), postId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService LookupSeries", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var seriesId int64

		resp, httpRes, err := apiClient.ForumAPI.LookupSeries(context.Background(), seriesId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService LookupTopic", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var topicId int64

		resp, httpRes, err := apiClient.ForumAPI.LookupTopic(context.Background(), topicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService RemoveForumAdmin", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var forumId int64
		var userId int64

		resp, httpRes, err := apiClient.ForumAPI.RemoveForumAdmin(context.Background(), forumId, userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService ReportPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var forumId int64
		var topicId int64
		var postId int64

		resp, httpRes, err := apiClient.ForumAPI.ReportPost(context.Background(), forumId, topicId, postId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService RetrieveForum", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var forumId int64

		resp, httpRes, err := apiClient.ForumAPI.RetrieveForum(context.Background(), forumId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService RetrievePost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var forumId int64
		var topicId int64
		var postId int64

		resp, httpRes, err := apiClient.ForumAPI.RetrievePost(context.Background(), forumId, topicId, postId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService RetrievePostLocation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var forumId int64
		var topicId int64
		var postId int64

		resp, httpRes, err := apiClient.ForumAPI.RetrievePostLocation(context.Background(), forumId, topicId, postId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService RetrieveTemporaryPollImages", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ForumAPI.RetrieveTemporaryPollImages(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService RetrieveTopic", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var forumId int64
		var topicId int64

		resp, httpRes, err := apiClient.ForumAPI.RetrieveTopic(context.Background(), forumId, topicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService RetrieveVote", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var forumId int64
		var topicId int64

		resp, httpRes, err := apiClient.ForumAPI.RetrieveVote(context.Background(), forumId, topicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService SearchForumPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ForumAPI.SearchForumPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService SearchSpecificForumPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var forumId int64

		resp, httpRes, err := apiClient.ForumAPI.SearchSpecificForumPost(context.Background(), forumId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService SearchSpecificTopicPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var forumId int64
		var topicId int64

		resp, httpRes, err := apiClient.ForumAPI.SearchSpecificTopicPost(context.Background(), forumId, topicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService ShowLogPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ForumAPI.ShowLogPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService UpdatePost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var forumId int64
		var topicId int64
		var postId int64

		resp, httpRes, err := apiClient.ForumAPI.UpdatePost(context.Background(), forumId, topicId, postId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService UpdateTopic", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var forumId int64
		var topicId int64

		resp, httpRes, err := apiClient.ForumAPI.UpdateTopic(context.Background(), forumId, topicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService UpdateTopicPoll", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var forumId int64
		var topicId int64

		resp, httpRes, err := apiClient.ForumAPI.UpdateTopicPoll(context.Background(), forumId, topicId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ForumAPIService UpdateUserWarnLevel", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId int64

		resp, httpRes, err := apiClient.ForumAPI.UpdateUserWarnLevel(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
