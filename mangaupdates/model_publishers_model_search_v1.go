/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PublishersModelSearchV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublishersModelSearchV1{}

// PublishersModelSearchV1 struct for PublishersModelSearchV1
type PublishersModelSearchV1 struct {
	PublisherId *int64                        `json:"publisher_id,omitempty"`
	Name        *string                       `json:"name,omitempty"`
	Url         *string                       `json:"url,omitempty"`
	Type        *string                       `json:"type,omitempty"`
	Stats       *PublishersModelSearchV1Stats `json:"stats,omitempty"`
	AddedBy     *UserModelSearchV1            `json:"added_by,omitempty"`
}

// NewPublishersModelSearchV1 instantiates a new PublishersModelSearchV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublishersModelSearchV1() *PublishersModelSearchV1 {
	this := PublishersModelSearchV1{}
	return &this
}

// NewPublishersModelSearchV1WithDefaults instantiates a new PublishersModelSearchV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublishersModelSearchV1WithDefaults() *PublishersModelSearchV1 {
	this := PublishersModelSearchV1{}
	return &this
}

// GetPublisherId returns the PublisherId field value if set, zero value otherwise.
func (o *PublishersModelSearchV1) GetPublisherId() int64 {
	if o == nil || IsNil(o.PublisherId) {
		var ret int64
		return ret
	}
	return *o.PublisherId
}

// GetPublisherIdOk returns a tuple with the PublisherId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishersModelSearchV1) GetPublisherIdOk() (*int64, bool) {
	if o == nil || IsNil(o.PublisherId) {
		return nil, false
	}
	return o.PublisherId, true
}

// HasPublisherId returns a boolean if a field has been set.
func (o *PublishersModelSearchV1) HasPublisherId() bool {
	if o != nil && !IsNil(o.PublisherId) {
		return true
	}

	return false
}

// SetPublisherId gets a reference to the given int64 and assigns it to the PublisherId field.
func (o *PublishersModelSearchV1) SetPublisherId(v int64) {
	o.PublisherId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PublishersModelSearchV1) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishersModelSearchV1) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PublishersModelSearchV1) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PublishersModelSearchV1) SetName(v string) {
	o.Name = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *PublishersModelSearchV1) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishersModelSearchV1) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *PublishersModelSearchV1) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *PublishersModelSearchV1) SetUrl(v string) {
	o.Url = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PublishersModelSearchV1) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishersModelSearchV1) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PublishersModelSearchV1) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PublishersModelSearchV1) SetType(v string) {
	o.Type = &v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *PublishersModelSearchV1) GetStats() PublishersModelSearchV1Stats {
	if o == nil || IsNil(o.Stats) {
		var ret PublishersModelSearchV1Stats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishersModelSearchV1) GetStatsOk() (*PublishersModelSearchV1Stats, bool) {
	if o == nil || IsNil(o.Stats) {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *PublishersModelSearchV1) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given PublishersModelSearchV1Stats and assigns it to the Stats field.
func (o *PublishersModelSearchV1) SetStats(v PublishersModelSearchV1Stats) {
	o.Stats = &v
}

// GetAddedBy returns the AddedBy field value if set, zero value otherwise.
func (o *PublishersModelSearchV1) GetAddedBy() UserModelSearchV1 {
	if o == nil || IsNil(o.AddedBy) {
		var ret UserModelSearchV1
		return ret
	}
	return *o.AddedBy
}

// GetAddedByOk returns a tuple with the AddedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishersModelSearchV1) GetAddedByOk() (*UserModelSearchV1, bool) {
	if o == nil || IsNil(o.AddedBy) {
		return nil, false
	}
	return o.AddedBy, true
}

// HasAddedBy returns a boolean if a field has been set.
func (o *PublishersModelSearchV1) HasAddedBy() bool {
	if o != nil && !IsNil(o.AddedBy) {
		return true
	}

	return false
}

// SetAddedBy gets a reference to the given UserModelSearchV1 and assigns it to the AddedBy field.
func (o *PublishersModelSearchV1) SetAddedBy(v UserModelSearchV1) {
	o.AddedBy = &v
}

func (o PublishersModelSearchV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublishersModelSearchV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PublisherId) {
		toSerialize["publisher_id"] = o.PublisherId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Stats) {
		toSerialize["stats"] = o.Stats
	}
	if !IsNil(o.AddedBy) {
		toSerialize["added_by"] = o.AddedBy
	}
	return toSerialize, nil
}

type NullablePublishersModelSearchV1 struct {
	value *PublishersModelSearchV1
	isSet bool
}

func (v NullablePublishersModelSearchV1) Get() *PublishersModelSearchV1 {
	return v.value
}

func (v *NullablePublishersModelSearchV1) Set(val *PublishersModelSearchV1) {
	v.value = val
	v.isSet = true
}

func (v NullablePublishersModelSearchV1) IsSet() bool {
	return v.isSet
}

func (v *NullablePublishersModelSearchV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublishersModelSearchV1(val *PublishersModelSearchV1) *NullablePublishersModelSearchV1 {
	return &NullablePublishersModelSearchV1{value: val, isSet: true}
}

func (v NullablePublishersModelSearchV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublishersModelSearchV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
