/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ForumTopicModelAddV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForumTopicModelAddV1{}

// ForumTopicModelAddV1 struct for ForumTopicModelAddV1
type ForumTopicModelAddV1 struct {
	Topic *ForumTopicModelUpdateV1 `json:"topic,omitempty"`
	Post *ForumPostModelUpdateV1 `json:"post,omitempty"`
	Poll *ForumPollModelUpdateV1 `json:"poll,omitempty"`
}

// NewForumTopicModelAddV1 instantiates a new ForumTopicModelAddV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForumTopicModelAddV1() *ForumTopicModelAddV1 {
	this := ForumTopicModelAddV1{}
	return &this
}

// NewForumTopicModelAddV1WithDefaults instantiates a new ForumTopicModelAddV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForumTopicModelAddV1WithDefaults() *ForumTopicModelAddV1 {
	this := ForumTopicModelAddV1{}
	return &this
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *ForumTopicModelAddV1) GetTopic() ForumTopicModelUpdateV1 {
	if o == nil || IsNil(o.Topic) {
		var ret ForumTopicModelUpdateV1
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumTopicModelAddV1) GetTopicOk() (*ForumTopicModelUpdateV1, bool) {
	if o == nil || IsNil(o.Topic) {
		return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *ForumTopicModelAddV1) HasTopic() bool {
	if o != nil && !IsNil(o.Topic) {
		return true
	}

	return false
}

// SetTopic gets a reference to the given ForumTopicModelUpdateV1 and assigns it to the Topic field.
func (o *ForumTopicModelAddV1) SetTopic(v ForumTopicModelUpdateV1) {
	o.Topic = &v
}

// GetPost returns the Post field value if set, zero value otherwise.
func (o *ForumTopicModelAddV1) GetPost() ForumPostModelUpdateV1 {
	if o == nil || IsNil(o.Post) {
		var ret ForumPostModelUpdateV1
		return ret
	}
	return *o.Post
}

// GetPostOk returns a tuple with the Post field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumTopicModelAddV1) GetPostOk() (*ForumPostModelUpdateV1, bool) {
	if o == nil || IsNil(o.Post) {
		return nil, false
	}
	return o.Post, true
}

// HasPost returns a boolean if a field has been set.
func (o *ForumTopicModelAddV1) HasPost() bool {
	if o != nil && !IsNil(o.Post) {
		return true
	}

	return false
}

// SetPost gets a reference to the given ForumPostModelUpdateV1 and assigns it to the Post field.
func (o *ForumTopicModelAddV1) SetPost(v ForumPostModelUpdateV1) {
	o.Post = &v
}

// GetPoll returns the Poll field value if set, zero value otherwise.
func (o *ForumTopicModelAddV1) GetPoll() ForumPollModelUpdateV1 {
	if o == nil || IsNil(o.Poll) {
		var ret ForumPollModelUpdateV1
		return ret
	}
	return *o.Poll
}

// GetPollOk returns a tuple with the Poll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumTopicModelAddV1) GetPollOk() (*ForumPollModelUpdateV1, bool) {
	if o == nil || IsNil(o.Poll) {
		return nil, false
	}
	return o.Poll, true
}

// HasPoll returns a boolean if a field has been set.
func (o *ForumTopicModelAddV1) HasPoll() bool {
	if o != nil && !IsNil(o.Poll) {
		return true
	}

	return false
}

// SetPoll gets a reference to the given ForumPollModelUpdateV1 and assigns it to the Poll field.
func (o *ForumTopicModelAddV1) SetPoll(v ForumPollModelUpdateV1) {
	o.Poll = &v
}

func (o ForumTopicModelAddV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForumTopicModelAddV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Topic) {
		toSerialize["topic"] = o.Topic
	}
	if !IsNil(o.Post) {
		toSerialize["post"] = o.Post
	}
	if !IsNil(o.Poll) {
		toSerialize["poll"] = o.Poll
	}
	return toSerialize, nil
}

type NullableForumTopicModelAddV1 struct {
	value *ForumTopicModelAddV1
	isSet bool
}

func (v NullableForumTopicModelAddV1) Get() *ForumTopicModelAddV1 {
	return v.value
}

func (v *NullableForumTopicModelAddV1) Set(val *ForumTopicModelAddV1) {
	v.value = val
	v.isSet = true
}

func (v NullableForumTopicModelAddV1) IsSet() bool {
	return v.isSet
}

func (v *NullableForumTopicModelAddV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForumTopicModelAddV1(val *ForumTopicModelAddV1) *NullableForumTopicModelAddV1 {
	return &NullableForumTopicModelAddV1{value: val, isSet: true}
}

func (v NullableForumTopicModelAddV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForumTopicModelAddV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


