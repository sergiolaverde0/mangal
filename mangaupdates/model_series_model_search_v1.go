/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SeriesModelSearchV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SeriesModelSearchV1{}

// SeriesModelSearchV1 struct for SeriesModelSearchV1
type SeriesModelSearchV1 struct {
	SeriesId       *int64                      `json:"series_id,omitempty"`
	Title          *string                     `json:"title,omitempty"`
	Url            *string                     `json:"url,omitempty"`
	Description    *string                     `json:"description,omitempty"`
	Image          *ImageModelV1               `json:"image,omitempty"`
	Type           *string                     `json:"type,omitempty"`
	Year           *string                     `json:"year,omitempty"`
	BayesianRating *float32                    `json:"bayesian_rating,omitempty"`
	RatingVotes    *int64                      `json:"rating_votes,omitempty"`
	Genres         []SeriesModelSearchV1Genres `json:"genres,omitempty"`
	LatestChapter  *int64                      `json:"latest_chapter,omitempty"`
	Rank           *SeriesModelSearchV1Rank    `json:"rank,omitempty"`
	LastUpdated    *TimeV1                     `json:"last_updated,omitempty"`
	Admin          *SeriesModelSearchV1Admin   `json:"admin,omitempty"`
}

// NewSeriesModelSearchV1 instantiates a new SeriesModelSearchV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSeriesModelSearchV1() *SeriesModelSearchV1 {
	this := SeriesModelSearchV1{}
	return &this
}

// NewSeriesModelSearchV1WithDefaults instantiates a new SeriesModelSearchV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSeriesModelSearchV1WithDefaults() *SeriesModelSearchV1 {
	this := SeriesModelSearchV1{}
	return &this
}

// GetSeriesId returns the SeriesId field value if set, zero value otherwise.
func (o *SeriesModelSearchV1) GetSeriesId() int64 {
	if o == nil || IsNil(o.SeriesId) {
		var ret int64
		return ret
	}
	return *o.SeriesId
}

// GetSeriesIdOk returns a tuple with the SeriesId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelSearchV1) GetSeriesIdOk() (*int64, bool) {
	if o == nil || IsNil(o.SeriesId) {
		return nil, false
	}
	return o.SeriesId, true
}

// HasSeriesId returns a boolean if a field has been set.
func (o *SeriesModelSearchV1) HasSeriesId() bool {
	if o != nil && !IsNil(o.SeriesId) {
		return true
	}

	return false
}

// SetSeriesId gets a reference to the given int64 and assigns it to the SeriesId field.
func (o *SeriesModelSearchV1) SetSeriesId(v int64) {
	o.SeriesId = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *SeriesModelSearchV1) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelSearchV1) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *SeriesModelSearchV1) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *SeriesModelSearchV1) SetTitle(v string) {
	o.Title = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *SeriesModelSearchV1) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelSearchV1) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *SeriesModelSearchV1) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *SeriesModelSearchV1) SetUrl(v string) {
	o.Url = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SeriesModelSearchV1) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelSearchV1) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SeriesModelSearchV1) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SeriesModelSearchV1) SetDescription(v string) {
	o.Description = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *SeriesModelSearchV1) GetImage() ImageModelV1 {
	if o == nil || IsNil(o.Image) {
		var ret ImageModelV1
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelSearchV1) GetImageOk() (*ImageModelV1, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *SeriesModelSearchV1) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given ImageModelV1 and assigns it to the Image field.
func (o *SeriesModelSearchV1) SetImage(v ImageModelV1) {
	o.Image = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SeriesModelSearchV1) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelSearchV1) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SeriesModelSearchV1) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SeriesModelSearchV1) SetType(v string) {
	o.Type = &v
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *SeriesModelSearchV1) GetYear() string {
	if o == nil || IsNil(o.Year) {
		var ret string
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelSearchV1) GetYearOk() (*string, bool) {
	if o == nil || IsNil(o.Year) {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *SeriesModelSearchV1) HasYear() bool {
	if o != nil && !IsNil(o.Year) {
		return true
	}

	return false
}

// SetYear gets a reference to the given string and assigns it to the Year field.
func (o *SeriesModelSearchV1) SetYear(v string) {
	o.Year = &v
}

// GetBayesianRating returns the BayesianRating field value if set, zero value otherwise.
func (o *SeriesModelSearchV1) GetBayesianRating() float32 {
	if o == nil || IsNil(o.BayesianRating) {
		var ret float32
		return ret
	}
	return *o.BayesianRating
}

// GetBayesianRatingOk returns a tuple with the BayesianRating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelSearchV1) GetBayesianRatingOk() (*float32, bool) {
	if o == nil || IsNil(o.BayesianRating) {
		return nil, false
	}
	return o.BayesianRating, true
}

// HasBayesianRating returns a boolean if a field has been set.
func (o *SeriesModelSearchV1) HasBayesianRating() bool {
	if o != nil && !IsNil(o.BayesianRating) {
		return true
	}

	return false
}

// SetBayesianRating gets a reference to the given float32 and assigns it to the BayesianRating field.
func (o *SeriesModelSearchV1) SetBayesianRating(v float32) {
	o.BayesianRating = &v
}

// GetRatingVotes returns the RatingVotes field value if set, zero value otherwise.
func (o *SeriesModelSearchV1) GetRatingVotes() int64 {
	if o == nil || IsNil(o.RatingVotes) {
		var ret int64
		return ret
	}
	return *o.RatingVotes
}

// GetRatingVotesOk returns a tuple with the RatingVotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelSearchV1) GetRatingVotesOk() (*int64, bool) {
	if o == nil || IsNil(o.RatingVotes) {
		return nil, false
	}
	return o.RatingVotes, true
}

// HasRatingVotes returns a boolean if a field has been set.
func (o *SeriesModelSearchV1) HasRatingVotes() bool {
	if o != nil && !IsNil(o.RatingVotes) {
		return true
	}

	return false
}

// SetRatingVotes gets a reference to the given int64 and assigns it to the RatingVotes field.
func (o *SeriesModelSearchV1) SetRatingVotes(v int64) {
	o.RatingVotes = &v
}

// GetGenres returns the Genres field value if set, zero value otherwise.
func (o *SeriesModelSearchV1) GetGenres() []SeriesModelSearchV1Genres {
	if o == nil || IsNil(o.Genres) {
		var ret []SeriesModelSearchV1Genres
		return ret
	}
	return o.Genres
}

// GetGenresOk returns a tuple with the Genres field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelSearchV1) GetGenresOk() ([]SeriesModelSearchV1Genres, bool) {
	if o == nil || IsNil(o.Genres) {
		return nil, false
	}
	return o.Genres, true
}

// HasGenres returns a boolean if a field has been set.
func (o *SeriesModelSearchV1) HasGenres() bool {
	if o != nil && !IsNil(o.Genres) {
		return true
	}

	return false
}

// SetGenres gets a reference to the given []SeriesModelSearchV1Genres and assigns it to the Genres field.
func (o *SeriesModelSearchV1) SetGenres(v []SeriesModelSearchV1Genres) {
	o.Genres = v
}

// GetLatestChapter returns the LatestChapter field value if set, zero value otherwise.
func (o *SeriesModelSearchV1) GetLatestChapter() int64 {
	if o == nil || IsNil(o.LatestChapter) {
		var ret int64
		return ret
	}
	return *o.LatestChapter
}

// GetLatestChapterOk returns a tuple with the LatestChapter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelSearchV1) GetLatestChapterOk() (*int64, bool) {
	if o == nil || IsNil(o.LatestChapter) {
		return nil, false
	}
	return o.LatestChapter, true
}

// HasLatestChapter returns a boolean if a field has been set.
func (o *SeriesModelSearchV1) HasLatestChapter() bool {
	if o != nil && !IsNil(o.LatestChapter) {
		return true
	}

	return false
}

// SetLatestChapter gets a reference to the given int64 and assigns it to the LatestChapter field.
func (o *SeriesModelSearchV1) SetLatestChapter(v int64) {
	o.LatestChapter = &v
}

// GetRank returns the Rank field value if set, zero value otherwise.
func (o *SeriesModelSearchV1) GetRank() SeriesModelSearchV1Rank {
	if o == nil || IsNil(o.Rank) {
		var ret SeriesModelSearchV1Rank
		return ret
	}
	return *o.Rank
}

// GetRankOk returns a tuple with the Rank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelSearchV1) GetRankOk() (*SeriesModelSearchV1Rank, bool) {
	if o == nil || IsNil(o.Rank) {
		return nil, false
	}
	return o.Rank, true
}

// HasRank returns a boolean if a field has been set.
func (o *SeriesModelSearchV1) HasRank() bool {
	if o != nil && !IsNil(o.Rank) {
		return true
	}

	return false
}

// SetRank gets a reference to the given SeriesModelSearchV1Rank and assigns it to the Rank field.
func (o *SeriesModelSearchV1) SetRank(v SeriesModelSearchV1Rank) {
	o.Rank = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *SeriesModelSearchV1) GetLastUpdated() TimeV1 {
	if o == nil || IsNil(o.LastUpdated) {
		var ret TimeV1
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelSearchV1) GetLastUpdatedOk() (*TimeV1, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *SeriesModelSearchV1) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given TimeV1 and assigns it to the LastUpdated field.
func (o *SeriesModelSearchV1) SetLastUpdated(v TimeV1) {
	o.LastUpdated = &v
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *SeriesModelSearchV1) GetAdmin() SeriesModelSearchV1Admin {
	if o == nil || IsNil(o.Admin) {
		var ret SeriesModelSearchV1Admin
		return ret
	}
	return *o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelSearchV1) GetAdminOk() (*SeriesModelSearchV1Admin, bool) {
	if o == nil || IsNil(o.Admin) {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *SeriesModelSearchV1) HasAdmin() bool {
	if o != nil && !IsNil(o.Admin) {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given SeriesModelSearchV1Admin and assigns it to the Admin field.
func (o *SeriesModelSearchV1) SetAdmin(v SeriesModelSearchV1Admin) {
	o.Admin = &v
}

func (o SeriesModelSearchV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SeriesModelSearchV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SeriesId) {
		toSerialize["series_id"] = o.SeriesId
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Year) {
		toSerialize["year"] = o.Year
	}
	if !IsNil(o.BayesianRating) {
		toSerialize["bayesian_rating"] = o.BayesianRating
	}
	if !IsNil(o.RatingVotes) {
		toSerialize["rating_votes"] = o.RatingVotes
	}
	if !IsNil(o.Genres) {
		toSerialize["genres"] = o.Genres
	}
	if !IsNil(o.LatestChapter) {
		toSerialize["latest_chapter"] = o.LatestChapter
	}
	if !IsNil(o.Rank) {
		toSerialize["rank"] = o.Rank
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["last_updated"] = o.LastUpdated
	}
	if !IsNil(o.Admin) {
		toSerialize["admin"] = o.Admin
	}
	return toSerialize, nil
}

type NullableSeriesModelSearchV1 struct {
	value *SeriesModelSearchV1
	isSet bool
}

func (v NullableSeriesModelSearchV1) Get() *SeriesModelSearchV1 {
	return v.value
}

func (v *NullableSeriesModelSearchV1) Set(val *SeriesModelSearchV1) {
	v.value = val
	v.isSet = true
}

func (v NullableSeriesModelSearchV1) IsSet() bool {
	return v.isSet
}

func (v *NullableSeriesModelSearchV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSeriesModelSearchV1(val *SeriesModelSearchV1) *NullableSeriesModelSearchV1 {
	return &NullableSeriesModelSearchV1{value: val, isSet: true}
}

func (v NullableSeriesModelSearchV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSeriesModelSearchV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
