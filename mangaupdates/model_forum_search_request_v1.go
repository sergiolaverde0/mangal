/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ForumSearchRequestV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForumSearchRequestV1{}

// ForumSearchRequestV1 struct for ForumSearchRequestV1
type ForumSearchRequestV1 struct {
	SearchBy     *string `json:"search_by,omitempty"`
	Method       *string `json:"method,omitempty"`
	Search       *string `json:"search,omitempty"`
	Since        *int64  `json:"since,omitempty"`
	AfterId      *int64  `json:"after_id,omitempty"`
	BeforeId     *int64  `json:"before_id,omitempty"`
	Page         *int64  `json:"page,omitempty"`
	Perpage      *int64  `json:"perpage,omitempty"`
	ByUserId     *int64  `json:"by_user_id,omitempty"`
	FilterUserId *int64  `json:"filter_user_id,omitempty"`
}

// NewForumSearchRequestV1 instantiates a new ForumSearchRequestV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForumSearchRequestV1() *ForumSearchRequestV1 {
	this := ForumSearchRequestV1{}
	return &this
}

// NewForumSearchRequestV1WithDefaults instantiates a new ForumSearchRequestV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForumSearchRequestV1WithDefaults() *ForumSearchRequestV1 {
	this := ForumSearchRequestV1{}
	return &this
}

// GetSearchBy returns the SearchBy field value if set, zero value otherwise.
func (o *ForumSearchRequestV1) GetSearchBy() string {
	if o == nil || IsNil(o.SearchBy) {
		var ret string
		return ret
	}
	return *o.SearchBy
}

// GetSearchByOk returns a tuple with the SearchBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumSearchRequestV1) GetSearchByOk() (*string, bool) {
	if o == nil || IsNil(o.SearchBy) {
		return nil, false
	}
	return o.SearchBy, true
}

// HasSearchBy returns a boolean if a field has been set.
func (o *ForumSearchRequestV1) HasSearchBy() bool {
	if o != nil && !IsNil(o.SearchBy) {
		return true
	}

	return false
}

// SetSearchBy gets a reference to the given string and assigns it to the SearchBy field.
func (o *ForumSearchRequestV1) SetSearchBy(v string) {
	o.SearchBy = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *ForumSearchRequestV1) GetMethod() string {
	if o == nil || IsNil(o.Method) {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumSearchRequestV1) GetMethodOk() (*string, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *ForumSearchRequestV1) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *ForumSearchRequestV1) SetMethod(v string) {
	o.Method = &v
}

// GetSearch returns the Search field value if set, zero value otherwise.
func (o *ForumSearchRequestV1) GetSearch() string {
	if o == nil || IsNil(o.Search) {
		var ret string
		return ret
	}
	return *o.Search
}

// GetSearchOk returns a tuple with the Search field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumSearchRequestV1) GetSearchOk() (*string, bool) {
	if o == nil || IsNil(o.Search) {
		return nil, false
	}
	return o.Search, true
}

// HasSearch returns a boolean if a field has been set.
func (o *ForumSearchRequestV1) HasSearch() bool {
	if o != nil && !IsNil(o.Search) {
		return true
	}

	return false
}

// SetSearch gets a reference to the given string and assigns it to the Search field.
func (o *ForumSearchRequestV1) SetSearch(v string) {
	o.Search = &v
}

// GetSince returns the Since field value if set, zero value otherwise.
func (o *ForumSearchRequestV1) GetSince() int64 {
	if o == nil || IsNil(o.Since) {
		var ret int64
		return ret
	}
	return *o.Since
}

// GetSinceOk returns a tuple with the Since field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumSearchRequestV1) GetSinceOk() (*int64, bool) {
	if o == nil || IsNil(o.Since) {
		return nil, false
	}
	return o.Since, true
}

// HasSince returns a boolean if a field has been set.
func (o *ForumSearchRequestV1) HasSince() bool {
	if o != nil && !IsNil(o.Since) {
		return true
	}

	return false
}

// SetSince gets a reference to the given int64 and assigns it to the Since field.
func (o *ForumSearchRequestV1) SetSince(v int64) {
	o.Since = &v
}

// GetAfterId returns the AfterId field value if set, zero value otherwise.
func (o *ForumSearchRequestV1) GetAfterId() int64 {
	if o == nil || IsNil(o.AfterId) {
		var ret int64
		return ret
	}
	return *o.AfterId
}

// GetAfterIdOk returns a tuple with the AfterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumSearchRequestV1) GetAfterIdOk() (*int64, bool) {
	if o == nil || IsNil(o.AfterId) {
		return nil, false
	}
	return o.AfterId, true
}

// HasAfterId returns a boolean if a field has been set.
func (o *ForumSearchRequestV1) HasAfterId() bool {
	if o != nil && !IsNil(o.AfterId) {
		return true
	}

	return false
}

// SetAfterId gets a reference to the given int64 and assigns it to the AfterId field.
func (o *ForumSearchRequestV1) SetAfterId(v int64) {
	o.AfterId = &v
}

// GetBeforeId returns the BeforeId field value if set, zero value otherwise.
func (o *ForumSearchRequestV1) GetBeforeId() int64 {
	if o == nil || IsNil(o.BeforeId) {
		var ret int64
		return ret
	}
	return *o.BeforeId
}

// GetBeforeIdOk returns a tuple with the BeforeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumSearchRequestV1) GetBeforeIdOk() (*int64, bool) {
	if o == nil || IsNil(o.BeforeId) {
		return nil, false
	}
	return o.BeforeId, true
}

// HasBeforeId returns a boolean if a field has been set.
func (o *ForumSearchRequestV1) HasBeforeId() bool {
	if o != nil && !IsNil(o.BeforeId) {
		return true
	}

	return false
}

// SetBeforeId gets a reference to the given int64 and assigns it to the BeforeId field.
func (o *ForumSearchRequestV1) SetBeforeId(v int64) {
	o.BeforeId = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *ForumSearchRequestV1) GetPage() int64 {
	if o == nil || IsNil(o.Page) {
		var ret int64
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumSearchRequestV1) GetPageOk() (*int64, bool) {
	if o == nil || IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *ForumSearchRequestV1) HasPage() bool {
	if o != nil && !IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given int64 and assigns it to the Page field.
func (o *ForumSearchRequestV1) SetPage(v int64) {
	o.Page = &v
}

// GetPerpage returns the Perpage field value if set, zero value otherwise.
func (o *ForumSearchRequestV1) GetPerpage() int64 {
	if o == nil || IsNil(o.Perpage) {
		var ret int64
		return ret
	}
	return *o.Perpage
}

// GetPerpageOk returns a tuple with the Perpage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumSearchRequestV1) GetPerpageOk() (*int64, bool) {
	if o == nil || IsNil(o.Perpage) {
		return nil, false
	}
	return o.Perpage, true
}

// HasPerpage returns a boolean if a field has been set.
func (o *ForumSearchRequestV1) HasPerpage() bool {
	if o != nil && !IsNil(o.Perpage) {
		return true
	}

	return false
}

// SetPerpage gets a reference to the given int64 and assigns it to the Perpage field.
func (o *ForumSearchRequestV1) SetPerpage(v int64) {
	o.Perpage = &v
}

// GetByUserId returns the ByUserId field value if set, zero value otherwise.
func (o *ForumSearchRequestV1) GetByUserId() int64 {
	if o == nil || IsNil(o.ByUserId) {
		var ret int64
		return ret
	}
	return *o.ByUserId
}

// GetByUserIdOk returns a tuple with the ByUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumSearchRequestV1) GetByUserIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ByUserId) {
		return nil, false
	}
	return o.ByUserId, true
}

// HasByUserId returns a boolean if a field has been set.
func (o *ForumSearchRequestV1) HasByUserId() bool {
	if o != nil && !IsNil(o.ByUserId) {
		return true
	}

	return false
}

// SetByUserId gets a reference to the given int64 and assigns it to the ByUserId field.
func (o *ForumSearchRequestV1) SetByUserId(v int64) {
	o.ByUserId = &v
}

// GetFilterUserId returns the FilterUserId field value if set, zero value otherwise.
func (o *ForumSearchRequestV1) GetFilterUserId() int64 {
	if o == nil || IsNil(o.FilterUserId) {
		var ret int64
		return ret
	}
	return *o.FilterUserId
}

// GetFilterUserIdOk returns a tuple with the FilterUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumSearchRequestV1) GetFilterUserIdOk() (*int64, bool) {
	if o == nil || IsNil(o.FilterUserId) {
		return nil, false
	}
	return o.FilterUserId, true
}

// HasFilterUserId returns a boolean if a field has been set.
func (o *ForumSearchRequestV1) HasFilterUserId() bool {
	if o != nil && !IsNil(o.FilterUserId) {
		return true
	}

	return false
}

// SetFilterUserId gets a reference to the given int64 and assigns it to the FilterUserId field.
func (o *ForumSearchRequestV1) SetFilterUserId(v int64) {
	o.FilterUserId = &v
}

func (o ForumSearchRequestV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForumSearchRequestV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SearchBy) {
		toSerialize["search_by"] = o.SearchBy
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.Search) {
		toSerialize["search"] = o.Search
	}
	if !IsNil(o.Since) {
		toSerialize["since"] = o.Since
	}
	if !IsNil(o.AfterId) {
		toSerialize["after_id"] = o.AfterId
	}
	if !IsNil(o.BeforeId) {
		toSerialize["before_id"] = o.BeforeId
	}
	if !IsNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	if !IsNil(o.Perpage) {
		toSerialize["perpage"] = o.Perpage
	}
	if !IsNil(o.ByUserId) {
		toSerialize["by_user_id"] = o.ByUserId
	}
	if !IsNil(o.FilterUserId) {
		toSerialize["filter_user_id"] = o.FilterUserId
	}
	return toSerialize, nil
}

type NullableForumSearchRequestV1 struct {
	value *ForumSearchRequestV1
	isSet bool
}

func (v NullableForumSearchRequestV1) Get() *ForumSearchRequestV1 {
	return v.value
}

func (v *NullableForumSearchRequestV1) Set(val *ForumSearchRequestV1) {
	v.value = val
	v.isSet = true
}

func (v NullableForumSearchRequestV1) IsSet() bool {
	return v.isSet
}

func (v *NullableForumSearchRequestV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForumSearchRequestV1(val *ForumSearchRequestV1) *NullableForumSearchRequestV1 {
	return &NullableForumSearchRequestV1{value: val, isSet: true}
}

func (v NullableForumSearchRequestV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForumSearchRequestV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
