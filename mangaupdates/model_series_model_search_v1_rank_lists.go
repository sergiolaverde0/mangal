/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SeriesModelSearchV1RankLists type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SeriesModelSearchV1RankLists{}

// SeriesModelSearchV1RankLists struct for SeriesModelSearchV1RankLists
type SeriesModelSearchV1RankLists struct {
	Reading    *int64 `json:"reading,omitempty"`
	Wish       *int64 `json:"wish,omitempty"`
	Complete   *int64 `json:"complete,omitempty"`
	Unfinished *int64 `json:"unfinished,omitempty"`
	Custom     *int64 `json:"custom,omitempty"`
}

// NewSeriesModelSearchV1RankLists instantiates a new SeriesModelSearchV1RankLists object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSeriesModelSearchV1RankLists() *SeriesModelSearchV1RankLists {
	this := SeriesModelSearchV1RankLists{}
	return &this
}

// NewSeriesModelSearchV1RankListsWithDefaults instantiates a new SeriesModelSearchV1RankLists object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSeriesModelSearchV1RankListsWithDefaults() *SeriesModelSearchV1RankLists {
	this := SeriesModelSearchV1RankLists{}
	return &this
}

// GetReading returns the Reading field value if set, zero value otherwise.
func (o *SeriesModelSearchV1RankLists) GetReading() int64 {
	if o == nil || IsNil(o.Reading) {
		var ret int64
		return ret
	}
	return *o.Reading
}

// GetReadingOk returns a tuple with the Reading field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelSearchV1RankLists) GetReadingOk() (*int64, bool) {
	if o == nil || IsNil(o.Reading) {
		return nil, false
	}
	return o.Reading, true
}

// HasReading returns a boolean if a field has been set.
func (o *SeriesModelSearchV1RankLists) HasReading() bool {
	if o != nil && !IsNil(o.Reading) {
		return true
	}

	return false
}

// SetReading gets a reference to the given int64 and assigns it to the Reading field.
func (o *SeriesModelSearchV1RankLists) SetReading(v int64) {
	o.Reading = &v
}

// GetWish returns the Wish field value if set, zero value otherwise.
func (o *SeriesModelSearchV1RankLists) GetWish() int64 {
	if o == nil || IsNil(o.Wish) {
		var ret int64
		return ret
	}
	return *o.Wish
}

// GetWishOk returns a tuple with the Wish field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelSearchV1RankLists) GetWishOk() (*int64, bool) {
	if o == nil || IsNil(o.Wish) {
		return nil, false
	}
	return o.Wish, true
}

// HasWish returns a boolean if a field has been set.
func (o *SeriesModelSearchV1RankLists) HasWish() bool {
	if o != nil && !IsNil(o.Wish) {
		return true
	}

	return false
}

// SetWish gets a reference to the given int64 and assigns it to the Wish field.
func (o *SeriesModelSearchV1RankLists) SetWish(v int64) {
	o.Wish = &v
}

// GetComplete returns the Complete field value if set, zero value otherwise.
func (o *SeriesModelSearchV1RankLists) GetComplete() int64 {
	if o == nil || IsNil(o.Complete) {
		var ret int64
		return ret
	}
	return *o.Complete
}

// GetCompleteOk returns a tuple with the Complete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelSearchV1RankLists) GetCompleteOk() (*int64, bool) {
	if o == nil || IsNil(o.Complete) {
		return nil, false
	}
	return o.Complete, true
}

// HasComplete returns a boolean if a field has been set.
func (o *SeriesModelSearchV1RankLists) HasComplete() bool {
	if o != nil && !IsNil(o.Complete) {
		return true
	}

	return false
}

// SetComplete gets a reference to the given int64 and assigns it to the Complete field.
func (o *SeriesModelSearchV1RankLists) SetComplete(v int64) {
	o.Complete = &v
}

// GetUnfinished returns the Unfinished field value if set, zero value otherwise.
func (o *SeriesModelSearchV1RankLists) GetUnfinished() int64 {
	if o == nil || IsNil(o.Unfinished) {
		var ret int64
		return ret
	}
	return *o.Unfinished
}

// GetUnfinishedOk returns a tuple with the Unfinished field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelSearchV1RankLists) GetUnfinishedOk() (*int64, bool) {
	if o == nil || IsNil(o.Unfinished) {
		return nil, false
	}
	return o.Unfinished, true
}

// HasUnfinished returns a boolean if a field has been set.
func (o *SeriesModelSearchV1RankLists) HasUnfinished() bool {
	if o != nil && !IsNil(o.Unfinished) {
		return true
	}

	return false
}

// SetUnfinished gets a reference to the given int64 and assigns it to the Unfinished field.
func (o *SeriesModelSearchV1RankLists) SetUnfinished(v int64) {
	o.Unfinished = &v
}

// GetCustom returns the Custom field value if set, zero value otherwise.
func (o *SeriesModelSearchV1RankLists) GetCustom() int64 {
	if o == nil || IsNil(o.Custom) {
		var ret int64
		return ret
	}
	return *o.Custom
}

// GetCustomOk returns a tuple with the Custom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelSearchV1RankLists) GetCustomOk() (*int64, bool) {
	if o == nil || IsNil(o.Custom) {
		return nil, false
	}
	return o.Custom, true
}

// HasCustom returns a boolean if a field has been set.
func (o *SeriesModelSearchV1RankLists) HasCustom() bool {
	if o != nil && !IsNil(o.Custom) {
		return true
	}

	return false
}

// SetCustom gets a reference to the given int64 and assigns it to the Custom field.
func (o *SeriesModelSearchV1RankLists) SetCustom(v int64) {
	o.Custom = &v
}

func (o SeriesModelSearchV1RankLists) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SeriesModelSearchV1RankLists) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reading) {
		toSerialize["reading"] = o.Reading
	}
	if !IsNil(o.Wish) {
		toSerialize["wish"] = o.Wish
	}
	if !IsNil(o.Complete) {
		toSerialize["complete"] = o.Complete
	}
	if !IsNil(o.Unfinished) {
		toSerialize["unfinished"] = o.Unfinished
	}
	if !IsNil(o.Custom) {
		toSerialize["custom"] = o.Custom
	}
	return toSerialize, nil
}

type NullableSeriesModelSearchV1RankLists struct {
	value *SeriesModelSearchV1RankLists
	isSet bool
}

func (v NullableSeriesModelSearchV1RankLists) Get() *SeriesModelSearchV1RankLists {
	return v.value
}

func (v *NullableSeriesModelSearchV1RankLists) Set(val *SeriesModelSearchV1RankLists) {
	v.value = val
	v.isSet = true
}

func (v NullableSeriesModelSearchV1RankLists) IsSet() bool {
	return v.isSet
}

func (v *NullableSeriesModelSearchV1RankLists) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSeriesModelSearchV1RankLists(val *SeriesModelSearchV1RankLists) *NullableSeriesModelSearchV1RankLists {
	return &NullableSeriesModelSearchV1RankLists{value: val, isSet: true}
}

func (v NullableSeriesModelSearchV1RankLists) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSeriesModelSearchV1RankLists) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
