/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GroupsModelV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupsModelV1{}

// GroupsModelV1 struct for GroupsModelV1
type GroupsModelV1 struct {
	GroupId    *int64                    `json:"group_id,omitempty"`
	Name       *string                   `json:"name,omitempty"`
	Url        *string                   `json:"url,omitempty"`
	Associated []GroupsModelV1Associated `json:"associated,omitempty"`
	Social     *GroupsModelV1Social      `json:"social,omitempty"`
	Active     *bool                     `json:"active,omitempty"`
	Notes      *string                   `json:"notes,omitempty"`
	AddedBy    *UserModelSearchV1        `json:"added_by,omitempty"`
	Admin      *GroupsModelV1Admin       `json:"admin,omitempty"`
}

// NewGroupsModelV1 instantiates a new GroupsModelV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupsModelV1() *GroupsModelV1 {
	this := GroupsModelV1{}
	return &this
}

// NewGroupsModelV1WithDefaults instantiates a new GroupsModelV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupsModelV1WithDefaults() *GroupsModelV1 {
	this := GroupsModelV1{}
	return &this
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *GroupsModelV1) GetGroupId() int64 {
	if o == nil || IsNil(o.GroupId) {
		var ret int64
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupsModelV1) GetGroupIdOk() (*int64, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *GroupsModelV1) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given int64 and assigns it to the GroupId field.
func (o *GroupsModelV1) SetGroupId(v int64) {
	o.GroupId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GroupsModelV1) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupsModelV1) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GroupsModelV1) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GroupsModelV1) SetName(v string) {
	o.Name = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *GroupsModelV1) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupsModelV1) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *GroupsModelV1) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *GroupsModelV1) SetUrl(v string) {
	o.Url = &v
}

// GetAssociated returns the Associated field value if set, zero value otherwise.
func (o *GroupsModelV1) GetAssociated() []GroupsModelV1Associated {
	if o == nil || IsNil(o.Associated) {
		var ret []GroupsModelV1Associated
		return ret
	}
	return o.Associated
}

// GetAssociatedOk returns a tuple with the Associated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupsModelV1) GetAssociatedOk() ([]GroupsModelV1Associated, bool) {
	if o == nil || IsNil(o.Associated) {
		return nil, false
	}
	return o.Associated, true
}

// HasAssociated returns a boolean if a field has been set.
func (o *GroupsModelV1) HasAssociated() bool {
	if o != nil && !IsNil(o.Associated) {
		return true
	}

	return false
}

// SetAssociated gets a reference to the given []GroupsModelV1Associated and assigns it to the Associated field.
func (o *GroupsModelV1) SetAssociated(v []GroupsModelV1Associated) {
	o.Associated = v
}

// GetSocial returns the Social field value if set, zero value otherwise.
func (o *GroupsModelV1) GetSocial() GroupsModelV1Social {
	if o == nil || IsNil(o.Social) {
		var ret GroupsModelV1Social
		return ret
	}
	return *o.Social
}

// GetSocialOk returns a tuple with the Social field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupsModelV1) GetSocialOk() (*GroupsModelV1Social, bool) {
	if o == nil || IsNil(o.Social) {
		return nil, false
	}
	return o.Social, true
}

// HasSocial returns a boolean if a field has been set.
func (o *GroupsModelV1) HasSocial() bool {
	if o != nil && !IsNil(o.Social) {
		return true
	}

	return false
}

// SetSocial gets a reference to the given GroupsModelV1Social and assigns it to the Social field.
func (o *GroupsModelV1) SetSocial(v GroupsModelV1Social) {
	o.Social = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *GroupsModelV1) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupsModelV1) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *GroupsModelV1) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *GroupsModelV1) SetActive(v bool) {
	o.Active = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *GroupsModelV1) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupsModelV1) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *GroupsModelV1) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *GroupsModelV1) SetNotes(v string) {
	o.Notes = &v
}

// GetAddedBy returns the AddedBy field value if set, zero value otherwise.
func (o *GroupsModelV1) GetAddedBy() UserModelSearchV1 {
	if o == nil || IsNil(o.AddedBy) {
		var ret UserModelSearchV1
		return ret
	}
	return *o.AddedBy
}

// GetAddedByOk returns a tuple with the AddedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupsModelV1) GetAddedByOk() (*UserModelSearchV1, bool) {
	if o == nil || IsNil(o.AddedBy) {
		return nil, false
	}
	return o.AddedBy, true
}

// HasAddedBy returns a boolean if a field has been set.
func (o *GroupsModelV1) HasAddedBy() bool {
	if o != nil && !IsNil(o.AddedBy) {
		return true
	}

	return false
}

// SetAddedBy gets a reference to the given UserModelSearchV1 and assigns it to the AddedBy field.
func (o *GroupsModelV1) SetAddedBy(v UserModelSearchV1) {
	o.AddedBy = &v
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *GroupsModelV1) GetAdmin() GroupsModelV1Admin {
	if o == nil || IsNil(o.Admin) {
		var ret GroupsModelV1Admin
		return ret
	}
	return *o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupsModelV1) GetAdminOk() (*GroupsModelV1Admin, bool) {
	if o == nil || IsNil(o.Admin) {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *GroupsModelV1) HasAdmin() bool {
	if o != nil && !IsNil(o.Admin) {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given GroupsModelV1Admin and assigns it to the Admin field.
func (o *GroupsModelV1) SetAdmin(v GroupsModelV1Admin) {
	o.Admin = &v
}

func (o GroupsModelV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupsModelV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GroupId) {
		toSerialize["group_id"] = o.GroupId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Associated) {
		toSerialize["associated"] = o.Associated
	}
	if !IsNil(o.Social) {
		toSerialize["social"] = o.Social
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.AddedBy) {
		toSerialize["added_by"] = o.AddedBy
	}
	if !IsNil(o.Admin) {
		toSerialize["admin"] = o.Admin
	}
	return toSerialize, nil
}

type NullableGroupsModelV1 struct {
	value *GroupsModelV1
	isSet bool
}

func (v NullableGroupsModelV1) Get() *GroupsModelV1 {
	return v.value
}

func (v *NullableGroupsModelV1) Set(val *GroupsModelV1) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupsModelV1) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupsModelV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupsModelV1(val *GroupsModelV1) *NullableGroupsModelV1 {
	return &NullableGroupsModelV1{value: val, isSet: true}
}

func (v NullableGroupsModelV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupsModelV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
