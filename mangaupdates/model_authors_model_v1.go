/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AuthorsModelV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorsModelV1{}

// AuthorsModelV1 struct for AuthorsModelV1
type AuthorsModelV1 struct {
	Id          *int64                     `json:"id,omitempty"`
	Name        *string                    `json:"name,omitempty"`
	Url         *string                    `json:"url,omitempty"`
	Associated  []AuthorsModelV1Associated `json:"associated,omitempty"`
	Image       *ImageModelV1              `json:"image,omitempty"`
	Actualname  *string                    `json:"actualname,omitempty"`
	Birthday    *BirthdayModelV1           `json:"birthday,omitempty"`
	Birthplace  *string                    `json:"birthplace,omitempty"`
	Bloodtype   *string                    `json:"bloodtype,omitempty"`
	Gender      *string                    `json:"gender,omitempty"`
	Genres      []string                   `json:"genres,omitempty"`
	Stats       *AuthorsModelV1Stats       `json:"stats,omitempty"`
	Social      *AuthorsModelV1Social      `json:"social,omitempty"`
	Comments    *string                    `json:"comments,omitempty"`
	LastUpdated *TimeV1                    `json:"last_updated,omitempty"`
	AddedBy     *UserModelSearchV1         `json:"added_by,omitempty"`
	Admin       *AuthorsModelV1Admin       `json:"admin,omitempty"`
}

// NewAuthorsModelV1 instantiates a new AuthorsModelV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorsModelV1() *AuthorsModelV1 {
	this := AuthorsModelV1{}
	return &this
}

// NewAuthorsModelV1WithDefaults instantiates a new AuthorsModelV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorsModelV1WithDefaults() *AuthorsModelV1 {
	this := AuthorsModelV1{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AuthorsModelV1) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorsModelV1) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AuthorsModelV1) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *AuthorsModelV1) SetId(v int64) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AuthorsModelV1) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorsModelV1) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AuthorsModelV1) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AuthorsModelV1) SetName(v string) {
	o.Name = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *AuthorsModelV1) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorsModelV1) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *AuthorsModelV1) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *AuthorsModelV1) SetUrl(v string) {
	o.Url = &v
}

// GetAssociated returns the Associated field value if set, zero value otherwise.
func (o *AuthorsModelV1) GetAssociated() []AuthorsModelV1Associated {
	if o == nil || IsNil(o.Associated) {
		var ret []AuthorsModelV1Associated
		return ret
	}
	return o.Associated
}

// GetAssociatedOk returns a tuple with the Associated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorsModelV1) GetAssociatedOk() ([]AuthorsModelV1Associated, bool) {
	if o == nil || IsNil(o.Associated) {
		return nil, false
	}
	return o.Associated, true
}

// HasAssociated returns a boolean if a field has been set.
func (o *AuthorsModelV1) HasAssociated() bool {
	if o != nil && !IsNil(o.Associated) {
		return true
	}

	return false
}

// SetAssociated gets a reference to the given []AuthorsModelV1Associated and assigns it to the Associated field.
func (o *AuthorsModelV1) SetAssociated(v []AuthorsModelV1Associated) {
	o.Associated = v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *AuthorsModelV1) GetImage() ImageModelV1 {
	if o == nil || IsNil(o.Image) {
		var ret ImageModelV1
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorsModelV1) GetImageOk() (*ImageModelV1, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *AuthorsModelV1) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given ImageModelV1 and assigns it to the Image field.
func (o *AuthorsModelV1) SetImage(v ImageModelV1) {
	o.Image = &v
}

// GetActualname returns the Actualname field value if set, zero value otherwise.
func (o *AuthorsModelV1) GetActualname() string {
	if o == nil || IsNil(o.Actualname) {
		var ret string
		return ret
	}
	return *o.Actualname
}

// GetActualnameOk returns a tuple with the Actualname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorsModelV1) GetActualnameOk() (*string, bool) {
	if o == nil || IsNil(o.Actualname) {
		return nil, false
	}
	return o.Actualname, true
}

// HasActualname returns a boolean if a field has been set.
func (o *AuthorsModelV1) HasActualname() bool {
	if o != nil && !IsNil(o.Actualname) {
		return true
	}

	return false
}

// SetActualname gets a reference to the given string and assigns it to the Actualname field.
func (o *AuthorsModelV1) SetActualname(v string) {
	o.Actualname = &v
}

// GetBirthday returns the Birthday field value if set, zero value otherwise.
func (o *AuthorsModelV1) GetBirthday() BirthdayModelV1 {
	if o == nil || IsNil(o.Birthday) {
		var ret BirthdayModelV1
		return ret
	}
	return *o.Birthday
}

// GetBirthdayOk returns a tuple with the Birthday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorsModelV1) GetBirthdayOk() (*BirthdayModelV1, bool) {
	if o == nil || IsNil(o.Birthday) {
		return nil, false
	}
	return o.Birthday, true
}

// HasBirthday returns a boolean if a field has been set.
func (o *AuthorsModelV1) HasBirthday() bool {
	if o != nil && !IsNil(o.Birthday) {
		return true
	}

	return false
}

// SetBirthday gets a reference to the given BirthdayModelV1 and assigns it to the Birthday field.
func (o *AuthorsModelV1) SetBirthday(v BirthdayModelV1) {
	o.Birthday = &v
}

// GetBirthplace returns the Birthplace field value if set, zero value otherwise.
func (o *AuthorsModelV1) GetBirthplace() string {
	if o == nil || IsNil(o.Birthplace) {
		var ret string
		return ret
	}
	return *o.Birthplace
}

// GetBirthplaceOk returns a tuple with the Birthplace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorsModelV1) GetBirthplaceOk() (*string, bool) {
	if o == nil || IsNil(o.Birthplace) {
		return nil, false
	}
	return o.Birthplace, true
}

// HasBirthplace returns a boolean if a field has been set.
func (o *AuthorsModelV1) HasBirthplace() bool {
	if o != nil && !IsNil(o.Birthplace) {
		return true
	}

	return false
}

// SetBirthplace gets a reference to the given string and assigns it to the Birthplace field.
func (o *AuthorsModelV1) SetBirthplace(v string) {
	o.Birthplace = &v
}

// GetBloodtype returns the Bloodtype field value if set, zero value otherwise.
func (o *AuthorsModelV1) GetBloodtype() string {
	if o == nil || IsNil(o.Bloodtype) {
		var ret string
		return ret
	}
	return *o.Bloodtype
}

// GetBloodtypeOk returns a tuple with the Bloodtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorsModelV1) GetBloodtypeOk() (*string, bool) {
	if o == nil || IsNil(o.Bloodtype) {
		return nil, false
	}
	return o.Bloodtype, true
}

// HasBloodtype returns a boolean if a field has been set.
func (o *AuthorsModelV1) HasBloodtype() bool {
	if o != nil && !IsNil(o.Bloodtype) {
		return true
	}

	return false
}

// SetBloodtype gets a reference to the given string and assigns it to the Bloodtype field.
func (o *AuthorsModelV1) SetBloodtype(v string) {
	o.Bloodtype = &v
}

// GetGender returns the Gender field value if set, zero value otherwise.
func (o *AuthorsModelV1) GetGender() string {
	if o == nil || IsNil(o.Gender) {
		var ret string
		return ret
	}
	return *o.Gender
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorsModelV1) GetGenderOk() (*string, bool) {
	if o == nil || IsNil(o.Gender) {
		return nil, false
	}
	return o.Gender, true
}

// HasGender returns a boolean if a field has been set.
func (o *AuthorsModelV1) HasGender() bool {
	if o != nil && !IsNil(o.Gender) {
		return true
	}

	return false
}

// SetGender gets a reference to the given string and assigns it to the Gender field.
func (o *AuthorsModelV1) SetGender(v string) {
	o.Gender = &v
}

// GetGenres returns the Genres field value if set, zero value otherwise.
func (o *AuthorsModelV1) GetGenres() []string {
	if o == nil || IsNil(o.Genres) {
		var ret []string
		return ret
	}
	return o.Genres
}

// GetGenresOk returns a tuple with the Genres field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorsModelV1) GetGenresOk() ([]string, bool) {
	if o == nil || IsNil(o.Genres) {
		return nil, false
	}
	return o.Genres, true
}

// HasGenres returns a boolean if a field has been set.
func (o *AuthorsModelV1) HasGenres() bool {
	if o != nil && !IsNil(o.Genres) {
		return true
	}

	return false
}

// SetGenres gets a reference to the given []string and assigns it to the Genres field.
func (o *AuthorsModelV1) SetGenres(v []string) {
	o.Genres = v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *AuthorsModelV1) GetStats() AuthorsModelV1Stats {
	if o == nil || IsNil(o.Stats) {
		var ret AuthorsModelV1Stats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorsModelV1) GetStatsOk() (*AuthorsModelV1Stats, bool) {
	if o == nil || IsNil(o.Stats) {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *AuthorsModelV1) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given AuthorsModelV1Stats and assigns it to the Stats field.
func (o *AuthorsModelV1) SetStats(v AuthorsModelV1Stats) {
	o.Stats = &v
}

// GetSocial returns the Social field value if set, zero value otherwise.
func (o *AuthorsModelV1) GetSocial() AuthorsModelV1Social {
	if o == nil || IsNil(o.Social) {
		var ret AuthorsModelV1Social
		return ret
	}
	return *o.Social
}

// GetSocialOk returns a tuple with the Social field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorsModelV1) GetSocialOk() (*AuthorsModelV1Social, bool) {
	if o == nil || IsNil(o.Social) {
		return nil, false
	}
	return o.Social, true
}

// HasSocial returns a boolean if a field has been set.
func (o *AuthorsModelV1) HasSocial() bool {
	if o != nil && !IsNil(o.Social) {
		return true
	}

	return false
}

// SetSocial gets a reference to the given AuthorsModelV1Social and assigns it to the Social field.
func (o *AuthorsModelV1) SetSocial(v AuthorsModelV1Social) {
	o.Social = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *AuthorsModelV1) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorsModelV1) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *AuthorsModelV1) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *AuthorsModelV1) SetComments(v string) {
	o.Comments = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *AuthorsModelV1) GetLastUpdated() TimeV1 {
	if o == nil || IsNil(o.LastUpdated) {
		var ret TimeV1
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorsModelV1) GetLastUpdatedOk() (*TimeV1, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *AuthorsModelV1) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given TimeV1 and assigns it to the LastUpdated field.
func (o *AuthorsModelV1) SetLastUpdated(v TimeV1) {
	o.LastUpdated = &v
}

// GetAddedBy returns the AddedBy field value if set, zero value otherwise.
func (o *AuthorsModelV1) GetAddedBy() UserModelSearchV1 {
	if o == nil || IsNil(o.AddedBy) {
		var ret UserModelSearchV1
		return ret
	}
	return *o.AddedBy
}

// GetAddedByOk returns a tuple with the AddedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorsModelV1) GetAddedByOk() (*UserModelSearchV1, bool) {
	if o == nil || IsNil(o.AddedBy) {
		return nil, false
	}
	return o.AddedBy, true
}

// HasAddedBy returns a boolean if a field has been set.
func (o *AuthorsModelV1) HasAddedBy() bool {
	if o != nil && !IsNil(o.AddedBy) {
		return true
	}

	return false
}

// SetAddedBy gets a reference to the given UserModelSearchV1 and assigns it to the AddedBy field.
func (o *AuthorsModelV1) SetAddedBy(v UserModelSearchV1) {
	o.AddedBy = &v
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *AuthorsModelV1) GetAdmin() AuthorsModelV1Admin {
	if o == nil || IsNil(o.Admin) {
		var ret AuthorsModelV1Admin
		return ret
	}
	return *o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorsModelV1) GetAdminOk() (*AuthorsModelV1Admin, bool) {
	if o == nil || IsNil(o.Admin) {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *AuthorsModelV1) HasAdmin() bool {
	if o != nil && !IsNil(o.Admin) {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given AuthorsModelV1Admin and assigns it to the Admin field.
func (o *AuthorsModelV1) SetAdmin(v AuthorsModelV1Admin) {
	o.Admin = &v
}

func (o AuthorsModelV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorsModelV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Associated) {
		toSerialize["associated"] = o.Associated
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !IsNil(o.Actualname) {
		toSerialize["actualname"] = o.Actualname
	}
	if !IsNil(o.Birthday) {
		toSerialize["birthday"] = o.Birthday
	}
	if !IsNil(o.Birthplace) {
		toSerialize["birthplace"] = o.Birthplace
	}
	if !IsNil(o.Bloodtype) {
		toSerialize["bloodtype"] = o.Bloodtype
	}
	if !IsNil(o.Gender) {
		toSerialize["gender"] = o.Gender
	}
	if !IsNil(o.Genres) {
		toSerialize["genres"] = o.Genres
	}
	if !IsNil(o.Stats) {
		toSerialize["stats"] = o.Stats
	}
	if !IsNil(o.Social) {
		toSerialize["social"] = o.Social
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["last_updated"] = o.LastUpdated
	}
	if !IsNil(o.AddedBy) {
		toSerialize["added_by"] = o.AddedBy
	}
	if !IsNil(o.Admin) {
		toSerialize["admin"] = o.Admin
	}
	return toSerialize, nil
}

type NullableAuthorsModelV1 struct {
	value *AuthorsModelV1
	isSet bool
}

func (v NullableAuthorsModelV1) Get() *AuthorsModelV1 {
	return v.value
}

func (v *NullableAuthorsModelV1) Set(val *AuthorsModelV1) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorsModelV1) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorsModelV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorsModelV1(val *AuthorsModelV1) *NullableAuthorsModelV1 {
	return &NullableAuthorsModelV1{value: val, isSet: true}
}

func (v NullableAuthorsModelV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorsModelV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
