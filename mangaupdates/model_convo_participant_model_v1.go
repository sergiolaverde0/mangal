/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConvoParticipantModelV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConvoParticipantModelV1{}

// ConvoParticipantModelV1 struct for ConvoParticipantModelV1
type ConvoParticipantModelV1 struct {
	UserId       *int64  `json:"user_id,omitempty"`
	Username     *string `json:"username,omitempty"`
	IsAdmin      *bool   `json:"is_admin,omitempty"`
	TimeAdded    *TimeV1 `json:"time_added,omitempty"`
	LastTimeSeen *TimeV1 `json:"last_time_seen,omitempty"`
	Joined       *bool   `json:"joined,omitempty"`
}

// NewConvoParticipantModelV1 instantiates a new ConvoParticipantModelV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConvoParticipantModelV1() *ConvoParticipantModelV1 {
	this := ConvoParticipantModelV1{}
	return &this
}

// NewConvoParticipantModelV1WithDefaults instantiates a new ConvoParticipantModelV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConvoParticipantModelV1WithDefaults() *ConvoParticipantModelV1 {
	this := ConvoParticipantModelV1{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *ConvoParticipantModelV1) GetUserId() int64 {
	if o == nil || IsNil(o.UserId) {
		var ret int64
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConvoParticipantModelV1) GetUserIdOk() (*int64, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *ConvoParticipantModelV1) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int64 and assigns it to the UserId field.
func (o *ConvoParticipantModelV1) SetUserId(v int64) {
	o.UserId = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ConvoParticipantModelV1) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConvoParticipantModelV1) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ConvoParticipantModelV1) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ConvoParticipantModelV1) SetUsername(v string) {
	o.Username = &v
}

// GetIsAdmin returns the IsAdmin field value if set, zero value otherwise.
func (o *ConvoParticipantModelV1) GetIsAdmin() bool {
	if o == nil || IsNil(o.IsAdmin) {
		var ret bool
		return ret
	}
	return *o.IsAdmin
}

// GetIsAdminOk returns a tuple with the IsAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConvoParticipantModelV1) GetIsAdminOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAdmin) {
		return nil, false
	}
	return o.IsAdmin, true
}

// HasIsAdmin returns a boolean if a field has been set.
func (o *ConvoParticipantModelV1) HasIsAdmin() bool {
	if o != nil && !IsNil(o.IsAdmin) {
		return true
	}

	return false
}

// SetIsAdmin gets a reference to the given bool and assigns it to the IsAdmin field.
func (o *ConvoParticipantModelV1) SetIsAdmin(v bool) {
	o.IsAdmin = &v
}

// GetTimeAdded returns the TimeAdded field value if set, zero value otherwise.
func (o *ConvoParticipantModelV1) GetTimeAdded() TimeV1 {
	if o == nil || IsNil(o.TimeAdded) {
		var ret TimeV1
		return ret
	}
	return *o.TimeAdded
}

// GetTimeAddedOk returns a tuple with the TimeAdded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConvoParticipantModelV1) GetTimeAddedOk() (*TimeV1, bool) {
	if o == nil || IsNil(o.TimeAdded) {
		return nil, false
	}
	return o.TimeAdded, true
}

// HasTimeAdded returns a boolean if a field has been set.
func (o *ConvoParticipantModelV1) HasTimeAdded() bool {
	if o != nil && !IsNil(o.TimeAdded) {
		return true
	}

	return false
}

// SetTimeAdded gets a reference to the given TimeV1 and assigns it to the TimeAdded field.
func (o *ConvoParticipantModelV1) SetTimeAdded(v TimeV1) {
	o.TimeAdded = &v
}

// GetLastTimeSeen returns the LastTimeSeen field value if set, zero value otherwise.
func (o *ConvoParticipantModelV1) GetLastTimeSeen() TimeV1 {
	if o == nil || IsNil(o.LastTimeSeen) {
		var ret TimeV1
		return ret
	}
	return *o.LastTimeSeen
}

// GetLastTimeSeenOk returns a tuple with the LastTimeSeen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConvoParticipantModelV1) GetLastTimeSeenOk() (*TimeV1, bool) {
	if o == nil || IsNil(o.LastTimeSeen) {
		return nil, false
	}
	return o.LastTimeSeen, true
}

// HasLastTimeSeen returns a boolean if a field has been set.
func (o *ConvoParticipantModelV1) HasLastTimeSeen() bool {
	if o != nil && !IsNil(o.LastTimeSeen) {
		return true
	}

	return false
}

// SetLastTimeSeen gets a reference to the given TimeV1 and assigns it to the LastTimeSeen field.
func (o *ConvoParticipantModelV1) SetLastTimeSeen(v TimeV1) {
	o.LastTimeSeen = &v
}

// GetJoined returns the Joined field value if set, zero value otherwise.
func (o *ConvoParticipantModelV1) GetJoined() bool {
	if o == nil || IsNil(o.Joined) {
		var ret bool
		return ret
	}
	return *o.Joined
}

// GetJoinedOk returns a tuple with the Joined field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConvoParticipantModelV1) GetJoinedOk() (*bool, bool) {
	if o == nil || IsNil(o.Joined) {
		return nil, false
	}
	return o.Joined, true
}

// HasJoined returns a boolean if a field has been set.
func (o *ConvoParticipantModelV1) HasJoined() bool {
	if o != nil && !IsNil(o.Joined) {
		return true
	}

	return false
}

// SetJoined gets a reference to the given bool and assigns it to the Joined field.
func (o *ConvoParticipantModelV1) SetJoined(v bool) {
	o.Joined = &v
}

func (o ConvoParticipantModelV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConvoParticipantModelV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.IsAdmin) {
		toSerialize["is_admin"] = o.IsAdmin
	}
	if !IsNil(o.TimeAdded) {
		toSerialize["time_added"] = o.TimeAdded
	}
	if !IsNil(o.LastTimeSeen) {
		toSerialize["last_time_seen"] = o.LastTimeSeen
	}
	if !IsNil(o.Joined) {
		toSerialize["joined"] = o.Joined
	}
	return toSerialize, nil
}

type NullableConvoParticipantModelV1 struct {
	value *ConvoParticipantModelV1
	isSet bool
}

func (v NullableConvoParticipantModelV1) Get() *ConvoParticipantModelV1 {
	return v.value
}

func (v *NullableConvoParticipantModelV1) Set(val *ConvoParticipantModelV1) {
	v.value = val
	v.isSet = true
}

func (v NullableConvoParticipantModelV1) IsSet() bool {
	return v.isSet
}

func (v *NullableConvoParticipantModelV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConvoParticipantModelV1(val *ConvoParticipantModelV1) *NullableConvoParticipantModelV1 {
	return &NullableConvoParticipantModelV1{value: val, isSet: true}
}

func (v NullableConvoParticipantModelV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConvoParticipantModelV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
