/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CategoriesModelSearchV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CategoriesModelSearchV1{}

// CategoriesModelSearchV1 struct for CategoriesModelSearchV1
type CategoriesModelSearchV1 struct {
	Category   *string `json:"category,omitempty"`
	Usage      *int64  `json:"usage,omitempty"`
	Votes      *int64  `json:"votes,omitempty"`
	VotesPlus  *int64  `json:"votes_plus,omitempty"`
	VotesMinus *int64  `json:"votes_minus,omitempty"`
}

// NewCategoriesModelSearchV1 instantiates a new CategoriesModelSearchV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCategoriesModelSearchV1() *CategoriesModelSearchV1 {
	this := CategoriesModelSearchV1{}
	return &this
}

// NewCategoriesModelSearchV1WithDefaults instantiates a new CategoriesModelSearchV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCategoriesModelSearchV1WithDefaults() *CategoriesModelSearchV1 {
	this := CategoriesModelSearchV1{}
	return &this
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *CategoriesModelSearchV1) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoriesModelSearchV1) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *CategoriesModelSearchV1) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *CategoriesModelSearchV1) SetCategory(v string) {
	o.Category = &v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *CategoriesModelSearchV1) GetUsage() int64 {
	if o == nil || IsNil(o.Usage) {
		var ret int64
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoriesModelSearchV1) GetUsageOk() (*int64, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *CategoriesModelSearchV1) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given int64 and assigns it to the Usage field.
func (o *CategoriesModelSearchV1) SetUsage(v int64) {
	o.Usage = &v
}

// GetVotes returns the Votes field value if set, zero value otherwise.
func (o *CategoriesModelSearchV1) GetVotes() int64 {
	if o == nil || IsNil(o.Votes) {
		var ret int64
		return ret
	}
	return *o.Votes
}

// GetVotesOk returns a tuple with the Votes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoriesModelSearchV1) GetVotesOk() (*int64, bool) {
	if o == nil || IsNil(o.Votes) {
		return nil, false
	}
	return o.Votes, true
}

// HasVotes returns a boolean if a field has been set.
func (o *CategoriesModelSearchV1) HasVotes() bool {
	if o != nil && !IsNil(o.Votes) {
		return true
	}

	return false
}

// SetVotes gets a reference to the given int64 and assigns it to the Votes field.
func (o *CategoriesModelSearchV1) SetVotes(v int64) {
	o.Votes = &v
}

// GetVotesPlus returns the VotesPlus field value if set, zero value otherwise.
func (o *CategoriesModelSearchV1) GetVotesPlus() int64 {
	if o == nil || IsNil(o.VotesPlus) {
		var ret int64
		return ret
	}
	return *o.VotesPlus
}

// GetVotesPlusOk returns a tuple with the VotesPlus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoriesModelSearchV1) GetVotesPlusOk() (*int64, bool) {
	if o == nil || IsNil(o.VotesPlus) {
		return nil, false
	}
	return o.VotesPlus, true
}

// HasVotesPlus returns a boolean if a field has been set.
func (o *CategoriesModelSearchV1) HasVotesPlus() bool {
	if o != nil && !IsNil(o.VotesPlus) {
		return true
	}

	return false
}

// SetVotesPlus gets a reference to the given int64 and assigns it to the VotesPlus field.
func (o *CategoriesModelSearchV1) SetVotesPlus(v int64) {
	o.VotesPlus = &v
}

// GetVotesMinus returns the VotesMinus field value if set, zero value otherwise.
func (o *CategoriesModelSearchV1) GetVotesMinus() int64 {
	if o == nil || IsNil(o.VotesMinus) {
		var ret int64
		return ret
	}
	return *o.VotesMinus
}

// GetVotesMinusOk returns a tuple with the VotesMinus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CategoriesModelSearchV1) GetVotesMinusOk() (*int64, bool) {
	if o == nil || IsNil(o.VotesMinus) {
		return nil, false
	}
	return o.VotesMinus, true
}

// HasVotesMinus returns a boolean if a field has been set.
func (o *CategoriesModelSearchV1) HasVotesMinus() bool {
	if o != nil && !IsNil(o.VotesMinus) {
		return true
	}

	return false
}

// SetVotesMinus gets a reference to the given int64 and assigns it to the VotesMinus field.
func (o *CategoriesModelSearchV1) SetVotesMinus(v int64) {
	o.VotesMinus = &v
}

func (o CategoriesModelSearchV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CategoriesModelSearchV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	if !IsNil(o.Votes) {
		toSerialize["votes"] = o.Votes
	}
	if !IsNil(o.VotesPlus) {
		toSerialize["votes_plus"] = o.VotesPlus
	}
	if !IsNil(o.VotesMinus) {
		toSerialize["votes_minus"] = o.VotesMinus
	}
	return toSerialize, nil
}

type NullableCategoriesModelSearchV1 struct {
	value *CategoriesModelSearchV1
	isSet bool
}

func (v NullableCategoriesModelSearchV1) Get() *CategoriesModelSearchV1 {
	return v.value
}

func (v *NullableCategoriesModelSearchV1) Set(val *CategoriesModelSearchV1) {
	v.value = val
	v.isSet = true
}

func (v NullableCategoriesModelSearchV1) IsSet() bool {
	return v.isSet
}

func (v *NullableCategoriesModelSearchV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategoriesModelSearchV1(val *CategoriesModelSearchV1) *NullableCategoriesModelSearchV1 {
	return &NullableCategoriesModelSearchV1{value: val, isSet: true}
}

func (v NullableCategoriesModelSearchV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategoriesModelSearchV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
