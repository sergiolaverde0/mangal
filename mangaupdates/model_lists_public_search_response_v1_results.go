/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ListsPublicSearchResponseV1Results type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListsPublicSearchResponseV1Results{}

// ListsPublicSearchResponseV1Results struct for ListsPublicSearchResponseV1Results
type ListsPublicSearchResponseV1Results struct {
	SeriesId    *int64                                      `json:"series_id,omitempty"`
	SeriesTitle *string                                     `json:"series_title,omitempty"`
	Volume      *int64                                      `json:"volume,omitempty"`
	Chapter     *int64                                      `json:"chapter,omitempty"`
	Metadata    *ListsPublicSearchResponseV1ResultsMetadata `json:"metadata,omitempty"`
}

// NewListsPublicSearchResponseV1Results instantiates a new ListsPublicSearchResponseV1Results object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListsPublicSearchResponseV1Results() *ListsPublicSearchResponseV1Results {
	this := ListsPublicSearchResponseV1Results{}
	return &this
}

// NewListsPublicSearchResponseV1ResultsWithDefaults instantiates a new ListsPublicSearchResponseV1Results object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListsPublicSearchResponseV1ResultsWithDefaults() *ListsPublicSearchResponseV1Results {
	this := ListsPublicSearchResponseV1Results{}
	return &this
}

// GetSeriesId returns the SeriesId field value if set, zero value otherwise.
func (o *ListsPublicSearchResponseV1Results) GetSeriesId() int64 {
	if o == nil || IsNil(o.SeriesId) {
		var ret int64
		return ret
	}
	return *o.SeriesId
}

// GetSeriesIdOk returns a tuple with the SeriesId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListsPublicSearchResponseV1Results) GetSeriesIdOk() (*int64, bool) {
	if o == nil || IsNil(o.SeriesId) {
		return nil, false
	}
	return o.SeriesId, true
}

// HasSeriesId returns a boolean if a field has been set.
func (o *ListsPublicSearchResponseV1Results) HasSeriesId() bool {
	if o != nil && !IsNil(o.SeriesId) {
		return true
	}

	return false
}

// SetSeriesId gets a reference to the given int64 and assigns it to the SeriesId field.
func (o *ListsPublicSearchResponseV1Results) SetSeriesId(v int64) {
	o.SeriesId = &v
}

// GetSeriesTitle returns the SeriesTitle field value if set, zero value otherwise.
func (o *ListsPublicSearchResponseV1Results) GetSeriesTitle() string {
	if o == nil || IsNil(o.SeriesTitle) {
		var ret string
		return ret
	}
	return *o.SeriesTitle
}

// GetSeriesTitleOk returns a tuple with the SeriesTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListsPublicSearchResponseV1Results) GetSeriesTitleOk() (*string, bool) {
	if o == nil || IsNil(o.SeriesTitle) {
		return nil, false
	}
	return o.SeriesTitle, true
}

// HasSeriesTitle returns a boolean if a field has been set.
func (o *ListsPublicSearchResponseV1Results) HasSeriesTitle() bool {
	if o != nil && !IsNil(o.SeriesTitle) {
		return true
	}

	return false
}

// SetSeriesTitle gets a reference to the given string and assigns it to the SeriesTitle field.
func (o *ListsPublicSearchResponseV1Results) SetSeriesTitle(v string) {
	o.SeriesTitle = &v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *ListsPublicSearchResponseV1Results) GetVolume() int64 {
	if o == nil || IsNil(o.Volume) {
		var ret int64
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListsPublicSearchResponseV1Results) GetVolumeOk() (*int64, bool) {
	if o == nil || IsNil(o.Volume) {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *ListsPublicSearchResponseV1Results) HasVolume() bool {
	if o != nil && !IsNil(o.Volume) {
		return true
	}

	return false
}

// SetVolume gets a reference to the given int64 and assigns it to the Volume field.
func (o *ListsPublicSearchResponseV1Results) SetVolume(v int64) {
	o.Volume = &v
}

// GetChapter returns the Chapter field value if set, zero value otherwise.
func (o *ListsPublicSearchResponseV1Results) GetChapter() int64 {
	if o == nil || IsNil(o.Chapter) {
		var ret int64
		return ret
	}
	return *o.Chapter
}

// GetChapterOk returns a tuple with the Chapter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListsPublicSearchResponseV1Results) GetChapterOk() (*int64, bool) {
	if o == nil || IsNil(o.Chapter) {
		return nil, false
	}
	return o.Chapter, true
}

// HasChapter returns a boolean if a field has been set.
func (o *ListsPublicSearchResponseV1Results) HasChapter() bool {
	if o != nil && !IsNil(o.Chapter) {
		return true
	}

	return false
}

// SetChapter gets a reference to the given int64 and assigns it to the Chapter field.
func (o *ListsPublicSearchResponseV1Results) SetChapter(v int64) {
	o.Chapter = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ListsPublicSearchResponseV1Results) GetMetadata() ListsPublicSearchResponseV1ResultsMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret ListsPublicSearchResponseV1ResultsMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListsPublicSearchResponseV1Results) GetMetadataOk() (*ListsPublicSearchResponseV1ResultsMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ListsPublicSearchResponseV1Results) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ListsPublicSearchResponseV1ResultsMetadata and assigns it to the Metadata field.
func (o *ListsPublicSearchResponseV1Results) SetMetadata(v ListsPublicSearchResponseV1ResultsMetadata) {
	o.Metadata = &v
}

func (o ListsPublicSearchResponseV1Results) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListsPublicSearchResponseV1Results) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SeriesId) {
		toSerialize["series_id"] = o.SeriesId
	}
	if !IsNil(o.SeriesTitle) {
		toSerialize["series_title"] = o.SeriesTitle
	}
	if !IsNil(o.Volume) {
		toSerialize["volume"] = o.Volume
	}
	if !IsNil(o.Chapter) {
		toSerialize["chapter"] = o.Chapter
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableListsPublicSearchResponseV1Results struct {
	value *ListsPublicSearchResponseV1Results
	isSet bool
}

func (v NullableListsPublicSearchResponseV1Results) Get() *ListsPublicSearchResponseV1Results {
	return v.value
}

func (v *NullableListsPublicSearchResponseV1Results) Set(val *ListsPublicSearchResponseV1Results) {
	v.value = val
	v.isSet = true
}

func (v NullableListsPublicSearchResponseV1Results) IsSet() bool {
	return v.isSet
}

func (v *NullableListsPublicSearchResponseV1Results) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListsPublicSearchResponseV1Results(val *ListsPublicSearchResponseV1Results) *NullableListsPublicSearchResponseV1Results {
	return &NullableListsPublicSearchResponseV1Results{value: val, isSet: true}
}

func (v NullableListsPublicSearchResponseV1Results) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListsPublicSearchResponseV1Results) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
