/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReleaseSearchResponseV1ResultsMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReleaseSearchResponseV1ResultsMetadata{}

// ReleaseSearchResponseV1ResultsMetadata struct for ReleaseSearchResponseV1ResultsMetadata
type ReleaseSearchResponseV1ResultsMetadata struct {
	Series *SeriesModelSearchV1 `json:"series,omitempty"`
	UserList *ListsSeriesModelV1 `json:"user_list,omitempty"`
	UserGenreHighlights []ReleaseSearchResponseV1ResultsMetadataUserGenreHighlights `json:"user_genre_highlights,omitempty"`
	UserGenreFilters []string `json:"user_genre_filters,omitempty"`
	UserGroupFilters []string `json:"user_group_filters,omitempty"`
	TypeFilter *string `json:"type_filter,omitempty"`
}

// NewReleaseSearchResponseV1ResultsMetadata instantiates a new ReleaseSearchResponseV1ResultsMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleaseSearchResponseV1ResultsMetadata() *ReleaseSearchResponseV1ResultsMetadata {
	this := ReleaseSearchResponseV1ResultsMetadata{}
	return &this
}

// NewReleaseSearchResponseV1ResultsMetadataWithDefaults instantiates a new ReleaseSearchResponseV1ResultsMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseSearchResponseV1ResultsMetadataWithDefaults() *ReleaseSearchResponseV1ResultsMetadata {
	this := ReleaseSearchResponseV1ResultsMetadata{}
	return &this
}

// GetSeries returns the Series field value if set, zero value otherwise.
func (o *ReleaseSearchResponseV1ResultsMetadata) GetSeries() SeriesModelSearchV1 {
	if o == nil || IsNil(o.Series) {
		var ret SeriesModelSearchV1
		return ret
	}
	return *o.Series
}

// GetSeriesOk returns a tuple with the Series field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseSearchResponseV1ResultsMetadata) GetSeriesOk() (*SeriesModelSearchV1, bool) {
	if o == nil || IsNil(o.Series) {
		return nil, false
	}
	return o.Series, true
}

// HasSeries returns a boolean if a field has been set.
func (o *ReleaseSearchResponseV1ResultsMetadata) HasSeries() bool {
	if o != nil && !IsNil(o.Series) {
		return true
	}

	return false
}

// SetSeries gets a reference to the given SeriesModelSearchV1 and assigns it to the Series field.
func (o *ReleaseSearchResponseV1ResultsMetadata) SetSeries(v SeriesModelSearchV1) {
	o.Series = &v
}

// GetUserList returns the UserList field value if set, zero value otherwise.
func (o *ReleaseSearchResponseV1ResultsMetadata) GetUserList() ListsSeriesModelV1 {
	if o == nil || IsNil(o.UserList) {
		var ret ListsSeriesModelV1
		return ret
	}
	return *o.UserList
}

// GetUserListOk returns a tuple with the UserList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseSearchResponseV1ResultsMetadata) GetUserListOk() (*ListsSeriesModelV1, bool) {
	if o == nil || IsNil(o.UserList) {
		return nil, false
	}
	return o.UserList, true
}

// HasUserList returns a boolean if a field has been set.
func (o *ReleaseSearchResponseV1ResultsMetadata) HasUserList() bool {
	if o != nil && !IsNil(o.UserList) {
		return true
	}

	return false
}

// SetUserList gets a reference to the given ListsSeriesModelV1 and assigns it to the UserList field.
func (o *ReleaseSearchResponseV1ResultsMetadata) SetUserList(v ListsSeriesModelV1) {
	o.UserList = &v
}

// GetUserGenreHighlights returns the UserGenreHighlights field value if set, zero value otherwise.
func (o *ReleaseSearchResponseV1ResultsMetadata) GetUserGenreHighlights() []ReleaseSearchResponseV1ResultsMetadataUserGenreHighlights {
	if o == nil || IsNil(o.UserGenreHighlights) {
		var ret []ReleaseSearchResponseV1ResultsMetadataUserGenreHighlights
		return ret
	}
	return o.UserGenreHighlights
}

// GetUserGenreHighlightsOk returns a tuple with the UserGenreHighlights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseSearchResponseV1ResultsMetadata) GetUserGenreHighlightsOk() ([]ReleaseSearchResponseV1ResultsMetadataUserGenreHighlights, bool) {
	if o == nil || IsNil(o.UserGenreHighlights) {
		return nil, false
	}
	return o.UserGenreHighlights, true
}

// HasUserGenreHighlights returns a boolean if a field has been set.
func (o *ReleaseSearchResponseV1ResultsMetadata) HasUserGenreHighlights() bool {
	if o != nil && !IsNil(o.UserGenreHighlights) {
		return true
	}

	return false
}

// SetUserGenreHighlights gets a reference to the given []ReleaseSearchResponseV1ResultsMetadataUserGenreHighlights and assigns it to the UserGenreHighlights field.
func (o *ReleaseSearchResponseV1ResultsMetadata) SetUserGenreHighlights(v []ReleaseSearchResponseV1ResultsMetadataUserGenreHighlights) {
	o.UserGenreHighlights = v
}

// GetUserGenreFilters returns the UserGenreFilters field value if set, zero value otherwise.
func (o *ReleaseSearchResponseV1ResultsMetadata) GetUserGenreFilters() []string {
	if o == nil || IsNil(o.UserGenreFilters) {
		var ret []string
		return ret
	}
	return o.UserGenreFilters
}

// GetUserGenreFiltersOk returns a tuple with the UserGenreFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseSearchResponseV1ResultsMetadata) GetUserGenreFiltersOk() ([]string, bool) {
	if o == nil || IsNil(o.UserGenreFilters) {
		return nil, false
	}
	return o.UserGenreFilters, true
}

// HasUserGenreFilters returns a boolean if a field has been set.
func (o *ReleaseSearchResponseV1ResultsMetadata) HasUserGenreFilters() bool {
	if o != nil && !IsNil(o.UserGenreFilters) {
		return true
	}

	return false
}

// SetUserGenreFilters gets a reference to the given []string and assigns it to the UserGenreFilters field.
func (o *ReleaseSearchResponseV1ResultsMetadata) SetUserGenreFilters(v []string) {
	o.UserGenreFilters = v
}

// GetUserGroupFilters returns the UserGroupFilters field value if set, zero value otherwise.
func (o *ReleaseSearchResponseV1ResultsMetadata) GetUserGroupFilters() []string {
	if o == nil || IsNil(o.UserGroupFilters) {
		var ret []string
		return ret
	}
	return o.UserGroupFilters
}

// GetUserGroupFiltersOk returns a tuple with the UserGroupFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseSearchResponseV1ResultsMetadata) GetUserGroupFiltersOk() ([]string, bool) {
	if o == nil || IsNil(o.UserGroupFilters) {
		return nil, false
	}
	return o.UserGroupFilters, true
}

// HasUserGroupFilters returns a boolean if a field has been set.
func (o *ReleaseSearchResponseV1ResultsMetadata) HasUserGroupFilters() bool {
	if o != nil && !IsNil(o.UserGroupFilters) {
		return true
	}

	return false
}

// SetUserGroupFilters gets a reference to the given []string and assigns it to the UserGroupFilters field.
func (o *ReleaseSearchResponseV1ResultsMetadata) SetUserGroupFilters(v []string) {
	o.UserGroupFilters = v
}

// GetTypeFilter returns the TypeFilter field value if set, zero value otherwise.
func (o *ReleaseSearchResponseV1ResultsMetadata) GetTypeFilter() string {
	if o == nil || IsNil(o.TypeFilter) {
		var ret string
		return ret
	}
	return *o.TypeFilter
}

// GetTypeFilterOk returns a tuple with the TypeFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseSearchResponseV1ResultsMetadata) GetTypeFilterOk() (*string, bool) {
	if o == nil || IsNil(o.TypeFilter) {
		return nil, false
	}
	return o.TypeFilter, true
}

// HasTypeFilter returns a boolean if a field has been set.
func (o *ReleaseSearchResponseV1ResultsMetadata) HasTypeFilter() bool {
	if o != nil && !IsNil(o.TypeFilter) {
		return true
	}

	return false
}

// SetTypeFilter gets a reference to the given string and assigns it to the TypeFilter field.
func (o *ReleaseSearchResponseV1ResultsMetadata) SetTypeFilter(v string) {
	o.TypeFilter = &v
}

func (o ReleaseSearchResponseV1ResultsMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReleaseSearchResponseV1ResultsMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Series) {
		toSerialize["series"] = o.Series
	}
	if !IsNil(o.UserList) {
		toSerialize["user_list"] = o.UserList
	}
	if !IsNil(o.UserGenreHighlights) {
		toSerialize["user_genre_highlights"] = o.UserGenreHighlights
	}
	if !IsNil(o.UserGenreFilters) {
		toSerialize["user_genre_filters"] = o.UserGenreFilters
	}
	if !IsNil(o.UserGroupFilters) {
		toSerialize["user_group_filters"] = o.UserGroupFilters
	}
	if !IsNil(o.TypeFilter) {
		toSerialize["type_filter"] = o.TypeFilter
	}
	return toSerialize, nil
}

type NullableReleaseSearchResponseV1ResultsMetadata struct {
	value *ReleaseSearchResponseV1ResultsMetadata
	isSet bool
}

func (v NullableReleaseSearchResponseV1ResultsMetadata) Get() *ReleaseSearchResponseV1ResultsMetadata {
	return v.value
}

func (v *NullableReleaseSearchResponseV1ResultsMetadata) Set(val *ReleaseSearchResponseV1ResultsMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseSearchResponseV1ResultsMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseSearchResponseV1ResultsMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseSearchResponseV1ResultsMetadata(val *ReleaseSearchResponseV1ResultsMetadata) *NullableReleaseSearchResponseV1ResultsMetadata {
	return &NullableReleaseSearchResponseV1ResultsMetadata{value: val, isSet: true}
}

func (v NullableReleaseSearchResponseV1ResultsMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseSearchResponseV1ResultsMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


