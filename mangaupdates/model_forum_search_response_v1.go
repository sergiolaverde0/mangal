/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ForumSearchResponseV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForumSearchResponseV1{}

// ForumSearchResponseV1 struct for ForumSearchResponseV1
type ForumSearchResponseV1 struct {
	TotalHits    *int64                              `json:"total_hits,omitempty"`
	Page         *int64                              `json:"page,omitempty"`
	PerPage      *int64                              `json:"per_page,omitempty"`
	TopicResults []ForumSearchResponseV1TopicResults `json:"topic_results,omitempty"`
	PostResults  []ForumSearchResponseV1PostResults  `json:"post_results,omitempty"`
}

// NewForumSearchResponseV1 instantiates a new ForumSearchResponseV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForumSearchResponseV1() *ForumSearchResponseV1 {
	this := ForumSearchResponseV1{}
	return &this
}

// NewForumSearchResponseV1WithDefaults instantiates a new ForumSearchResponseV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForumSearchResponseV1WithDefaults() *ForumSearchResponseV1 {
	this := ForumSearchResponseV1{}
	return &this
}

// GetTotalHits returns the TotalHits field value if set, zero value otherwise.
func (o *ForumSearchResponseV1) GetTotalHits() int64 {
	if o == nil || IsNil(o.TotalHits) {
		var ret int64
		return ret
	}
	return *o.TotalHits
}

// GetTotalHitsOk returns a tuple with the TotalHits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumSearchResponseV1) GetTotalHitsOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalHits) {
		return nil, false
	}
	return o.TotalHits, true
}

// HasTotalHits returns a boolean if a field has been set.
func (o *ForumSearchResponseV1) HasTotalHits() bool {
	if o != nil && !IsNil(o.TotalHits) {
		return true
	}

	return false
}

// SetTotalHits gets a reference to the given int64 and assigns it to the TotalHits field.
func (o *ForumSearchResponseV1) SetTotalHits(v int64) {
	o.TotalHits = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *ForumSearchResponseV1) GetPage() int64 {
	if o == nil || IsNil(o.Page) {
		var ret int64
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumSearchResponseV1) GetPageOk() (*int64, bool) {
	if o == nil || IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *ForumSearchResponseV1) HasPage() bool {
	if o != nil && !IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given int64 and assigns it to the Page field.
func (o *ForumSearchResponseV1) SetPage(v int64) {
	o.Page = &v
}

// GetPerPage returns the PerPage field value if set, zero value otherwise.
func (o *ForumSearchResponseV1) GetPerPage() int64 {
	if o == nil || IsNil(o.PerPage) {
		var ret int64
		return ret
	}
	return *o.PerPage
}

// GetPerPageOk returns a tuple with the PerPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumSearchResponseV1) GetPerPageOk() (*int64, bool) {
	if o == nil || IsNil(o.PerPage) {
		return nil, false
	}
	return o.PerPage, true
}

// HasPerPage returns a boolean if a field has been set.
func (o *ForumSearchResponseV1) HasPerPage() bool {
	if o != nil && !IsNil(o.PerPage) {
		return true
	}

	return false
}

// SetPerPage gets a reference to the given int64 and assigns it to the PerPage field.
func (o *ForumSearchResponseV1) SetPerPage(v int64) {
	o.PerPage = &v
}

// GetTopicResults returns the TopicResults field value if set, zero value otherwise.
func (o *ForumSearchResponseV1) GetTopicResults() []ForumSearchResponseV1TopicResults {
	if o == nil || IsNil(o.TopicResults) {
		var ret []ForumSearchResponseV1TopicResults
		return ret
	}
	return o.TopicResults
}

// GetTopicResultsOk returns a tuple with the TopicResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumSearchResponseV1) GetTopicResultsOk() ([]ForumSearchResponseV1TopicResults, bool) {
	if o == nil || IsNil(o.TopicResults) {
		return nil, false
	}
	return o.TopicResults, true
}

// HasTopicResults returns a boolean if a field has been set.
func (o *ForumSearchResponseV1) HasTopicResults() bool {
	if o != nil && !IsNil(o.TopicResults) {
		return true
	}

	return false
}

// SetTopicResults gets a reference to the given []ForumSearchResponseV1TopicResults and assigns it to the TopicResults field.
func (o *ForumSearchResponseV1) SetTopicResults(v []ForumSearchResponseV1TopicResults) {
	o.TopicResults = v
}

// GetPostResults returns the PostResults field value if set, zero value otherwise.
func (o *ForumSearchResponseV1) GetPostResults() []ForumSearchResponseV1PostResults {
	if o == nil || IsNil(o.PostResults) {
		var ret []ForumSearchResponseV1PostResults
		return ret
	}
	return o.PostResults
}

// GetPostResultsOk returns a tuple with the PostResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumSearchResponseV1) GetPostResultsOk() ([]ForumSearchResponseV1PostResults, bool) {
	if o == nil || IsNil(o.PostResults) {
		return nil, false
	}
	return o.PostResults, true
}

// HasPostResults returns a boolean if a field has been set.
func (o *ForumSearchResponseV1) HasPostResults() bool {
	if o != nil && !IsNil(o.PostResults) {
		return true
	}

	return false
}

// SetPostResults gets a reference to the given []ForumSearchResponseV1PostResults and assigns it to the PostResults field.
func (o *ForumSearchResponseV1) SetPostResults(v []ForumSearchResponseV1PostResults) {
	o.PostResults = v
}

func (o ForumSearchResponseV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForumSearchResponseV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TotalHits) {
		toSerialize["total_hits"] = o.TotalHits
	}
	if !IsNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	if !IsNil(o.PerPage) {
		toSerialize["per_page"] = o.PerPage
	}
	if !IsNil(o.TopicResults) {
		toSerialize["topic_results"] = o.TopicResults
	}
	if !IsNil(o.PostResults) {
		toSerialize["post_results"] = o.PostResults
	}
	return toSerialize, nil
}

type NullableForumSearchResponseV1 struct {
	value *ForumSearchResponseV1
	isSet bool
}

func (v NullableForumSearchResponseV1) Get() *ForumSearchResponseV1 {
	return v.value
}

func (v *NullableForumSearchResponseV1) Set(val *ForumSearchResponseV1) {
	v.value = val
	v.isSet = true
}

func (v NullableForumSearchResponseV1) IsSet() bool {
	return v.isSet
}

func (v *NullableForumSearchResponseV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForumSearchResponseV1(val *ForumSearchResponseV1) *NullableForumSearchResponseV1 {
	return &NullableForumSearchResponseV1{value: val, isSet: true}
}

func (v NullableForumSearchResponseV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForumSearchResponseV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
