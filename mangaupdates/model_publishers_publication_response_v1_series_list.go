/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PublishersPublicationResponseV1SeriesList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublishersPublicationResponseV1SeriesList{}

// PublishersPublicationResponseV1SeriesList struct for PublishersPublicationResponseV1SeriesList
type PublishersPublicationResponseV1SeriesList struct {
	Title       *string  `json:"title,omitempty"`
	SeriesId    *int64   `json:"series_id,omitempty"`
	Genres      []string `json:"genres,omitempty"`
	LastUpdated *TimeV1  `json:"last_updated,omitempty"`
}

// NewPublishersPublicationResponseV1SeriesList instantiates a new PublishersPublicationResponseV1SeriesList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublishersPublicationResponseV1SeriesList() *PublishersPublicationResponseV1SeriesList {
	this := PublishersPublicationResponseV1SeriesList{}
	return &this
}

// NewPublishersPublicationResponseV1SeriesListWithDefaults instantiates a new PublishersPublicationResponseV1SeriesList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublishersPublicationResponseV1SeriesListWithDefaults() *PublishersPublicationResponseV1SeriesList {
	this := PublishersPublicationResponseV1SeriesList{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *PublishersPublicationResponseV1SeriesList) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishersPublicationResponseV1SeriesList) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *PublishersPublicationResponseV1SeriesList) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *PublishersPublicationResponseV1SeriesList) SetTitle(v string) {
	o.Title = &v
}

// GetSeriesId returns the SeriesId field value if set, zero value otherwise.
func (o *PublishersPublicationResponseV1SeriesList) GetSeriesId() int64 {
	if o == nil || IsNil(o.SeriesId) {
		var ret int64
		return ret
	}
	return *o.SeriesId
}

// GetSeriesIdOk returns a tuple with the SeriesId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishersPublicationResponseV1SeriesList) GetSeriesIdOk() (*int64, bool) {
	if o == nil || IsNil(o.SeriesId) {
		return nil, false
	}
	return o.SeriesId, true
}

// HasSeriesId returns a boolean if a field has been set.
func (o *PublishersPublicationResponseV1SeriesList) HasSeriesId() bool {
	if o != nil && !IsNil(o.SeriesId) {
		return true
	}

	return false
}

// SetSeriesId gets a reference to the given int64 and assigns it to the SeriesId field.
func (o *PublishersPublicationResponseV1SeriesList) SetSeriesId(v int64) {
	o.SeriesId = &v
}

// GetGenres returns the Genres field value if set, zero value otherwise.
func (o *PublishersPublicationResponseV1SeriesList) GetGenres() []string {
	if o == nil || IsNil(o.Genres) {
		var ret []string
		return ret
	}
	return o.Genres
}

// GetGenresOk returns a tuple with the Genres field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishersPublicationResponseV1SeriesList) GetGenresOk() ([]string, bool) {
	if o == nil || IsNil(o.Genres) {
		return nil, false
	}
	return o.Genres, true
}

// HasGenres returns a boolean if a field has been set.
func (o *PublishersPublicationResponseV1SeriesList) HasGenres() bool {
	if o != nil && !IsNil(o.Genres) {
		return true
	}

	return false
}

// SetGenres gets a reference to the given []string and assigns it to the Genres field.
func (o *PublishersPublicationResponseV1SeriesList) SetGenres(v []string) {
	o.Genres = v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *PublishersPublicationResponseV1SeriesList) GetLastUpdated() TimeV1 {
	if o == nil || IsNil(o.LastUpdated) {
		var ret TimeV1
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishersPublicationResponseV1SeriesList) GetLastUpdatedOk() (*TimeV1, bool) {
	if o == nil || IsNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *PublishersPublicationResponseV1SeriesList) HasLastUpdated() bool {
	if o != nil && !IsNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given TimeV1 and assigns it to the LastUpdated field.
func (o *PublishersPublicationResponseV1SeriesList) SetLastUpdated(v TimeV1) {
	o.LastUpdated = &v
}

func (o PublishersPublicationResponseV1SeriesList) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublishersPublicationResponseV1SeriesList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.SeriesId) {
		toSerialize["series_id"] = o.SeriesId
	}
	if !IsNil(o.Genres) {
		toSerialize["genres"] = o.Genres
	}
	if !IsNil(o.LastUpdated) {
		toSerialize["last_updated"] = o.LastUpdated
	}
	return toSerialize, nil
}

type NullablePublishersPublicationResponseV1SeriesList struct {
	value *PublishersPublicationResponseV1SeriesList
	isSet bool
}

func (v NullablePublishersPublicationResponseV1SeriesList) Get() *PublishersPublicationResponseV1SeriesList {
	return v.value
}

func (v *NullablePublishersPublicationResponseV1SeriesList) Set(val *PublishersPublicationResponseV1SeriesList) {
	v.value = val
	v.isSet = true
}

func (v NullablePublishersPublicationResponseV1SeriesList) IsSet() bool {
	return v.isSet
}

func (v *NullablePublishersPublicationResponseV1SeriesList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublishersPublicationResponseV1SeriesList(val *PublishersPublicationResponseV1SeriesList) *NullablePublishersPublicationResponseV1SeriesList {
	return &NullablePublishersPublicationResponseV1SeriesList{value: val, isSet: true}
}

func (v NullablePublishersPublicationResponseV1SeriesList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublishersPublicationResponseV1SeriesList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
