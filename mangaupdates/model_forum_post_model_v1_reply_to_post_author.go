/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ForumPostModelV1ReplyToPostAuthor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForumPostModelV1ReplyToPostAuthor{}

// ForumPostModelV1ReplyToPostAuthor struct for ForumPostModelV1ReplyToPostAuthor
type ForumPostModelV1ReplyToPostAuthor struct {
	AuthorId   *int64  `json:"author_id,omitempty"`
	AuthorName *string `json:"author_name,omitempty"`
}

// NewForumPostModelV1ReplyToPostAuthor instantiates a new ForumPostModelV1ReplyToPostAuthor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForumPostModelV1ReplyToPostAuthor() *ForumPostModelV1ReplyToPostAuthor {
	this := ForumPostModelV1ReplyToPostAuthor{}
	return &this
}

// NewForumPostModelV1ReplyToPostAuthorWithDefaults instantiates a new ForumPostModelV1ReplyToPostAuthor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForumPostModelV1ReplyToPostAuthorWithDefaults() *ForumPostModelV1ReplyToPostAuthor {
	this := ForumPostModelV1ReplyToPostAuthor{}
	return &this
}

// GetAuthorId returns the AuthorId field value if set, zero value otherwise.
func (o *ForumPostModelV1ReplyToPostAuthor) GetAuthorId() int64 {
	if o == nil || IsNil(o.AuthorId) {
		var ret int64
		return ret
	}
	return *o.AuthorId
}

// GetAuthorIdOk returns a tuple with the AuthorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumPostModelV1ReplyToPostAuthor) GetAuthorIdOk() (*int64, bool) {
	if o == nil || IsNil(o.AuthorId) {
		return nil, false
	}
	return o.AuthorId, true
}

// HasAuthorId returns a boolean if a field has been set.
func (o *ForumPostModelV1ReplyToPostAuthor) HasAuthorId() bool {
	if o != nil && !IsNil(o.AuthorId) {
		return true
	}

	return false
}

// SetAuthorId gets a reference to the given int64 and assigns it to the AuthorId field.
func (o *ForumPostModelV1ReplyToPostAuthor) SetAuthorId(v int64) {
	o.AuthorId = &v
}

// GetAuthorName returns the AuthorName field value if set, zero value otherwise.
func (o *ForumPostModelV1ReplyToPostAuthor) GetAuthorName() string {
	if o == nil || IsNil(o.AuthorName) {
		var ret string
		return ret
	}
	return *o.AuthorName
}

// GetAuthorNameOk returns a tuple with the AuthorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumPostModelV1ReplyToPostAuthor) GetAuthorNameOk() (*string, bool) {
	if o == nil || IsNil(o.AuthorName) {
		return nil, false
	}
	return o.AuthorName, true
}

// HasAuthorName returns a boolean if a field has been set.
func (o *ForumPostModelV1ReplyToPostAuthor) HasAuthorName() bool {
	if o != nil && !IsNil(o.AuthorName) {
		return true
	}

	return false
}

// SetAuthorName gets a reference to the given string and assigns it to the AuthorName field.
func (o *ForumPostModelV1ReplyToPostAuthor) SetAuthorName(v string) {
	o.AuthorName = &v
}

func (o ForumPostModelV1ReplyToPostAuthor) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForumPostModelV1ReplyToPostAuthor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthorId) {
		toSerialize["author_id"] = o.AuthorId
	}
	if !IsNil(o.AuthorName) {
		toSerialize["author_name"] = o.AuthorName
	}
	return toSerialize, nil
}

type NullableForumPostModelV1ReplyToPostAuthor struct {
	value *ForumPostModelV1ReplyToPostAuthor
	isSet bool
}

func (v NullableForumPostModelV1ReplyToPostAuthor) Get() *ForumPostModelV1ReplyToPostAuthor {
	return v.value
}

func (v *NullableForumPostModelV1ReplyToPostAuthor) Set(val *ForumPostModelV1ReplyToPostAuthor) {
	v.value = val
	v.isSet = true
}

func (v NullableForumPostModelV1ReplyToPostAuthor) IsSet() bool {
	return v.isSet
}

func (v *NullableForumPostModelV1ReplyToPostAuthor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForumPostModelV1ReplyToPostAuthor(val *ForumPostModelV1ReplyToPostAuthor) *NullableForumPostModelV1ReplyToPostAuthor {
	return &NullableForumPostModelV1ReplyToPostAuthor{value: val, isSet: true}
}

func (v NullableForumPostModelV1ReplyToPostAuthor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForumPostModelV1ReplyToPostAuthor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
