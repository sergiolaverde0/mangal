/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserModelV1AdminUpgrade type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserModelV1AdminUpgrade{}

// UserModelV1AdminUpgrade struct for UserModelV1AdminUpgrade
type UserModelV1AdminUpgrade struct {
	Banned *bool `json:"banned,omitempty"`
}

// NewUserModelV1AdminUpgrade instantiates a new UserModelV1AdminUpgrade object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserModelV1AdminUpgrade() *UserModelV1AdminUpgrade {
	this := UserModelV1AdminUpgrade{}
	return &this
}

// NewUserModelV1AdminUpgradeWithDefaults instantiates a new UserModelV1AdminUpgrade object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserModelV1AdminUpgradeWithDefaults() *UserModelV1AdminUpgrade {
	this := UserModelV1AdminUpgrade{}
	return &this
}

// GetBanned returns the Banned field value if set, zero value otherwise.
func (o *UserModelV1AdminUpgrade) GetBanned() bool {
	if o == nil || IsNil(o.Banned) {
		var ret bool
		return ret
	}
	return *o.Banned
}

// GetBannedOk returns a tuple with the Banned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelV1AdminUpgrade) GetBannedOk() (*bool, bool) {
	if o == nil || IsNil(o.Banned) {
		return nil, false
	}
	return o.Banned, true
}

// HasBanned returns a boolean if a field has been set.
func (o *UserModelV1AdminUpgrade) HasBanned() bool {
	if o != nil && !IsNil(o.Banned) {
		return true
	}

	return false
}

// SetBanned gets a reference to the given bool and assigns it to the Banned field.
func (o *UserModelV1AdminUpgrade) SetBanned(v bool) {
	o.Banned = &v
}

func (o UserModelV1AdminUpgrade) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserModelV1AdminUpgrade) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Banned) {
		toSerialize["banned"] = o.Banned
	}
	return toSerialize, nil
}

type NullableUserModelV1AdminUpgrade struct {
	value *UserModelV1AdminUpgrade
	isSet bool
}

func (v NullableUserModelV1AdminUpgrade) Get() *UserModelV1AdminUpgrade {
	return v.value
}

func (v *NullableUserModelV1AdminUpgrade) Set(val *UserModelV1AdminUpgrade) {
	v.value = val
	v.isSet = true
}

func (v NullableUserModelV1AdminUpgrade) IsSet() bool {
	return v.isSet
}

func (v *NullableUserModelV1AdminUpgrade) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserModelV1AdminUpgrade(val *UserModelV1AdminUpgrade) *NullableUserModelV1AdminUpgrade {
	return &NullableUserModelV1AdminUpgrade{value: val, isSet: true}
}

func (v NullableUserModelV1AdminUpgrade) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserModelV1AdminUpgrade) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


