/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReleaseModelV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReleaseModelV1{}

// ReleaseModelV1 struct for ReleaseModelV1
type ReleaseModelV1 struct {
	Id            *int64                 `json:"id,omitempty"`
	Title         *string                `json:"title,omitempty"`
	Volume        *string                `json:"volume,omitempty"`
	Chapter       *string                `json:"chapter,omitempty"`
	Groups        []ReleaseModelV1Groups `json:"groups,omitempty"`
	ReleaseDate   *string                `json:"release_date,omitempty"`
	DownloadNotes *string                `json:"download_notes,omitempty"`
	Comment       *string                `json:"comment,omitempty"`
	TimeAdded     *TimeV1                `json:"time_added,omitempty"`
	Admin         *ReleaseModelV1Admin   `json:"admin,omitempty"`
}

// NewReleaseModelV1 instantiates a new ReleaseModelV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleaseModelV1() *ReleaseModelV1 {
	this := ReleaseModelV1{}
	return &this
}

// NewReleaseModelV1WithDefaults instantiates a new ReleaseModelV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseModelV1WithDefaults() *ReleaseModelV1 {
	this := ReleaseModelV1{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ReleaseModelV1) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseModelV1) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ReleaseModelV1) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ReleaseModelV1) SetId(v int64) {
	o.Id = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ReleaseModelV1) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseModelV1) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ReleaseModelV1) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ReleaseModelV1) SetTitle(v string) {
	o.Title = &v
}

// GetVolume returns the Volume field value if set, zero value otherwise.
func (o *ReleaseModelV1) GetVolume() string {
	if o == nil || IsNil(o.Volume) {
		var ret string
		return ret
	}
	return *o.Volume
}

// GetVolumeOk returns a tuple with the Volume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseModelV1) GetVolumeOk() (*string, bool) {
	if o == nil || IsNil(o.Volume) {
		return nil, false
	}
	return o.Volume, true
}

// HasVolume returns a boolean if a field has been set.
func (o *ReleaseModelV1) HasVolume() bool {
	if o != nil && !IsNil(o.Volume) {
		return true
	}

	return false
}

// SetVolume gets a reference to the given string and assigns it to the Volume field.
func (o *ReleaseModelV1) SetVolume(v string) {
	o.Volume = &v
}

// GetChapter returns the Chapter field value if set, zero value otherwise.
func (o *ReleaseModelV1) GetChapter() string {
	if o == nil || IsNil(o.Chapter) {
		var ret string
		return ret
	}
	return *o.Chapter
}

// GetChapterOk returns a tuple with the Chapter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseModelV1) GetChapterOk() (*string, bool) {
	if o == nil || IsNil(o.Chapter) {
		return nil, false
	}
	return o.Chapter, true
}

// HasChapter returns a boolean if a field has been set.
func (o *ReleaseModelV1) HasChapter() bool {
	if o != nil && !IsNil(o.Chapter) {
		return true
	}

	return false
}

// SetChapter gets a reference to the given string and assigns it to the Chapter field.
func (o *ReleaseModelV1) SetChapter(v string) {
	o.Chapter = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *ReleaseModelV1) GetGroups() []ReleaseModelV1Groups {
	if o == nil || IsNil(o.Groups) {
		var ret []ReleaseModelV1Groups
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseModelV1) GetGroupsOk() ([]ReleaseModelV1Groups, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *ReleaseModelV1) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []ReleaseModelV1Groups and assigns it to the Groups field.
func (o *ReleaseModelV1) SetGroups(v []ReleaseModelV1Groups) {
	o.Groups = v
}

// GetReleaseDate returns the ReleaseDate field value if set, zero value otherwise.
func (o *ReleaseModelV1) GetReleaseDate() string {
	if o == nil || IsNil(o.ReleaseDate) {
		var ret string
		return ret
	}
	return *o.ReleaseDate
}

// GetReleaseDateOk returns a tuple with the ReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseModelV1) GetReleaseDateOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseDate) {
		return nil, false
	}
	return o.ReleaseDate, true
}

// HasReleaseDate returns a boolean if a field has been set.
func (o *ReleaseModelV1) HasReleaseDate() bool {
	if o != nil && !IsNil(o.ReleaseDate) {
		return true
	}

	return false
}

// SetReleaseDate gets a reference to the given string and assigns it to the ReleaseDate field.
func (o *ReleaseModelV1) SetReleaseDate(v string) {
	o.ReleaseDate = &v
}

// GetDownloadNotes returns the DownloadNotes field value if set, zero value otherwise.
func (o *ReleaseModelV1) GetDownloadNotes() string {
	if o == nil || IsNil(o.DownloadNotes) {
		var ret string
		return ret
	}
	return *o.DownloadNotes
}

// GetDownloadNotesOk returns a tuple with the DownloadNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseModelV1) GetDownloadNotesOk() (*string, bool) {
	if o == nil || IsNil(o.DownloadNotes) {
		return nil, false
	}
	return o.DownloadNotes, true
}

// HasDownloadNotes returns a boolean if a field has been set.
func (o *ReleaseModelV1) HasDownloadNotes() bool {
	if o != nil && !IsNil(o.DownloadNotes) {
		return true
	}

	return false
}

// SetDownloadNotes gets a reference to the given string and assigns it to the DownloadNotes field.
func (o *ReleaseModelV1) SetDownloadNotes(v string) {
	o.DownloadNotes = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ReleaseModelV1) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseModelV1) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ReleaseModelV1) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *ReleaseModelV1) SetComment(v string) {
	o.Comment = &v
}

// GetTimeAdded returns the TimeAdded field value if set, zero value otherwise.
func (o *ReleaseModelV1) GetTimeAdded() TimeV1 {
	if o == nil || IsNil(o.TimeAdded) {
		var ret TimeV1
		return ret
	}
	return *o.TimeAdded
}

// GetTimeAddedOk returns a tuple with the TimeAdded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseModelV1) GetTimeAddedOk() (*TimeV1, bool) {
	if o == nil || IsNil(o.TimeAdded) {
		return nil, false
	}
	return o.TimeAdded, true
}

// HasTimeAdded returns a boolean if a field has been set.
func (o *ReleaseModelV1) HasTimeAdded() bool {
	if o != nil && !IsNil(o.TimeAdded) {
		return true
	}

	return false
}

// SetTimeAdded gets a reference to the given TimeV1 and assigns it to the TimeAdded field.
func (o *ReleaseModelV1) SetTimeAdded(v TimeV1) {
	o.TimeAdded = &v
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *ReleaseModelV1) GetAdmin() ReleaseModelV1Admin {
	if o == nil || IsNil(o.Admin) {
		var ret ReleaseModelV1Admin
		return ret
	}
	return *o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseModelV1) GetAdminOk() (*ReleaseModelV1Admin, bool) {
	if o == nil || IsNil(o.Admin) {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *ReleaseModelV1) HasAdmin() bool {
	if o != nil && !IsNil(o.Admin) {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given ReleaseModelV1Admin and assigns it to the Admin field.
func (o *ReleaseModelV1) SetAdmin(v ReleaseModelV1Admin) {
	o.Admin = &v
}

func (o ReleaseModelV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReleaseModelV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Volume) {
		toSerialize["volume"] = o.Volume
	}
	if !IsNil(o.Chapter) {
		toSerialize["chapter"] = o.Chapter
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !IsNil(o.ReleaseDate) {
		toSerialize["release_date"] = o.ReleaseDate
	}
	if !IsNil(o.DownloadNotes) {
		toSerialize["download_notes"] = o.DownloadNotes
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.TimeAdded) {
		toSerialize["time_added"] = o.TimeAdded
	}
	if !IsNil(o.Admin) {
		toSerialize["admin"] = o.Admin
	}
	return toSerialize, nil
}

type NullableReleaseModelV1 struct {
	value *ReleaseModelV1
	isSet bool
}

func (v NullableReleaseModelV1) Get() *ReleaseModelV1 {
	return v.value
}

func (v *NullableReleaseModelV1) Set(val *ReleaseModelV1) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseModelV1) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseModelV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseModelV1(val *ReleaseModelV1) *NullableReleaseModelV1 {
	return &NullableReleaseModelV1{value: val, isSet: true}
}

func (v NullableReleaseModelV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseModelV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
