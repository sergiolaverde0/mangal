/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReviewCommentModelUpdateV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReviewCommentModelUpdateV1{}

// ReviewCommentModelUpdateV1 struct for ReviewCommentModelUpdateV1
type ReviewCommentModelUpdateV1 struct {
	Subject *string `json:"subject,omitempty"`
	Content *string `json:"content,omitempty"`
	Rating *float32 `json:"rating,omitempty"`
	Admin *ReviewCommentModelUpdateV1Admin `json:"admin,omitempty"`
}

// NewReviewCommentModelUpdateV1 instantiates a new ReviewCommentModelUpdateV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReviewCommentModelUpdateV1() *ReviewCommentModelUpdateV1 {
	this := ReviewCommentModelUpdateV1{}
	return &this
}

// NewReviewCommentModelUpdateV1WithDefaults instantiates a new ReviewCommentModelUpdateV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReviewCommentModelUpdateV1WithDefaults() *ReviewCommentModelUpdateV1 {
	this := ReviewCommentModelUpdateV1{}
	return &this
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *ReviewCommentModelUpdateV1) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewCommentModelUpdateV1) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *ReviewCommentModelUpdateV1) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *ReviewCommentModelUpdateV1) SetSubject(v string) {
	o.Subject = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *ReviewCommentModelUpdateV1) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewCommentModelUpdateV1) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *ReviewCommentModelUpdateV1) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *ReviewCommentModelUpdateV1) SetContent(v string) {
	o.Content = &v
}

// GetRating returns the Rating field value if set, zero value otherwise.
func (o *ReviewCommentModelUpdateV1) GetRating() float32 {
	if o == nil || IsNil(o.Rating) {
		var ret float32
		return ret
	}
	return *o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewCommentModelUpdateV1) GetRatingOk() (*float32, bool) {
	if o == nil || IsNil(o.Rating) {
		return nil, false
	}
	return o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *ReviewCommentModelUpdateV1) HasRating() bool {
	if o != nil && !IsNil(o.Rating) {
		return true
	}

	return false
}

// SetRating gets a reference to the given float32 and assigns it to the Rating field.
func (o *ReviewCommentModelUpdateV1) SetRating(v float32) {
	o.Rating = &v
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *ReviewCommentModelUpdateV1) GetAdmin() ReviewCommentModelUpdateV1Admin {
	if o == nil || IsNil(o.Admin) {
		var ret ReviewCommentModelUpdateV1Admin
		return ret
	}
	return *o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewCommentModelUpdateV1) GetAdminOk() (*ReviewCommentModelUpdateV1Admin, bool) {
	if o == nil || IsNil(o.Admin) {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *ReviewCommentModelUpdateV1) HasAdmin() bool {
	if o != nil && !IsNil(o.Admin) {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given ReviewCommentModelUpdateV1Admin and assigns it to the Admin field.
func (o *ReviewCommentModelUpdateV1) SetAdmin(v ReviewCommentModelUpdateV1Admin) {
	o.Admin = &v
}

func (o ReviewCommentModelUpdateV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReviewCommentModelUpdateV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.Rating) {
		toSerialize["rating"] = o.Rating
	}
	if !IsNil(o.Admin) {
		toSerialize["admin"] = o.Admin
	}
	return toSerialize, nil
}

type NullableReviewCommentModelUpdateV1 struct {
	value *ReviewCommentModelUpdateV1
	isSet bool
}

func (v NullableReviewCommentModelUpdateV1) Get() *ReviewCommentModelUpdateV1 {
	return v.value
}

func (v *NullableReviewCommentModelUpdateV1) Set(val *ReviewCommentModelUpdateV1) {
	v.value = val
	v.isSet = true
}

func (v NullableReviewCommentModelUpdateV1) IsSet() bool {
	return v.isSet
}

func (v *NullableReviewCommentModelUpdateV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReviewCommentModelUpdateV1(val *ReviewCommentModelUpdateV1) *NullableReviewCommentModelUpdateV1 {
	return &NullableReviewCommentModelUpdateV1{value: val, isSet: true}
}

func (v NullableReviewCommentModelUpdateV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReviewCommentModelUpdateV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


