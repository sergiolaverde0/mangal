/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserModelSearchV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserModelSearchV1{}

// UserModelSearchV1 struct for UserModelSearchV1
type UserModelSearchV1 struct {
	UserId        *int64                    `json:"user_id,omitempty"`
	Username      *string                   `json:"username,omitempty"`
	Url           *string                   `json:"url,omitempty"`
	Avatar        *AvatarModelSearchV1      `json:"avatar,omitempty"`
	TimeJoined    *TimeV1                   `json:"time_joined,omitempty"`
	Signature     *string                   `json:"signature,omitempty"`
	ForumTitle    *string                   `json:"forum_title,omitempty"`
	FoldingAtHome *bool                     `json:"folding_at_home,omitempty"`
	Profile       *UserModelSearchV1Profile `json:"profile,omitempty"`
	Stats         *UserModelSearchV1Stats   `json:"stats,omitempty"`
	UserGroup     *string                   `json:"user_group,omitempty"`
	UserGroupName *string                   `json:"user_group_name,omitempty"`
}

// NewUserModelSearchV1 instantiates a new UserModelSearchV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserModelSearchV1() *UserModelSearchV1 {
	this := UserModelSearchV1{}
	return &this
}

// NewUserModelSearchV1WithDefaults instantiates a new UserModelSearchV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserModelSearchV1WithDefaults() *UserModelSearchV1 {
	this := UserModelSearchV1{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *UserModelSearchV1) GetUserId() int64 {
	if o == nil || IsNil(o.UserId) {
		var ret int64
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelSearchV1) GetUserIdOk() (*int64, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *UserModelSearchV1) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int64 and assigns it to the UserId field.
func (o *UserModelSearchV1) SetUserId(v int64) {
	o.UserId = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UserModelSearchV1) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelSearchV1) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UserModelSearchV1) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UserModelSearchV1) SetUsername(v string) {
	o.Username = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *UserModelSearchV1) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelSearchV1) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *UserModelSearchV1) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *UserModelSearchV1) SetUrl(v string) {
	o.Url = &v
}

// GetAvatar returns the Avatar field value if set, zero value otherwise.
func (o *UserModelSearchV1) GetAvatar() AvatarModelSearchV1 {
	if o == nil || IsNil(o.Avatar) {
		var ret AvatarModelSearchV1
		return ret
	}
	return *o.Avatar
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelSearchV1) GetAvatarOk() (*AvatarModelSearchV1, bool) {
	if o == nil || IsNil(o.Avatar) {
		return nil, false
	}
	return o.Avatar, true
}

// HasAvatar returns a boolean if a field has been set.
func (o *UserModelSearchV1) HasAvatar() bool {
	if o != nil && !IsNil(o.Avatar) {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given AvatarModelSearchV1 and assigns it to the Avatar field.
func (o *UserModelSearchV1) SetAvatar(v AvatarModelSearchV1) {
	o.Avatar = &v
}

// GetTimeJoined returns the TimeJoined field value if set, zero value otherwise.
func (o *UserModelSearchV1) GetTimeJoined() TimeV1 {
	if o == nil || IsNil(o.TimeJoined) {
		var ret TimeV1
		return ret
	}
	return *o.TimeJoined
}

// GetTimeJoinedOk returns a tuple with the TimeJoined field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelSearchV1) GetTimeJoinedOk() (*TimeV1, bool) {
	if o == nil || IsNil(o.TimeJoined) {
		return nil, false
	}
	return o.TimeJoined, true
}

// HasTimeJoined returns a boolean if a field has been set.
func (o *UserModelSearchV1) HasTimeJoined() bool {
	if o != nil && !IsNil(o.TimeJoined) {
		return true
	}

	return false
}

// SetTimeJoined gets a reference to the given TimeV1 and assigns it to the TimeJoined field.
func (o *UserModelSearchV1) SetTimeJoined(v TimeV1) {
	o.TimeJoined = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *UserModelSearchV1) GetSignature() string {
	if o == nil || IsNil(o.Signature) {
		var ret string
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelSearchV1) GetSignatureOk() (*string, bool) {
	if o == nil || IsNil(o.Signature) {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *UserModelSearchV1) HasSignature() bool {
	if o != nil && !IsNil(o.Signature) {
		return true
	}

	return false
}

// SetSignature gets a reference to the given string and assigns it to the Signature field.
func (o *UserModelSearchV1) SetSignature(v string) {
	o.Signature = &v
}

// GetForumTitle returns the ForumTitle field value if set, zero value otherwise.
func (o *UserModelSearchV1) GetForumTitle() string {
	if o == nil || IsNil(o.ForumTitle) {
		var ret string
		return ret
	}
	return *o.ForumTitle
}

// GetForumTitleOk returns a tuple with the ForumTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelSearchV1) GetForumTitleOk() (*string, bool) {
	if o == nil || IsNil(o.ForumTitle) {
		return nil, false
	}
	return o.ForumTitle, true
}

// HasForumTitle returns a boolean if a field has been set.
func (o *UserModelSearchV1) HasForumTitle() bool {
	if o != nil && !IsNil(o.ForumTitle) {
		return true
	}

	return false
}

// SetForumTitle gets a reference to the given string and assigns it to the ForumTitle field.
func (o *UserModelSearchV1) SetForumTitle(v string) {
	o.ForumTitle = &v
}

// GetFoldingAtHome returns the FoldingAtHome field value if set, zero value otherwise.
func (o *UserModelSearchV1) GetFoldingAtHome() bool {
	if o == nil || IsNil(o.FoldingAtHome) {
		var ret bool
		return ret
	}
	return *o.FoldingAtHome
}

// GetFoldingAtHomeOk returns a tuple with the FoldingAtHome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelSearchV1) GetFoldingAtHomeOk() (*bool, bool) {
	if o == nil || IsNil(o.FoldingAtHome) {
		return nil, false
	}
	return o.FoldingAtHome, true
}

// HasFoldingAtHome returns a boolean if a field has been set.
func (o *UserModelSearchV1) HasFoldingAtHome() bool {
	if o != nil && !IsNil(o.FoldingAtHome) {
		return true
	}

	return false
}

// SetFoldingAtHome gets a reference to the given bool and assigns it to the FoldingAtHome field.
func (o *UserModelSearchV1) SetFoldingAtHome(v bool) {
	o.FoldingAtHome = &v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *UserModelSearchV1) GetProfile() UserModelSearchV1Profile {
	if o == nil || IsNil(o.Profile) {
		var ret UserModelSearchV1Profile
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelSearchV1) GetProfileOk() (*UserModelSearchV1Profile, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *UserModelSearchV1) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given UserModelSearchV1Profile and assigns it to the Profile field.
func (o *UserModelSearchV1) SetProfile(v UserModelSearchV1Profile) {
	o.Profile = &v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *UserModelSearchV1) GetStats() UserModelSearchV1Stats {
	if o == nil || IsNil(o.Stats) {
		var ret UserModelSearchV1Stats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelSearchV1) GetStatsOk() (*UserModelSearchV1Stats, bool) {
	if o == nil || IsNil(o.Stats) {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *UserModelSearchV1) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given UserModelSearchV1Stats and assigns it to the Stats field.
func (o *UserModelSearchV1) SetStats(v UserModelSearchV1Stats) {
	o.Stats = &v
}

// GetUserGroup returns the UserGroup field value if set, zero value otherwise.
func (o *UserModelSearchV1) GetUserGroup() string {
	if o == nil || IsNil(o.UserGroup) {
		var ret string
		return ret
	}
	return *o.UserGroup
}

// GetUserGroupOk returns a tuple with the UserGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelSearchV1) GetUserGroupOk() (*string, bool) {
	if o == nil || IsNil(o.UserGroup) {
		return nil, false
	}
	return o.UserGroup, true
}

// HasUserGroup returns a boolean if a field has been set.
func (o *UserModelSearchV1) HasUserGroup() bool {
	if o != nil && !IsNil(o.UserGroup) {
		return true
	}

	return false
}

// SetUserGroup gets a reference to the given string and assigns it to the UserGroup field.
func (o *UserModelSearchV1) SetUserGroup(v string) {
	o.UserGroup = &v
}

// GetUserGroupName returns the UserGroupName field value if set, zero value otherwise.
func (o *UserModelSearchV1) GetUserGroupName() string {
	if o == nil || IsNil(o.UserGroupName) {
		var ret string
		return ret
	}
	return *o.UserGroupName
}

// GetUserGroupNameOk returns a tuple with the UserGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelSearchV1) GetUserGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserGroupName) {
		return nil, false
	}
	return o.UserGroupName, true
}

// HasUserGroupName returns a boolean if a field has been set.
func (o *UserModelSearchV1) HasUserGroupName() bool {
	if o != nil && !IsNil(o.UserGroupName) {
		return true
	}

	return false
}

// SetUserGroupName gets a reference to the given string and assigns it to the UserGroupName field.
func (o *UserModelSearchV1) SetUserGroupName(v string) {
	o.UserGroupName = &v
}

func (o UserModelSearchV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserModelSearchV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Avatar) {
		toSerialize["avatar"] = o.Avatar
	}
	if !IsNil(o.TimeJoined) {
		toSerialize["time_joined"] = o.TimeJoined
	}
	if !IsNil(o.Signature) {
		toSerialize["signature"] = o.Signature
	}
	if !IsNil(o.ForumTitle) {
		toSerialize["forum_title"] = o.ForumTitle
	}
	if !IsNil(o.FoldingAtHome) {
		toSerialize["folding_at_home"] = o.FoldingAtHome
	}
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	if !IsNil(o.Stats) {
		toSerialize["stats"] = o.Stats
	}
	if !IsNil(o.UserGroup) {
		toSerialize["user_group"] = o.UserGroup
	}
	if !IsNil(o.UserGroupName) {
		toSerialize["user_group_name"] = o.UserGroupName
	}
	return toSerialize, nil
}

type NullableUserModelSearchV1 struct {
	value *UserModelSearchV1
	isSet bool
}

func (v NullableUserModelSearchV1) Get() *UserModelSearchV1 {
	return v.value
}

func (v *NullableUserModelSearchV1) Set(val *UserModelSearchV1) {
	v.value = val
	v.isSet = true
}

func (v NullableUserModelSearchV1) IsSet() bool {
	return v.isSet
}

func (v *NullableUserModelSearchV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserModelSearchV1(val *UserModelSearchV1) *NullableUserModelSearchV1 {
	return &NullableUserModelSearchV1{value: val, isSet: true}
}

func (v NullableUserModelSearchV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserModelSearchV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
