/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ForumPostModelSearchV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForumPostModelSearchV1{}

// ForumPostModelSearchV1 struct for ForumPostModelSearchV1
type ForumPostModelSearchV1 struct {
	PostId      *int64                       `json:"post_id,omitempty"`
	BodyExcerpt *string                      `json:"body_excerpt,omitempty"`
	Topic       *ForumPostModelSearchV1Topic `json:"topic,omitempty"`
	Author      *UserModelSearchV1           `json:"author,omitempty"`
	TimeAdded   *TimeV1                      `json:"time_added,omitempty"`
}

// NewForumPostModelSearchV1 instantiates a new ForumPostModelSearchV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForumPostModelSearchV1() *ForumPostModelSearchV1 {
	this := ForumPostModelSearchV1{}
	return &this
}

// NewForumPostModelSearchV1WithDefaults instantiates a new ForumPostModelSearchV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForumPostModelSearchV1WithDefaults() *ForumPostModelSearchV1 {
	this := ForumPostModelSearchV1{}
	return &this
}

// GetPostId returns the PostId field value if set, zero value otherwise.
func (o *ForumPostModelSearchV1) GetPostId() int64 {
	if o == nil || IsNil(o.PostId) {
		var ret int64
		return ret
	}
	return *o.PostId
}

// GetPostIdOk returns a tuple with the PostId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumPostModelSearchV1) GetPostIdOk() (*int64, bool) {
	if o == nil || IsNil(o.PostId) {
		return nil, false
	}
	return o.PostId, true
}

// HasPostId returns a boolean if a field has been set.
func (o *ForumPostModelSearchV1) HasPostId() bool {
	if o != nil && !IsNil(o.PostId) {
		return true
	}

	return false
}

// SetPostId gets a reference to the given int64 and assigns it to the PostId field.
func (o *ForumPostModelSearchV1) SetPostId(v int64) {
	o.PostId = &v
}

// GetBodyExcerpt returns the BodyExcerpt field value if set, zero value otherwise.
func (o *ForumPostModelSearchV1) GetBodyExcerpt() string {
	if o == nil || IsNil(o.BodyExcerpt) {
		var ret string
		return ret
	}
	return *o.BodyExcerpt
}

// GetBodyExcerptOk returns a tuple with the BodyExcerpt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumPostModelSearchV1) GetBodyExcerptOk() (*string, bool) {
	if o == nil || IsNil(o.BodyExcerpt) {
		return nil, false
	}
	return o.BodyExcerpt, true
}

// HasBodyExcerpt returns a boolean if a field has been set.
func (o *ForumPostModelSearchV1) HasBodyExcerpt() bool {
	if o != nil && !IsNil(o.BodyExcerpt) {
		return true
	}

	return false
}

// SetBodyExcerpt gets a reference to the given string and assigns it to the BodyExcerpt field.
func (o *ForumPostModelSearchV1) SetBodyExcerpt(v string) {
	o.BodyExcerpt = &v
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *ForumPostModelSearchV1) GetTopic() ForumPostModelSearchV1Topic {
	if o == nil || IsNil(o.Topic) {
		var ret ForumPostModelSearchV1Topic
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumPostModelSearchV1) GetTopicOk() (*ForumPostModelSearchV1Topic, bool) {
	if o == nil || IsNil(o.Topic) {
		return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *ForumPostModelSearchV1) HasTopic() bool {
	if o != nil && !IsNil(o.Topic) {
		return true
	}

	return false
}

// SetTopic gets a reference to the given ForumPostModelSearchV1Topic and assigns it to the Topic field.
func (o *ForumPostModelSearchV1) SetTopic(v ForumPostModelSearchV1Topic) {
	o.Topic = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *ForumPostModelSearchV1) GetAuthor() UserModelSearchV1 {
	if o == nil || IsNil(o.Author) {
		var ret UserModelSearchV1
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumPostModelSearchV1) GetAuthorOk() (*UserModelSearchV1, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *ForumPostModelSearchV1) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given UserModelSearchV1 and assigns it to the Author field.
func (o *ForumPostModelSearchV1) SetAuthor(v UserModelSearchV1) {
	o.Author = &v
}

// GetTimeAdded returns the TimeAdded field value if set, zero value otherwise.
func (o *ForumPostModelSearchV1) GetTimeAdded() TimeV1 {
	if o == nil || IsNil(o.TimeAdded) {
		var ret TimeV1
		return ret
	}
	return *o.TimeAdded
}

// GetTimeAddedOk returns a tuple with the TimeAdded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumPostModelSearchV1) GetTimeAddedOk() (*TimeV1, bool) {
	if o == nil || IsNil(o.TimeAdded) {
		return nil, false
	}
	return o.TimeAdded, true
}

// HasTimeAdded returns a boolean if a field has been set.
func (o *ForumPostModelSearchV1) HasTimeAdded() bool {
	if o != nil && !IsNil(o.TimeAdded) {
		return true
	}

	return false
}

// SetTimeAdded gets a reference to the given TimeV1 and assigns it to the TimeAdded field.
func (o *ForumPostModelSearchV1) SetTimeAdded(v TimeV1) {
	o.TimeAdded = &v
}

func (o ForumPostModelSearchV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForumPostModelSearchV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PostId) {
		toSerialize["post_id"] = o.PostId
	}
	if !IsNil(o.BodyExcerpt) {
		toSerialize["body_excerpt"] = o.BodyExcerpt
	}
	if !IsNil(o.Topic) {
		toSerialize["topic"] = o.Topic
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.TimeAdded) {
		toSerialize["time_added"] = o.TimeAdded
	}
	return toSerialize, nil
}

type NullableForumPostModelSearchV1 struct {
	value *ForumPostModelSearchV1
	isSet bool
}

func (v NullableForumPostModelSearchV1) Get() *ForumPostModelSearchV1 {
	return v.value
}

func (v *NullableForumPostModelSearchV1) Set(val *ForumPostModelSearchV1) {
	v.value = val
	v.isSet = true
}

func (v NullableForumPostModelSearchV1) IsSet() bool {
	return v.isSet
}

func (v *NullableForumPostModelSearchV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForumPostModelSearchV1(val *ForumPostModelSearchV1) *NullableForumPostModelSearchV1 {
	return &NullableForumPostModelSearchV1{value: val, isSet: true}
}

func (v NullableForumPostModelSearchV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForumPostModelSearchV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
