/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReviewCommentModelV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReviewCommentModelV1{}

// ReviewCommentModelV1 struct for ReviewCommentModelV1
type ReviewCommentModelV1 struct {
	Id          *int64                      `json:"id,omitempty"`
	ReviewId    *int64                      `json:"review_id,omitempty"`
	Subject     *string                     `json:"subject,omitempty"`
	Content     *string                     `json:"content,omitempty"`
	Author      *ReviewCommentModelV1Author `json:"author,omitempty"`
	Rating      *float32                    `json:"rating,omitempty"`
	TimeAdded   *TimeV1                     `json:"time_added,omitempty"`
	TimeUpdated *TimeV1                     `json:"time_updated,omitempty"`
}

// NewReviewCommentModelV1 instantiates a new ReviewCommentModelV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReviewCommentModelV1() *ReviewCommentModelV1 {
	this := ReviewCommentModelV1{}
	return &this
}

// NewReviewCommentModelV1WithDefaults instantiates a new ReviewCommentModelV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReviewCommentModelV1WithDefaults() *ReviewCommentModelV1 {
	this := ReviewCommentModelV1{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ReviewCommentModelV1) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewCommentModelV1) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ReviewCommentModelV1) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ReviewCommentModelV1) SetId(v int64) {
	o.Id = &v
}

// GetReviewId returns the ReviewId field value if set, zero value otherwise.
func (o *ReviewCommentModelV1) GetReviewId() int64 {
	if o == nil || IsNil(o.ReviewId) {
		var ret int64
		return ret
	}
	return *o.ReviewId
}

// GetReviewIdOk returns a tuple with the ReviewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewCommentModelV1) GetReviewIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ReviewId) {
		return nil, false
	}
	return o.ReviewId, true
}

// HasReviewId returns a boolean if a field has been set.
func (o *ReviewCommentModelV1) HasReviewId() bool {
	if o != nil && !IsNil(o.ReviewId) {
		return true
	}

	return false
}

// SetReviewId gets a reference to the given int64 and assigns it to the ReviewId field.
func (o *ReviewCommentModelV1) SetReviewId(v int64) {
	o.ReviewId = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *ReviewCommentModelV1) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewCommentModelV1) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *ReviewCommentModelV1) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *ReviewCommentModelV1) SetSubject(v string) {
	o.Subject = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *ReviewCommentModelV1) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewCommentModelV1) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *ReviewCommentModelV1) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *ReviewCommentModelV1) SetContent(v string) {
	o.Content = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *ReviewCommentModelV1) GetAuthor() ReviewCommentModelV1Author {
	if o == nil || IsNil(o.Author) {
		var ret ReviewCommentModelV1Author
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewCommentModelV1) GetAuthorOk() (*ReviewCommentModelV1Author, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *ReviewCommentModelV1) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given ReviewCommentModelV1Author and assigns it to the Author field.
func (o *ReviewCommentModelV1) SetAuthor(v ReviewCommentModelV1Author) {
	o.Author = &v
}

// GetRating returns the Rating field value if set, zero value otherwise.
func (o *ReviewCommentModelV1) GetRating() float32 {
	if o == nil || IsNil(o.Rating) {
		var ret float32
		return ret
	}
	return *o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewCommentModelV1) GetRatingOk() (*float32, bool) {
	if o == nil || IsNil(o.Rating) {
		return nil, false
	}
	return o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *ReviewCommentModelV1) HasRating() bool {
	if o != nil && !IsNil(o.Rating) {
		return true
	}

	return false
}

// SetRating gets a reference to the given float32 and assigns it to the Rating field.
func (o *ReviewCommentModelV1) SetRating(v float32) {
	o.Rating = &v
}

// GetTimeAdded returns the TimeAdded field value if set, zero value otherwise.
func (o *ReviewCommentModelV1) GetTimeAdded() TimeV1 {
	if o == nil || IsNil(o.TimeAdded) {
		var ret TimeV1
		return ret
	}
	return *o.TimeAdded
}

// GetTimeAddedOk returns a tuple with the TimeAdded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewCommentModelV1) GetTimeAddedOk() (*TimeV1, bool) {
	if o == nil || IsNil(o.TimeAdded) {
		return nil, false
	}
	return o.TimeAdded, true
}

// HasTimeAdded returns a boolean if a field has been set.
func (o *ReviewCommentModelV1) HasTimeAdded() bool {
	if o != nil && !IsNil(o.TimeAdded) {
		return true
	}

	return false
}

// SetTimeAdded gets a reference to the given TimeV1 and assigns it to the TimeAdded field.
func (o *ReviewCommentModelV1) SetTimeAdded(v TimeV1) {
	o.TimeAdded = &v
}

// GetTimeUpdated returns the TimeUpdated field value if set, zero value otherwise.
func (o *ReviewCommentModelV1) GetTimeUpdated() TimeV1 {
	if o == nil || IsNil(o.TimeUpdated) {
		var ret TimeV1
		return ret
	}
	return *o.TimeUpdated
}

// GetTimeUpdatedOk returns a tuple with the TimeUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReviewCommentModelV1) GetTimeUpdatedOk() (*TimeV1, bool) {
	if o == nil || IsNil(o.TimeUpdated) {
		return nil, false
	}
	return o.TimeUpdated, true
}

// HasTimeUpdated returns a boolean if a field has been set.
func (o *ReviewCommentModelV1) HasTimeUpdated() bool {
	if o != nil && !IsNil(o.TimeUpdated) {
		return true
	}

	return false
}

// SetTimeUpdated gets a reference to the given TimeV1 and assigns it to the TimeUpdated field.
func (o *ReviewCommentModelV1) SetTimeUpdated(v TimeV1) {
	o.TimeUpdated = &v
}

func (o ReviewCommentModelV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReviewCommentModelV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ReviewId) {
		toSerialize["review_id"] = o.ReviewId
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Rating) {
		toSerialize["rating"] = o.Rating
	}
	if !IsNil(o.TimeAdded) {
		toSerialize["time_added"] = o.TimeAdded
	}
	if !IsNil(o.TimeUpdated) {
		toSerialize["time_updated"] = o.TimeUpdated
	}
	return toSerialize, nil
}

type NullableReviewCommentModelV1 struct {
	value *ReviewCommentModelV1
	isSet bool
}

func (v NullableReviewCommentModelV1) Get() *ReviewCommentModelV1 {
	return v.value
}

func (v *NullableReviewCommentModelV1) Set(val *ReviewCommentModelV1) {
	v.value = val
	v.isSet = true
}

func (v NullableReviewCommentModelV1) IsSet() bool {
	return v.isSet
}

func (v *NullableReviewCommentModelV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReviewCommentModelV1(val *ReviewCommentModelV1) *NullableReviewCommentModelV1 {
	return &NullableReviewCommentModelV1{value: val, isSet: true}
}

func (v NullableReviewCommentModelV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReviewCommentModelV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
