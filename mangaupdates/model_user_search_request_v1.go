/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserSearchRequestV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSearchRequestV1{}

// UserSearchRequestV1 struct for UserSearchRequestV1
type UserSearchRequestV1 struct {
	Search  *string `json:"search,omitempty"`
	Page    *int64  `json:"page,omitempty"`
	Perpage *int64  `json:"perpage,omitempty"`
	Letter  *string `json:"letter,omitempty"`
	Orderby *string `json:"orderby,omitempty"`
	Asc     *string `json:"asc,omitempty"`
}

// NewUserSearchRequestV1 instantiates a new UserSearchRequestV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSearchRequestV1() *UserSearchRequestV1 {
	this := UserSearchRequestV1{}
	return &this
}

// NewUserSearchRequestV1WithDefaults instantiates a new UserSearchRequestV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSearchRequestV1WithDefaults() *UserSearchRequestV1 {
	this := UserSearchRequestV1{}
	return &this
}

// GetSearch returns the Search field value if set, zero value otherwise.
func (o *UserSearchRequestV1) GetSearch() string {
	if o == nil || IsNil(o.Search) {
		var ret string
		return ret
	}
	return *o.Search
}

// GetSearchOk returns a tuple with the Search field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSearchRequestV1) GetSearchOk() (*string, bool) {
	if o == nil || IsNil(o.Search) {
		return nil, false
	}
	return o.Search, true
}

// HasSearch returns a boolean if a field has been set.
func (o *UserSearchRequestV1) HasSearch() bool {
	if o != nil && !IsNil(o.Search) {
		return true
	}

	return false
}

// SetSearch gets a reference to the given string and assigns it to the Search field.
func (o *UserSearchRequestV1) SetSearch(v string) {
	o.Search = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *UserSearchRequestV1) GetPage() int64 {
	if o == nil || IsNil(o.Page) {
		var ret int64
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSearchRequestV1) GetPageOk() (*int64, bool) {
	if o == nil || IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *UserSearchRequestV1) HasPage() bool {
	if o != nil && !IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given int64 and assigns it to the Page field.
func (o *UserSearchRequestV1) SetPage(v int64) {
	o.Page = &v
}

// GetPerpage returns the Perpage field value if set, zero value otherwise.
func (o *UserSearchRequestV1) GetPerpage() int64 {
	if o == nil || IsNil(o.Perpage) {
		var ret int64
		return ret
	}
	return *o.Perpage
}

// GetPerpageOk returns a tuple with the Perpage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSearchRequestV1) GetPerpageOk() (*int64, bool) {
	if o == nil || IsNil(o.Perpage) {
		return nil, false
	}
	return o.Perpage, true
}

// HasPerpage returns a boolean if a field has been set.
func (o *UserSearchRequestV1) HasPerpage() bool {
	if o != nil && !IsNil(o.Perpage) {
		return true
	}

	return false
}

// SetPerpage gets a reference to the given int64 and assigns it to the Perpage field.
func (o *UserSearchRequestV1) SetPerpage(v int64) {
	o.Perpage = &v
}

// GetLetter returns the Letter field value if set, zero value otherwise.
func (o *UserSearchRequestV1) GetLetter() string {
	if o == nil || IsNil(o.Letter) {
		var ret string
		return ret
	}
	return *o.Letter
}

// GetLetterOk returns a tuple with the Letter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSearchRequestV1) GetLetterOk() (*string, bool) {
	if o == nil || IsNil(o.Letter) {
		return nil, false
	}
	return o.Letter, true
}

// HasLetter returns a boolean if a field has been set.
func (o *UserSearchRequestV1) HasLetter() bool {
	if o != nil && !IsNil(o.Letter) {
		return true
	}

	return false
}

// SetLetter gets a reference to the given string and assigns it to the Letter field.
func (o *UserSearchRequestV1) SetLetter(v string) {
	o.Letter = &v
}

// GetOrderby returns the Orderby field value if set, zero value otherwise.
func (o *UserSearchRequestV1) GetOrderby() string {
	if o == nil || IsNil(o.Orderby) {
		var ret string
		return ret
	}
	return *o.Orderby
}

// GetOrderbyOk returns a tuple with the Orderby field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSearchRequestV1) GetOrderbyOk() (*string, bool) {
	if o == nil || IsNil(o.Orderby) {
		return nil, false
	}
	return o.Orderby, true
}

// HasOrderby returns a boolean if a field has been set.
func (o *UserSearchRequestV1) HasOrderby() bool {
	if o != nil && !IsNil(o.Orderby) {
		return true
	}

	return false
}

// SetOrderby gets a reference to the given string and assigns it to the Orderby field.
func (o *UserSearchRequestV1) SetOrderby(v string) {
	o.Orderby = &v
}

// GetAsc returns the Asc field value if set, zero value otherwise.
func (o *UserSearchRequestV1) GetAsc() string {
	if o == nil || IsNil(o.Asc) {
		var ret string
		return ret
	}
	return *o.Asc
}

// GetAscOk returns a tuple with the Asc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSearchRequestV1) GetAscOk() (*string, bool) {
	if o == nil || IsNil(o.Asc) {
		return nil, false
	}
	return o.Asc, true
}

// HasAsc returns a boolean if a field has been set.
func (o *UserSearchRequestV1) HasAsc() bool {
	if o != nil && !IsNil(o.Asc) {
		return true
	}

	return false
}

// SetAsc gets a reference to the given string and assigns it to the Asc field.
func (o *UserSearchRequestV1) SetAsc(v string) {
	o.Asc = &v
}

func (o UserSearchRequestV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSearchRequestV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Search) {
		toSerialize["search"] = o.Search
	}
	if !IsNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	if !IsNil(o.Perpage) {
		toSerialize["perpage"] = o.Perpage
	}
	if !IsNil(o.Letter) {
		toSerialize["letter"] = o.Letter
	}
	if !IsNil(o.Orderby) {
		toSerialize["orderby"] = o.Orderby
	}
	if !IsNil(o.Asc) {
		toSerialize["asc"] = o.Asc
	}
	return toSerialize, nil
}

type NullableUserSearchRequestV1 struct {
	value *UserSearchRequestV1
	isSet bool
}

func (v NullableUserSearchRequestV1) Get() *UserSearchRequestV1 {
	return v.value
}

func (v *NullableUserSearchRequestV1) Set(val *UserSearchRequestV1) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSearchRequestV1) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSearchRequestV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSearchRequestV1(val *UserSearchRequestV1) *NullableUserSearchRequestV1 {
	return &NullableUserSearchRequestV1{value: val, isSet: true}
}

func (v NullableUserSearchRequestV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSearchRequestV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
