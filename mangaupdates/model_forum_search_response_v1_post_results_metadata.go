/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ForumSearchResponseV1PostResultsMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForumSearchResponseV1PostResultsMetadata{}

// ForumSearchResponseV1PostResultsMetadata struct for ForumSearchResponseV1PostResultsMetadata
type ForumSearchResponseV1PostResultsMetadata struct {
	IsSubscribed        *bool                                               `json:"is_subscribed,omitempty"`
	MyLatestPostInTopic *int64                                              `json:"my_latest_post_in_topic,omitempty"`
	ForumInfo           *ForumSearchResponseV1PostResultsMetadataForumInfo  `json:"forum_info,omitempty"`
	TopicStats          *ForumSearchResponseV1PostResultsMetadataTopicStats `json:"topic_stats,omitempty"`
}

// NewForumSearchResponseV1PostResultsMetadata instantiates a new ForumSearchResponseV1PostResultsMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForumSearchResponseV1PostResultsMetadata() *ForumSearchResponseV1PostResultsMetadata {
	this := ForumSearchResponseV1PostResultsMetadata{}
	return &this
}

// NewForumSearchResponseV1PostResultsMetadataWithDefaults instantiates a new ForumSearchResponseV1PostResultsMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForumSearchResponseV1PostResultsMetadataWithDefaults() *ForumSearchResponseV1PostResultsMetadata {
	this := ForumSearchResponseV1PostResultsMetadata{}
	return &this
}

// GetIsSubscribed returns the IsSubscribed field value if set, zero value otherwise.
func (o *ForumSearchResponseV1PostResultsMetadata) GetIsSubscribed() bool {
	if o == nil || IsNil(o.IsSubscribed) {
		var ret bool
		return ret
	}
	return *o.IsSubscribed
}

// GetIsSubscribedOk returns a tuple with the IsSubscribed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumSearchResponseV1PostResultsMetadata) GetIsSubscribedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSubscribed) {
		return nil, false
	}
	return o.IsSubscribed, true
}

// HasIsSubscribed returns a boolean if a field has been set.
func (o *ForumSearchResponseV1PostResultsMetadata) HasIsSubscribed() bool {
	if o != nil && !IsNil(o.IsSubscribed) {
		return true
	}

	return false
}

// SetIsSubscribed gets a reference to the given bool and assigns it to the IsSubscribed field.
func (o *ForumSearchResponseV1PostResultsMetadata) SetIsSubscribed(v bool) {
	o.IsSubscribed = &v
}

// GetMyLatestPostInTopic returns the MyLatestPostInTopic field value if set, zero value otherwise.
func (o *ForumSearchResponseV1PostResultsMetadata) GetMyLatestPostInTopic() int64 {
	if o == nil || IsNil(o.MyLatestPostInTopic) {
		var ret int64
		return ret
	}
	return *o.MyLatestPostInTopic
}

// GetMyLatestPostInTopicOk returns a tuple with the MyLatestPostInTopic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumSearchResponseV1PostResultsMetadata) GetMyLatestPostInTopicOk() (*int64, bool) {
	if o == nil || IsNil(o.MyLatestPostInTopic) {
		return nil, false
	}
	return o.MyLatestPostInTopic, true
}

// HasMyLatestPostInTopic returns a boolean if a field has been set.
func (o *ForumSearchResponseV1PostResultsMetadata) HasMyLatestPostInTopic() bool {
	if o != nil && !IsNil(o.MyLatestPostInTopic) {
		return true
	}

	return false
}

// SetMyLatestPostInTopic gets a reference to the given int64 and assigns it to the MyLatestPostInTopic field.
func (o *ForumSearchResponseV1PostResultsMetadata) SetMyLatestPostInTopic(v int64) {
	o.MyLatestPostInTopic = &v
}

// GetForumInfo returns the ForumInfo field value if set, zero value otherwise.
func (o *ForumSearchResponseV1PostResultsMetadata) GetForumInfo() ForumSearchResponseV1PostResultsMetadataForumInfo {
	if o == nil || IsNil(o.ForumInfo) {
		var ret ForumSearchResponseV1PostResultsMetadataForumInfo
		return ret
	}
	return *o.ForumInfo
}

// GetForumInfoOk returns a tuple with the ForumInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumSearchResponseV1PostResultsMetadata) GetForumInfoOk() (*ForumSearchResponseV1PostResultsMetadataForumInfo, bool) {
	if o == nil || IsNil(o.ForumInfo) {
		return nil, false
	}
	return o.ForumInfo, true
}

// HasForumInfo returns a boolean if a field has been set.
func (o *ForumSearchResponseV1PostResultsMetadata) HasForumInfo() bool {
	if o != nil && !IsNil(o.ForumInfo) {
		return true
	}

	return false
}

// SetForumInfo gets a reference to the given ForumSearchResponseV1PostResultsMetadataForumInfo and assigns it to the ForumInfo field.
func (o *ForumSearchResponseV1PostResultsMetadata) SetForumInfo(v ForumSearchResponseV1PostResultsMetadataForumInfo) {
	o.ForumInfo = &v
}

// GetTopicStats returns the TopicStats field value if set, zero value otherwise.
func (o *ForumSearchResponseV1PostResultsMetadata) GetTopicStats() ForumSearchResponseV1PostResultsMetadataTopicStats {
	if o == nil || IsNil(o.TopicStats) {
		var ret ForumSearchResponseV1PostResultsMetadataTopicStats
		return ret
	}
	return *o.TopicStats
}

// GetTopicStatsOk returns a tuple with the TopicStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumSearchResponseV1PostResultsMetadata) GetTopicStatsOk() (*ForumSearchResponseV1PostResultsMetadataTopicStats, bool) {
	if o == nil || IsNil(o.TopicStats) {
		return nil, false
	}
	return o.TopicStats, true
}

// HasTopicStats returns a boolean if a field has been set.
func (o *ForumSearchResponseV1PostResultsMetadata) HasTopicStats() bool {
	if o != nil && !IsNil(o.TopicStats) {
		return true
	}

	return false
}

// SetTopicStats gets a reference to the given ForumSearchResponseV1PostResultsMetadataTopicStats and assigns it to the TopicStats field.
func (o *ForumSearchResponseV1PostResultsMetadata) SetTopicStats(v ForumSearchResponseV1PostResultsMetadataTopicStats) {
	o.TopicStats = &v
}

func (o ForumSearchResponseV1PostResultsMetadata) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForumSearchResponseV1PostResultsMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsSubscribed) {
		toSerialize["is_subscribed"] = o.IsSubscribed
	}
	if !IsNil(o.MyLatestPostInTopic) {
		toSerialize["my_latest_post_in_topic"] = o.MyLatestPostInTopic
	}
	if !IsNil(o.ForumInfo) {
		toSerialize["forum_info"] = o.ForumInfo
	}
	if !IsNil(o.TopicStats) {
		toSerialize["topic_stats"] = o.TopicStats
	}
	return toSerialize, nil
}

type NullableForumSearchResponseV1PostResultsMetadata struct {
	value *ForumSearchResponseV1PostResultsMetadata
	isSet bool
}

func (v NullableForumSearchResponseV1PostResultsMetadata) Get() *ForumSearchResponseV1PostResultsMetadata {
	return v.value
}

func (v *NullableForumSearchResponseV1PostResultsMetadata) Set(val *ForumSearchResponseV1PostResultsMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableForumSearchResponseV1PostResultsMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableForumSearchResponseV1PostResultsMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForumSearchResponseV1PostResultsMetadata(val *ForumSearchResponseV1PostResultsMetadata) *NullableForumSearchResponseV1PostResultsMetadata {
	return &NullableForumSearchResponseV1PostResultsMetadata{value: val, isSet: true}
}

func (v NullableForumSearchResponseV1PostResultsMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForumSearchResponseV1PostResultsMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
