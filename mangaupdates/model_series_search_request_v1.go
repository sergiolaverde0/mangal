/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SeriesSearchRequestV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SeriesSearchRequestV1{}

// SeriesSearchRequestV1 struct for SeriesSearchRequestV1
type SeriesSearchRequestV1 struct {
	Search      *string  `json:"search,omitempty"`
	AddedBy     *int64   `json:"added_by,omitempty"`
	Stype       *string  `json:"stype,omitempty"`
	Licensed    *string  `json:"licensed,omitempty"`
	Type        []string `json:"type,omitempty"`
	Year        *string  `json:"year,omitempty"`
	FilterTypes []string `json:"filter_types,omitempty"`
	Category    []string `json:"category,omitempty"`
	Filter      *string  `json:"filter,omitempty"`
	// Meant to replace 'filter', it lets you specify multiple filters as an array of strings
	Filters               []string `json:"filters,omitempty"`
	List                  *string  `json:"list,omitempty"`
	Page                  *int64   `json:"page,omitempty"`
	Perpage               *int64   `json:"perpage,omitempty"`
	Letter                *string  `json:"letter,omitempty"`
	Genre                 []string `json:"genre,omitempty"`
	ExcludeGenre          []string `json:"exclude_genre,omitempty"`
	Orderby               *string  `json:"orderby,omitempty"`
	Pending               *bool    `json:"pending,omitempty"`
	IncludeRankMetadata   *bool    `json:"include_rank_metadata,omitempty"`
	ExcludeFilteredGenres *bool    `json:"exclude_filtered_genres,omitempty"`
}

// NewSeriesSearchRequestV1 instantiates a new SeriesSearchRequestV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSeriesSearchRequestV1() *SeriesSearchRequestV1 {
	this := SeriesSearchRequestV1{}
	return &this
}

// NewSeriesSearchRequestV1WithDefaults instantiates a new SeriesSearchRequestV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSeriesSearchRequestV1WithDefaults() *SeriesSearchRequestV1 {
	this := SeriesSearchRequestV1{}
	return &this
}

// GetSearch returns the Search field value if set, zero value otherwise.
func (o *SeriesSearchRequestV1) GetSearch() string {
	if o == nil || IsNil(o.Search) {
		var ret string
		return ret
	}
	return *o.Search
}

// GetSearchOk returns a tuple with the Search field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesSearchRequestV1) GetSearchOk() (*string, bool) {
	if o == nil || IsNil(o.Search) {
		return nil, false
	}
	return o.Search, true
}

// HasSearch returns a boolean if a field has been set.
func (o *SeriesSearchRequestV1) HasSearch() bool {
	if o != nil && !IsNil(o.Search) {
		return true
	}

	return false
}

// SetSearch gets a reference to the given string and assigns it to the Search field.
func (o *SeriesSearchRequestV1) SetSearch(v string) {
	o.Search = &v
}

// GetAddedBy returns the AddedBy field value if set, zero value otherwise.
func (o *SeriesSearchRequestV1) GetAddedBy() int64 {
	if o == nil || IsNil(o.AddedBy) {
		var ret int64
		return ret
	}
	return *o.AddedBy
}

// GetAddedByOk returns a tuple with the AddedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesSearchRequestV1) GetAddedByOk() (*int64, bool) {
	if o == nil || IsNil(o.AddedBy) {
		return nil, false
	}
	return o.AddedBy, true
}

// HasAddedBy returns a boolean if a field has been set.
func (o *SeriesSearchRequestV1) HasAddedBy() bool {
	if o != nil && !IsNil(o.AddedBy) {
		return true
	}

	return false
}

// SetAddedBy gets a reference to the given int64 and assigns it to the AddedBy field.
func (o *SeriesSearchRequestV1) SetAddedBy(v int64) {
	o.AddedBy = &v
}

// GetStype returns the Stype field value if set, zero value otherwise.
func (o *SeriesSearchRequestV1) GetStype() string {
	if o == nil || IsNil(o.Stype) {
		var ret string
		return ret
	}
	return *o.Stype
}

// GetStypeOk returns a tuple with the Stype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesSearchRequestV1) GetStypeOk() (*string, bool) {
	if o == nil || IsNil(o.Stype) {
		return nil, false
	}
	return o.Stype, true
}

// HasStype returns a boolean if a field has been set.
func (o *SeriesSearchRequestV1) HasStype() bool {
	if o != nil && !IsNil(o.Stype) {
		return true
	}

	return false
}

// SetStype gets a reference to the given string and assigns it to the Stype field.
func (o *SeriesSearchRequestV1) SetStype(v string) {
	o.Stype = &v
}

// GetLicensed returns the Licensed field value if set, zero value otherwise.
func (o *SeriesSearchRequestV1) GetLicensed() string {
	if o == nil || IsNil(o.Licensed) {
		var ret string
		return ret
	}
	return *o.Licensed
}

// GetLicensedOk returns a tuple with the Licensed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesSearchRequestV1) GetLicensedOk() (*string, bool) {
	if o == nil || IsNil(o.Licensed) {
		return nil, false
	}
	return o.Licensed, true
}

// HasLicensed returns a boolean if a field has been set.
func (o *SeriesSearchRequestV1) HasLicensed() bool {
	if o != nil && !IsNil(o.Licensed) {
		return true
	}

	return false
}

// SetLicensed gets a reference to the given string and assigns it to the Licensed field.
func (o *SeriesSearchRequestV1) SetLicensed(v string) {
	o.Licensed = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SeriesSearchRequestV1) GetType() []string {
	if o == nil || IsNil(o.Type) {
		var ret []string
		return ret
	}
	return o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesSearchRequestV1) GetTypeOk() ([]string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SeriesSearchRequestV1) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given []string and assigns it to the Type field.
func (o *SeriesSearchRequestV1) SetType(v []string) {
	o.Type = v
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *SeriesSearchRequestV1) GetYear() string {
	if o == nil || IsNil(o.Year) {
		var ret string
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesSearchRequestV1) GetYearOk() (*string, bool) {
	if o == nil || IsNil(o.Year) {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *SeriesSearchRequestV1) HasYear() bool {
	if o != nil && !IsNil(o.Year) {
		return true
	}

	return false
}

// SetYear gets a reference to the given string and assigns it to the Year field.
func (o *SeriesSearchRequestV1) SetYear(v string) {
	o.Year = &v
}

// GetFilterTypes returns the FilterTypes field value if set, zero value otherwise.
func (o *SeriesSearchRequestV1) GetFilterTypes() []string {
	if o == nil || IsNil(o.FilterTypes) {
		var ret []string
		return ret
	}
	return o.FilterTypes
}

// GetFilterTypesOk returns a tuple with the FilterTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesSearchRequestV1) GetFilterTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.FilterTypes) {
		return nil, false
	}
	return o.FilterTypes, true
}

// HasFilterTypes returns a boolean if a field has been set.
func (o *SeriesSearchRequestV1) HasFilterTypes() bool {
	if o != nil && !IsNil(o.FilterTypes) {
		return true
	}

	return false
}

// SetFilterTypes gets a reference to the given []string and assigns it to the FilterTypes field.
func (o *SeriesSearchRequestV1) SetFilterTypes(v []string) {
	o.FilterTypes = v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *SeriesSearchRequestV1) GetCategory() []string {
	if o == nil || IsNil(o.Category) {
		var ret []string
		return ret
	}
	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesSearchRequestV1) GetCategoryOk() ([]string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *SeriesSearchRequestV1) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given []string and assigns it to the Category field.
func (o *SeriesSearchRequestV1) SetCategory(v []string) {
	o.Category = v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *SeriesSearchRequestV1) GetFilter() string {
	if o == nil || IsNil(o.Filter) {
		var ret string
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesSearchRequestV1) GetFilterOk() (*string, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *SeriesSearchRequestV1) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given string and assigns it to the Filter field.
func (o *SeriesSearchRequestV1) SetFilter(v string) {
	o.Filter = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *SeriesSearchRequestV1) GetFilters() []string {
	if o == nil || IsNil(o.Filters) {
		var ret []string
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesSearchRequestV1) GetFiltersOk() ([]string, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *SeriesSearchRequestV1) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []string and assigns it to the Filters field.
func (o *SeriesSearchRequestV1) SetFilters(v []string) {
	o.Filters = v
}

// GetList returns the List field value if set, zero value otherwise.
func (o *SeriesSearchRequestV1) GetList() string {
	if o == nil || IsNil(o.List) {
		var ret string
		return ret
	}
	return *o.List
}

// GetListOk returns a tuple with the List field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesSearchRequestV1) GetListOk() (*string, bool) {
	if o == nil || IsNil(o.List) {
		return nil, false
	}
	return o.List, true
}

// HasList returns a boolean if a field has been set.
func (o *SeriesSearchRequestV1) HasList() bool {
	if o != nil && !IsNil(o.List) {
		return true
	}

	return false
}

// SetList gets a reference to the given string and assigns it to the List field.
func (o *SeriesSearchRequestV1) SetList(v string) {
	o.List = &v
}

// GetPage returns the Page field value if set, zero value otherwise.
func (o *SeriesSearchRequestV1) GetPage() int64 {
	if o == nil || IsNil(o.Page) {
		var ret int64
		return ret
	}
	return *o.Page
}

// GetPageOk returns a tuple with the Page field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesSearchRequestV1) GetPageOk() (*int64, bool) {
	if o == nil || IsNil(o.Page) {
		return nil, false
	}
	return o.Page, true
}

// HasPage returns a boolean if a field has been set.
func (o *SeriesSearchRequestV1) HasPage() bool {
	if o != nil && !IsNil(o.Page) {
		return true
	}

	return false
}

// SetPage gets a reference to the given int64 and assigns it to the Page field.
func (o *SeriesSearchRequestV1) SetPage(v int64) {
	o.Page = &v
}

// GetPerpage returns the Perpage field value if set, zero value otherwise.
func (o *SeriesSearchRequestV1) GetPerpage() int64 {
	if o == nil || IsNil(o.Perpage) {
		var ret int64
		return ret
	}
	return *o.Perpage
}

// GetPerpageOk returns a tuple with the Perpage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesSearchRequestV1) GetPerpageOk() (*int64, bool) {
	if o == nil || IsNil(o.Perpage) {
		return nil, false
	}
	return o.Perpage, true
}

// HasPerpage returns a boolean if a field has been set.
func (o *SeriesSearchRequestV1) HasPerpage() bool {
	if o != nil && !IsNil(o.Perpage) {
		return true
	}

	return false
}

// SetPerpage gets a reference to the given int64 and assigns it to the Perpage field.
func (o *SeriesSearchRequestV1) SetPerpage(v int64) {
	o.Perpage = &v
}

// GetLetter returns the Letter field value if set, zero value otherwise.
func (o *SeriesSearchRequestV1) GetLetter() string {
	if o == nil || IsNil(o.Letter) {
		var ret string
		return ret
	}
	return *o.Letter
}

// GetLetterOk returns a tuple with the Letter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesSearchRequestV1) GetLetterOk() (*string, bool) {
	if o == nil || IsNil(o.Letter) {
		return nil, false
	}
	return o.Letter, true
}

// HasLetter returns a boolean if a field has been set.
func (o *SeriesSearchRequestV1) HasLetter() bool {
	if o != nil && !IsNil(o.Letter) {
		return true
	}

	return false
}

// SetLetter gets a reference to the given string and assigns it to the Letter field.
func (o *SeriesSearchRequestV1) SetLetter(v string) {
	o.Letter = &v
}

// GetGenre returns the Genre field value if set, zero value otherwise.
func (o *SeriesSearchRequestV1) GetGenre() []string {
	if o == nil || IsNil(o.Genre) {
		var ret []string
		return ret
	}
	return o.Genre
}

// GetGenreOk returns a tuple with the Genre field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesSearchRequestV1) GetGenreOk() ([]string, bool) {
	if o == nil || IsNil(o.Genre) {
		return nil, false
	}
	return o.Genre, true
}

// HasGenre returns a boolean if a field has been set.
func (o *SeriesSearchRequestV1) HasGenre() bool {
	if o != nil && !IsNil(o.Genre) {
		return true
	}

	return false
}

// SetGenre gets a reference to the given []string and assigns it to the Genre field.
func (o *SeriesSearchRequestV1) SetGenre(v []string) {
	o.Genre = v
}

// GetExcludeGenre returns the ExcludeGenre field value if set, zero value otherwise.
func (o *SeriesSearchRequestV1) GetExcludeGenre() []string {
	if o == nil || IsNil(o.ExcludeGenre) {
		var ret []string
		return ret
	}
	return o.ExcludeGenre
}

// GetExcludeGenreOk returns a tuple with the ExcludeGenre field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesSearchRequestV1) GetExcludeGenreOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludeGenre) {
		return nil, false
	}
	return o.ExcludeGenre, true
}

// HasExcludeGenre returns a boolean if a field has been set.
func (o *SeriesSearchRequestV1) HasExcludeGenre() bool {
	if o != nil && !IsNil(o.ExcludeGenre) {
		return true
	}

	return false
}

// SetExcludeGenre gets a reference to the given []string and assigns it to the ExcludeGenre field.
func (o *SeriesSearchRequestV1) SetExcludeGenre(v []string) {
	o.ExcludeGenre = v
}

// GetOrderby returns the Orderby field value if set, zero value otherwise.
func (o *SeriesSearchRequestV1) GetOrderby() string {
	if o == nil || IsNil(o.Orderby) {
		var ret string
		return ret
	}
	return *o.Orderby
}

// GetOrderbyOk returns a tuple with the Orderby field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesSearchRequestV1) GetOrderbyOk() (*string, bool) {
	if o == nil || IsNil(o.Orderby) {
		return nil, false
	}
	return o.Orderby, true
}

// HasOrderby returns a boolean if a field has been set.
func (o *SeriesSearchRequestV1) HasOrderby() bool {
	if o != nil && !IsNil(o.Orderby) {
		return true
	}

	return false
}

// SetOrderby gets a reference to the given string and assigns it to the Orderby field.
func (o *SeriesSearchRequestV1) SetOrderby(v string) {
	o.Orderby = &v
}

// GetPending returns the Pending field value if set, zero value otherwise.
func (o *SeriesSearchRequestV1) GetPending() bool {
	if o == nil || IsNil(o.Pending) {
		var ret bool
		return ret
	}
	return *o.Pending
}

// GetPendingOk returns a tuple with the Pending field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesSearchRequestV1) GetPendingOk() (*bool, bool) {
	if o == nil || IsNil(o.Pending) {
		return nil, false
	}
	return o.Pending, true
}

// HasPending returns a boolean if a field has been set.
func (o *SeriesSearchRequestV1) HasPending() bool {
	if o != nil && !IsNil(o.Pending) {
		return true
	}

	return false
}

// SetPending gets a reference to the given bool and assigns it to the Pending field.
func (o *SeriesSearchRequestV1) SetPending(v bool) {
	o.Pending = &v
}

// GetIncludeRankMetadata returns the IncludeRankMetadata field value if set, zero value otherwise.
func (o *SeriesSearchRequestV1) GetIncludeRankMetadata() bool {
	if o == nil || IsNil(o.IncludeRankMetadata) {
		var ret bool
		return ret
	}
	return *o.IncludeRankMetadata
}

// GetIncludeRankMetadataOk returns a tuple with the IncludeRankMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesSearchRequestV1) GetIncludeRankMetadataOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeRankMetadata) {
		return nil, false
	}
	return o.IncludeRankMetadata, true
}

// HasIncludeRankMetadata returns a boolean if a field has been set.
func (o *SeriesSearchRequestV1) HasIncludeRankMetadata() bool {
	if o != nil && !IsNil(o.IncludeRankMetadata) {
		return true
	}

	return false
}

// SetIncludeRankMetadata gets a reference to the given bool and assigns it to the IncludeRankMetadata field.
func (o *SeriesSearchRequestV1) SetIncludeRankMetadata(v bool) {
	o.IncludeRankMetadata = &v
}

// GetExcludeFilteredGenres returns the ExcludeFilteredGenres field value if set, zero value otherwise.
func (o *SeriesSearchRequestV1) GetExcludeFilteredGenres() bool {
	if o == nil || IsNil(o.ExcludeFilteredGenres) {
		var ret bool
		return ret
	}
	return *o.ExcludeFilteredGenres
}

// GetExcludeFilteredGenresOk returns a tuple with the ExcludeFilteredGenres field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesSearchRequestV1) GetExcludeFilteredGenresOk() (*bool, bool) {
	if o == nil || IsNil(o.ExcludeFilteredGenres) {
		return nil, false
	}
	return o.ExcludeFilteredGenres, true
}

// HasExcludeFilteredGenres returns a boolean if a field has been set.
func (o *SeriesSearchRequestV1) HasExcludeFilteredGenres() bool {
	if o != nil && !IsNil(o.ExcludeFilteredGenres) {
		return true
	}

	return false
}

// SetExcludeFilteredGenres gets a reference to the given bool and assigns it to the ExcludeFilteredGenres field.
func (o *SeriesSearchRequestV1) SetExcludeFilteredGenres(v bool) {
	o.ExcludeFilteredGenres = &v
}

func (o SeriesSearchRequestV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SeriesSearchRequestV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Search) {
		toSerialize["search"] = o.Search
	}
	if !IsNil(o.AddedBy) {
		toSerialize["added_by"] = o.AddedBy
	}
	if !IsNil(o.Stype) {
		toSerialize["stype"] = o.Stype
	}
	if !IsNil(o.Licensed) {
		toSerialize["licensed"] = o.Licensed
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Year) {
		toSerialize["year"] = o.Year
	}
	if !IsNil(o.FilterTypes) {
		toSerialize["filter_types"] = o.FilterTypes
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.List) {
		toSerialize["list"] = o.List
	}
	if !IsNil(o.Page) {
		toSerialize["page"] = o.Page
	}
	if !IsNil(o.Perpage) {
		toSerialize["perpage"] = o.Perpage
	}
	if !IsNil(o.Letter) {
		toSerialize["letter"] = o.Letter
	}
	if !IsNil(o.Genre) {
		toSerialize["genre"] = o.Genre
	}
	if !IsNil(o.ExcludeGenre) {
		toSerialize["exclude_genre"] = o.ExcludeGenre
	}
	if !IsNil(o.Orderby) {
		toSerialize["orderby"] = o.Orderby
	}
	if !IsNil(o.Pending) {
		toSerialize["pending"] = o.Pending
	}
	if !IsNil(o.IncludeRankMetadata) {
		toSerialize["include_rank_metadata"] = o.IncludeRankMetadata
	}
	if !IsNil(o.ExcludeFilteredGenres) {
		toSerialize["exclude_filtered_genres"] = o.ExcludeFilteredGenres
	}
	return toSerialize, nil
}

type NullableSeriesSearchRequestV1 struct {
	value *SeriesSearchRequestV1
	isSet bool
}

func (v NullableSeriesSearchRequestV1) Get() *SeriesSearchRequestV1 {
	return v.value
}

func (v *NullableSeriesSearchRequestV1) Set(val *SeriesSearchRequestV1) {
	v.value = val
	v.isSet = true
}

func (v NullableSeriesSearchRequestV1) IsSet() bool {
	return v.isSet
}

func (v *NullableSeriesSearchRequestV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSeriesSearchRequestV1(val *SeriesSearchRequestV1) *NullableSeriesSearchRequestV1 {
	return &NullableSeriesSearchRequestV1{value: val, isSet: true}
}

func (v NullableSeriesSearchRequestV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSeriesSearchRequestV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
