/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ForumAdminModelV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForumAdminModelV1{}

// ForumAdminModelV1 struct for ForumAdminModelV1
type ForumAdminModelV1 struct {
	User   *UserModelSearchV1 `json:"user,omitempty"`
	UserId *int64             `json:"user_id,omitempty"`
}

// NewForumAdminModelV1 instantiates a new ForumAdminModelV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForumAdminModelV1() *ForumAdminModelV1 {
	this := ForumAdminModelV1{}
	return &this
}

// NewForumAdminModelV1WithDefaults instantiates a new ForumAdminModelV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForumAdminModelV1WithDefaults() *ForumAdminModelV1 {
	this := ForumAdminModelV1{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *ForumAdminModelV1) GetUser() UserModelSearchV1 {
	if o == nil || IsNil(o.User) {
		var ret UserModelSearchV1
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumAdminModelV1) GetUserOk() (*UserModelSearchV1, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *ForumAdminModelV1) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given UserModelSearchV1 and assigns it to the User field.
func (o *ForumAdminModelV1) SetUser(v UserModelSearchV1) {
	o.User = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *ForumAdminModelV1) GetUserId() int64 {
	if o == nil || IsNil(o.UserId) {
		var ret int64
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumAdminModelV1) GetUserIdOk() (*int64, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *ForumAdminModelV1) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given int64 and assigns it to the UserId field.
func (o *ForumAdminModelV1) SetUserId(v int64) {
	o.UserId = &v
}

func (o ForumAdminModelV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForumAdminModelV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	return toSerialize, nil
}

type NullableForumAdminModelV1 struct {
	value *ForumAdminModelV1
	isSet bool
}

func (v NullableForumAdminModelV1) Get() *ForumAdminModelV1 {
	return v.value
}

func (v *NullableForumAdminModelV1) Set(val *ForumAdminModelV1) {
	v.value = val
	v.isSet = true
}

func (v NullableForumAdminModelV1) IsSet() bool {
	return v.isSet
}

func (v *NullableForumAdminModelV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForumAdminModelV1(val *ForumAdminModelV1) *NullableForumAdminModelV1 {
	return &NullableForumAdminModelV1{value: val, isSet: true}
}

func (v NullableForumAdminModelV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForumAdminModelV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
