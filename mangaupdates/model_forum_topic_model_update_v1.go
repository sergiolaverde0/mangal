/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ForumTopicModelUpdateV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForumTopicModelUpdateV1{}

// ForumTopicModelUpdateV1 struct for ForumTopicModelUpdateV1
type ForumTopicModelUpdateV1 struct {
	Topic *string `json:"topic,omitempty"`
	Forum *ForumTopicModelUpdateV1Forum `json:"forum,omitempty"`
	Admin *ForumTopicModelUpdateV1Admin `json:"admin,omitempty"`
}

// NewForumTopicModelUpdateV1 instantiates a new ForumTopicModelUpdateV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForumTopicModelUpdateV1() *ForumTopicModelUpdateV1 {
	this := ForumTopicModelUpdateV1{}
	return &this
}

// NewForumTopicModelUpdateV1WithDefaults instantiates a new ForumTopicModelUpdateV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForumTopicModelUpdateV1WithDefaults() *ForumTopicModelUpdateV1 {
	this := ForumTopicModelUpdateV1{}
	return &this
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *ForumTopicModelUpdateV1) GetTopic() string {
	if o == nil || IsNil(o.Topic) {
		var ret string
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumTopicModelUpdateV1) GetTopicOk() (*string, bool) {
	if o == nil || IsNil(o.Topic) {
		return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *ForumTopicModelUpdateV1) HasTopic() bool {
	if o != nil && !IsNil(o.Topic) {
		return true
	}

	return false
}

// SetTopic gets a reference to the given string and assigns it to the Topic field.
func (o *ForumTopicModelUpdateV1) SetTopic(v string) {
	o.Topic = &v
}

// GetForum returns the Forum field value if set, zero value otherwise.
func (o *ForumTopicModelUpdateV1) GetForum() ForumTopicModelUpdateV1Forum {
	if o == nil || IsNil(o.Forum) {
		var ret ForumTopicModelUpdateV1Forum
		return ret
	}
	return *o.Forum
}

// GetForumOk returns a tuple with the Forum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumTopicModelUpdateV1) GetForumOk() (*ForumTopicModelUpdateV1Forum, bool) {
	if o == nil || IsNil(o.Forum) {
		return nil, false
	}
	return o.Forum, true
}

// HasForum returns a boolean if a field has been set.
func (o *ForumTopicModelUpdateV1) HasForum() bool {
	if o != nil && !IsNil(o.Forum) {
		return true
	}

	return false
}

// SetForum gets a reference to the given ForumTopicModelUpdateV1Forum and assigns it to the Forum field.
func (o *ForumTopicModelUpdateV1) SetForum(v ForumTopicModelUpdateV1Forum) {
	o.Forum = &v
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *ForumTopicModelUpdateV1) GetAdmin() ForumTopicModelUpdateV1Admin {
	if o == nil || IsNil(o.Admin) {
		var ret ForumTopicModelUpdateV1Admin
		return ret
	}
	return *o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumTopicModelUpdateV1) GetAdminOk() (*ForumTopicModelUpdateV1Admin, bool) {
	if o == nil || IsNil(o.Admin) {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *ForumTopicModelUpdateV1) HasAdmin() bool {
	if o != nil && !IsNil(o.Admin) {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given ForumTopicModelUpdateV1Admin and assigns it to the Admin field.
func (o *ForumTopicModelUpdateV1) SetAdmin(v ForumTopicModelUpdateV1Admin) {
	o.Admin = &v
}

func (o ForumTopicModelUpdateV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForumTopicModelUpdateV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Topic) {
		toSerialize["topic"] = o.Topic
	}
	if !IsNil(o.Forum) {
		toSerialize["forum"] = o.Forum
	}
	if !IsNil(o.Admin) {
		toSerialize["admin"] = o.Admin
	}
	return toSerialize, nil
}

type NullableForumTopicModelUpdateV1 struct {
	value *ForumTopicModelUpdateV1
	isSet bool
}

func (v NullableForumTopicModelUpdateV1) Get() *ForumTopicModelUpdateV1 {
	return v.value
}

func (v *NullableForumTopicModelUpdateV1) Set(val *ForumTopicModelUpdateV1) {
	v.value = val
	v.isSet = true
}

func (v NullableForumTopicModelUpdateV1) IsSet() bool {
	return v.isSet
}

func (v *NullableForumTopicModelUpdateV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForumTopicModelUpdateV1(val *ForumTopicModelUpdateV1) *NullableForumTopicModelUpdateV1 {
	return &NullableForumTopicModelUpdateV1{value: val, isSet: true}
}

func (v NullableForumTopicModelUpdateV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForumTopicModelUpdateV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


