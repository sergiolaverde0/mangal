/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SeriesModelUpdateV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SeriesModelUpdateV1{}

// SeriesModelUpdateV1 struct for SeriesModelUpdateV1
type SeriesModelUpdateV1 struct {
	Title *string `json:"title,omitempty"`
	Associated []SeriesModelUpdateV1Associated `json:"associated,omitempty"`
	Description *string `json:"description,omitempty"`
	Type *string `json:"type,omitempty"`
	Year *string `json:"year,omitempty"`
	Genres []SeriesModelUpdateV1Genres `json:"genres,omitempty"`
	Categories []CategoriesModelUpdateV1 `json:"categories,omitempty"`
	Status *string `json:"status,omitempty"`
	Licensed *bool `json:"licensed,omitempty"`
	Completed *bool `json:"completed,omitempty"`
	Anime *SeriesModelUpdateV1Anime `json:"anime,omitempty"`
	RelatedSeries []SeriesModelUpdateV1RelatedSeries `json:"related_series,omitempty"`
	Authors []SeriesModelUpdateV1Authors `json:"authors,omitempty"`
	Publishers []SeriesModelUpdateV1Publishers `json:"publishers,omitempty"`
	Publications []SeriesModelUpdateV1Publications `json:"publications,omitempty"`
	Admin *SeriesModelUpdateV1Admin `json:"admin,omitempty"`
}

// NewSeriesModelUpdateV1 instantiates a new SeriesModelUpdateV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSeriesModelUpdateV1() *SeriesModelUpdateV1 {
	this := SeriesModelUpdateV1{}
	return &this
}

// NewSeriesModelUpdateV1WithDefaults instantiates a new SeriesModelUpdateV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSeriesModelUpdateV1WithDefaults() *SeriesModelUpdateV1 {
	this := SeriesModelUpdateV1{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *SeriesModelUpdateV1) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelUpdateV1) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *SeriesModelUpdateV1) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *SeriesModelUpdateV1) SetTitle(v string) {
	o.Title = &v
}

// GetAssociated returns the Associated field value if set, zero value otherwise.
func (o *SeriesModelUpdateV1) GetAssociated() []SeriesModelUpdateV1Associated {
	if o == nil || IsNil(o.Associated) {
		var ret []SeriesModelUpdateV1Associated
		return ret
	}
	return o.Associated
}

// GetAssociatedOk returns a tuple with the Associated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelUpdateV1) GetAssociatedOk() ([]SeriesModelUpdateV1Associated, bool) {
	if o == nil || IsNil(o.Associated) {
		return nil, false
	}
	return o.Associated, true
}

// HasAssociated returns a boolean if a field has been set.
func (o *SeriesModelUpdateV1) HasAssociated() bool {
	if o != nil && !IsNil(o.Associated) {
		return true
	}

	return false
}

// SetAssociated gets a reference to the given []SeriesModelUpdateV1Associated and assigns it to the Associated field.
func (o *SeriesModelUpdateV1) SetAssociated(v []SeriesModelUpdateV1Associated) {
	o.Associated = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SeriesModelUpdateV1) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelUpdateV1) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SeriesModelUpdateV1) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SeriesModelUpdateV1) SetDescription(v string) {
	o.Description = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SeriesModelUpdateV1) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelUpdateV1) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SeriesModelUpdateV1) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SeriesModelUpdateV1) SetType(v string) {
	o.Type = &v
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *SeriesModelUpdateV1) GetYear() string {
	if o == nil || IsNil(o.Year) {
		var ret string
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelUpdateV1) GetYearOk() (*string, bool) {
	if o == nil || IsNil(o.Year) {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *SeriesModelUpdateV1) HasYear() bool {
	if o != nil && !IsNil(o.Year) {
		return true
	}

	return false
}

// SetYear gets a reference to the given string and assigns it to the Year field.
func (o *SeriesModelUpdateV1) SetYear(v string) {
	o.Year = &v
}

// GetGenres returns the Genres field value if set, zero value otherwise.
func (o *SeriesModelUpdateV1) GetGenres() []SeriesModelUpdateV1Genres {
	if o == nil || IsNil(o.Genres) {
		var ret []SeriesModelUpdateV1Genres
		return ret
	}
	return o.Genres
}

// GetGenresOk returns a tuple with the Genres field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelUpdateV1) GetGenresOk() ([]SeriesModelUpdateV1Genres, bool) {
	if o == nil || IsNil(o.Genres) {
		return nil, false
	}
	return o.Genres, true
}

// HasGenres returns a boolean if a field has been set.
func (o *SeriesModelUpdateV1) HasGenres() bool {
	if o != nil && !IsNil(o.Genres) {
		return true
	}

	return false
}

// SetGenres gets a reference to the given []SeriesModelUpdateV1Genres and assigns it to the Genres field.
func (o *SeriesModelUpdateV1) SetGenres(v []SeriesModelUpdateV1Genres) {
	o.Genres = v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *SeriesModelUpdateV1) GetCategories() []CategoriesModelUpdateV1 {
	if o == nil || IsNil(o.Categories) {
		var ret []CategoriesModelUpdateV1
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelUpdateV1) GetCategoriesOk() ([]CategoriesModelUpdateV1, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *SeriesModelUpdateV1) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []CategoriesModelUpdateV1 and assigns it to the Categories field.
func (o *SeriesModelUpdateV1) SetCategories(v []CategoriesModelUpdateV1) {
	o.Categories = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SeriesModelUpdateV1) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelUpdateV1) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SeriesModelUpdateV1) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SeriesModelUpdateV1) SetStatus(v string) {
	o.Status = &v
}

// GetLicensed returns the Licensed field value if set, zero value otherwise.
func (o *SeriesModelUpdateV1) GetLicensed() bool {
	if o == nil || IsNil(o.Licensed) {
		var ret bool
		return ret
	}
	return *o.Licensed
}

// GetLicensedOk returns a tuple with the Licensed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelUpdateV1) GetLicensedOk() (*bool, bool) {
	if o == nil || IsNil(o.Licensed) {
		return nil, false
	}
	return o.Licensed, true
}

// HasLicensed returns a boolean if a field has been set.
func (o *SeriesModelUpdateV1) HasLicensed() bool {
	if o != nil && !IsNil(o.Licensed) {
		return true
	}

	return false
}

// SetLicensed gets a reference to the given bool and assigns it to the Licensed field.
func (o *SeriesModelUpdateV1) SetLicensed(v bool) {
	o.Licensed = &v
}

// GetCompleted returns the Completed field value if set, zero value otherwise.
func (o *SeriesModelUpdateV1) GetCompleted() bool {
	if o == nil || IsNil(o.Completed) {
		var ret bool
		return ret
	}
	return *o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelUpdateV1) GetCompletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Completed) {
		return nil, false
	}
	return o.Completed, true
}

// HasCompleted returns a boolean if a field has been set.
func (o *SeriesModelUpdateV1) HasCompleted() bool {
	if o != nil && !IsNil(o.Completed) {
		return true
	}

	return false
}

// SetCompleted gets a reference to the given bool and assigns it to the Completed field.
func (o *SeriesModelUpdateV1) SetCompleted(v bool) {
	o.Completed = &v
}

// GetAnime returns the Anime field value if set, zero value otherwise.
func (o *SeriesModelUpdateV1) GetAnime() SeriesModelUpdateV1Anime {
	if o == nil || IsNil(o.Anime) {
		var ret SeriesModelUpdateV1Anime
		return ret
	}
	return *o.Anime
}

// GetAnimeOk returns a tuple with the Anime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelUpdateV1) GetAnimeOk() (*SeriesModelUpdateV1Anime, bool) {
	if o == nil || IsNil(o.Anime) {
		return nil, false
	}
	return o.Anime, true
}

// HasAnime returns a boolean if a field has been set.
func (o *SeriesModelUpdateV1) HasAnime() bool {
	if o != nil && !IsNil(o.Anime) {
		return true
	}

	return false
}

// SetAnime gets a reference to the given SeriesModelUpdateV1Anime and assigns it to the Anime field.
func (o *SeriesModelUpdateV1) SetAnime(v SeriesModelUpdateV1Anime) {
	o.Anime = &v
}

// GetRelatedSeries returns the RelatedSeries field value if set, zero value otherwise.
func (o *SeriesModelUpdateV1) GetRelatedSeries() []SeriesModelUpdateV1RelatedSeries {
	if o == nil || IsNil(o.RelatedSeries) {
		var ret []SeriesModelUpdateV1RelatedSeries
		return ret
	}
	return o.RelatedSeries
}

// GetRelatedSeriesOk returns a tuple with the RelatedSeries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelUpdateV1) GetRelatedSeriesOk() ([]SeriesModelUpdateV1RelatedSeries, bool) {
	if o == nil || IsNil(o.RelatedSeries) {
		return nil, false
	}
	return o.RelatedSeries, true
}

// HasRelatedSeries returns a boolean if a field has been set.
func (o *SeriesModelUpdateV1) HasRelatedSeries() bool {
	if o != nil && !IsNil(o.RelatedSeries) {
		return true
	}

	return false
}

// SetRelatedSeries gets a reference to the given []SeriesModelUpdateV1RelatedSeries and assigns it to the RelatedSeries field.
func (o *SeriesModelUpdateV1) SetRelatedSeries(v []SeriesModelUpdateV1RelatedSeries) {
	o.RelatedSeries = v
}

// GetAuthors returns the Authors field value if set, zero value otherwise.
func (o *SeriesModelUpdateV1) GetAuthors() []SeriesModelUpdateV1Authors {
	if o == nil || IsNil(o.Authors) {
		var ret []SeriesModelUpdateV1Authors
		return ret
	}
	return o.Authors
}

// GetAuthorsOk returns a tuple with the Authors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelUpdateV1) GetAuthorsOk() ([]SeriesModelUpdateV1Authors, bool) {
	if o == nil || IsNil(o.Authors) {
		return nil, false
	}
	return o.Authors, true
}

// HasAuthors returns a boolean if a field has been set.
func (o *SeriesModelUpdateV1) HasAuthors() bool {
	if o != nil && !IsNil(o.Authors) {
		return true
	}

	return false
}

// SetAuthors gets a reference to the given []SeriesModelUpdateV1Authors and assigns it to the Authors field.
func (o *SeriesModelUpdateV1) SetAuthors(v []SeriesModelUpdateV1Authors) {
	o.Authors = v
}

// GetPublishers returns the Publishers field value if set, zero value otherwise.
func (o *SeriesModelUpdateV1) GetPublishers() []SeriesModelUpdateV1Publishers {
	if o == nil || IsNil(o.Publishers) {
		var ret []SeriesModelUpdateV1Publishers
		return ret
	}
	return o.Publishers
}

// GetPublishersOk returns a tuple with the Publishers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelUpdateV1) GetPublishersOk() ([]SeriesModelUpdateV1Publishers, bool) {
	if o == nil || IsNil(o.Publishers) {
		return nil, false
	}
	return o.Publishers, true
}

// HasPublishers returns a boolean if a field has been set.
func (o *SeriesModelUpdateV1) HasPublishers() bool {
	if o != nil && !IsNil(o.Publishers) {
		return true
	}

	return false
}

// SetPublishers gets a reference to the given []SeriesModelUpdateV1Publishers and assigns it to the Publishers field.
func (o *SeriesModelUpdateV1) SetPublishers(v []SeriesModelUpdateV1Publishers) {
	o.Publishers = v
}

// GetPublications returns the Publications field value if set, zero value otherwise.
func (o *SeriesModelUpdateV1) GetPublications() []SeriesModelUpdateV1Publications {
	if o == nil || IsNil(o.Publications) {
		var ret []SeriesModelUpdateV1Publications
		return ret
	}
	return o.Publications
}

// GetPublicationsOk returns a tuple with the Publications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelUpdateV1) GetPublicationsOk() ([]SeriesModelUpdateV1Publications, bool) {
	if o == nil || IsNil(o.Publications) {
		return nil, false
	}
	return o.Publications, true
}

// HasPublications returns a boolean if a field has been set.
func (o *SeriesModelUpdateV1) HasPublications() bool {
	if o != nil && !IsNil(o.Publications) {
		return true
	}

	return false
}

// SetPublications gets a reference to the given []SeriesModelUpdateV1Publications and assigns it to the Publications field.
func (o *SeriesModelUpdateV1) SetPublications(v []SeriesModelUpdateV1Publications) {
	o.Publications = v
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *SeriesModelUpdateV1) GetAdmin() SeriesModelUpdateV1Admin {
	if o == nil || IsNil(o.Admin) {
		var ret SeriesModelUpdateV1Admin
		return ret
	}
	return *o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelUpdateV1) GetAdminOk() (*SeriesModelUpdateV1Admin, bool) {
	if o == nil || IsNil(o.Admin) {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *SeriesModelUpdateV1) HasAdmin() bool {
	if o != nil && !IsNil(o.Admin) {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given SeriesModelUpdateV1Admin and assigns it to the Admin field.
func (o *SeriesModelUpdateV1) SetAdmin(v SeriesModelUpdateV1Admin) {
	o.Admin = &v
}

func (o SeriesModelUpdateV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SeriesModelUpdateV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Associated) {
		toSerialize["associated"] = o.Associated
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Year) {
		toSerialize["year"] = o.Year
	}
	if !IsNil(o.Genres) {
		toSerialize["genres"] = o.Genres
	}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Licensed) {
		toSerialize["licensed"] = o.Licensed
	}
	if !IsNil(o.Completed) {
		toSerialize["completed"] = o.Completed
	}
	if !IsNil(o.Anime) {
		toSerialize["anime"] = o.Anime
	}
	if !IsNil(o.RelatedSeries) {
		toSerialize["related_series"] = o.RelatedSeries
	}
	if !IsNil(o.Authors) {
		toSerialize["authors"] = o.Authors
	}
	if !IsNil(o.Publishers) {
		toSerialize["publishers"] = o.Publishers
	}
	if !IsNil(o.Publications) {
		toSerialize["publications"] = o.Publications
	}
	if !IsNil(o.Admin) {
		toSerialize["admin"] = o.Admin
	}
	return toSerialize, nil
}

type NullableSeriesModelUpdateV1 struct {
	value *SeriesModelUpdateV1
	isSet bool
}

func (v NullableSeriesModelUpdateV1) Get() *SeriesModelUpdateV1 {
	return v.value
}

func (v *NullableSeriesModelUpdateV1) Set(val *SeriesModelUpdateV1) {
	v.value = val
	v.isSet = true
}

func (v NullableSeriesModelUpdateV1) IsSet() bool {
	return v.isSet
}

func (v *NullableSeriesModelUpdateV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSeriesModelUpdateV1(val *SeriesModelUpdateV1) *NullableSeriesModelUpdateV1 {
	return &NullableSeriesModelUpdateV1{value: val, isSet: true}
}

func (v NullableSeriesModelUpdateV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSeriesModelUpdateV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


