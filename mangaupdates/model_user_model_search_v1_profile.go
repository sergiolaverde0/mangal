/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserModelSearchV1Profile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserModelSearchV1Profile{}

// UserModelSearchV1Profile struct for UserModelSearchV1Profile
type UserModelSearchV1Profile struct {
	Upgrade *UserModelSearchV1ProfileUpgrade `json:"upgrade,omitempty"`
}

// NewUserModelSearchV1Profile instantiates a new UserModelSearchV1Profile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserModelSearchV1Profile() *UserModelSearchV1Profile {
	this := UserModelSearchV1Profile{}
	return &this
}

// NewUserModelSearchV1ProfileWithDefaults instantiates a new UserModelSearchV1Profile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserModelSearchV1ProfileWithDefaults() *UserModelSearchV1Profile {
	this := UserModelSearchV1Profile{}
	return &this
}

// GetUpgrade returns the Upgrade field value if set, zero value otherwise.
func (o *UserModelSearchV1Profile) GetUpgrade() UserModelSearchV1ProfileUpgrade {
	if o == nil || IsNil(o.Upgrade) {
		var ret UserModelSearchV1ProfileUpgrade
		return ret
	}
	return *o.Upgrade
}

// GetUpgradeOk returns a tuple with the Upgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserModelSearchV1Profile) GetUpgradeOk() (*UserModelSearchV1ProfileUpgrade, bool) {
	if o == nil || IsNil(o.Upgrade) {
		return nil, false
	}
	return o.Upgrade, true
}

// HasUpgrade returns a boolean if a field has been set.
func (o *UserModelSearchV1Profile) HasUpgrade() bool {
	if o != nil && !IsNil(o.Upgrade) {
		return true
	}

	return false
}

// SetUpgrade gets a reference to the given UserModelSearchV1ProfileUpgrade and assigns it to the Upgrade field.
func (o *UserModelSearchV1Profile) SetUpgrade(v UserModelSearchV1ProfileUpgrade) {
	o.Upgrade = &v
}

func (o UserModelSearchV1Profile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserModelSearchV1Profile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Upgrade) {
		toSerialize["upgrade"] = o.Upgrade
	}
	return toSerialize, nil
}

type NullableUserModelSearchV1Profile struct {
	value *UserModelSearchV1Profile
	isSet bool
}

func (v NullableUserModelSearchV1Profile) Get() *UserModelSearchV1Profile {
	return v.value
}

func (v *NullableUserModelSearchV1Profile) Set(val *UserModelSearchV1Profile) {
	v.value = val
	v.isSet = true
}

func (v NullableUserModelSearchV1Profile) IsSet() bool {
	return v.isSet
}

func (v *NullableUserModelSearchV1Profile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserModelSearchV1Profile(val *UserModelSearchV1Profile) *NullableUserModelSearchV1Profile {
	return &NullableUserModelSearchV1Profile{value: val, isSet: true}
}

func (v NullableUserModelSearchV1Profile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserModelSearchV1Profile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


