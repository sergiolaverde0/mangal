/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ForumForumModelV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForumForumModelV1{}

// ForumForumModelV1 struct for ForumForumModelV1
type ForumForumModelV1 struct {
	ForumId     *int64                     `json:"forum_id,omitempty"`
	Name        *string                    `json:"name,omitempty"`
	Url         *string                    `json:"url,omitempty"`
	Description *string                    `json:"description,omitempty"`
	Position    *int64                     `json:"position,omitempty"`
	Category    *ForumForumModelV1Category `json:"category,omitempty"`
	Moderators  []ForumAdminModelV1        `json:"moderators,omitempty"`
	Series      *SeriesModelSearchV1       `json:"series,omitempty"`
	Stats       *ForumForumModelV1Stats    `json:"stats,omitempty"`
	LastTopic   *ForumTopicModelSearchV1   `json:"last_topic,omitempty"`
	Admin       *ForumForumModelV1Admin    `json:"admin,omitempty"`
}

// NewForumForumModelV1 instantiates a new ForumForumModelV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForumForumModelV1() *ForumForumModelV1 {
	this := ForumForumModelV1{}
	return &this
}

// NewForumForumModelV1WithDefaults instantiates a new ForumForumModelV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForumForumModelV1WithDefaults() *ForumForumModelV1 {
	this := ForumForumModelV1{}
	return &this
}

// GetForumId returns the ForumId field value if set, zero value otherwise.
func (o *ForumForumModelV1) GetForumId() int64 {
	if o == nil || IsNil(o.ForumId) {
		var ret int64
		return ret
	}
	return *o.ForumId
}

// GetForumIdOk returns a tuple with the ForumId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumForumModelV1) GetForumIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ForumId) {
		return nil, false
	}
	return o.ForumId, true
}

// HasForumId returns a boolean if a field has been set.
func (o *ForumForumModelV1) HasForumId() bool {
	if o != nil && !IsNil(o.ForumId) {
		return true
	}

	return false
}

// SetForumId gets a reference to the given int64 and assigns it to the ForumId field.
func (o *ForumForumModelV1) SetForumId(v int64) {
	o.ForumId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ForumForumModelV1) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumForumModelV1) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ForumForumModelV1) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ForumForumModelV1) SetName(v string) {
	o.Name = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ForumForumModelV1) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumForumModelV1) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ForumForumModelV1) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ForumForumModelV1) SetUrl(v string) {
	o.Url = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ForumForumModelV1) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumForumModelV1) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ForumForumModelV1) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ForumForumModelV1) SetDescription(v string) {
	o.Description = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *ForumForumModelV1) GetPosition() int64 {
	if o == nil || IsNil(o.Position) {
		var ret int64
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumForumModelV1) GetPositionOk() (*int64, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *ForumForumModelV1) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int64 and assigns it to the Position field.
func (o *ForumForumModelV1) SetPosition(v int64) {
	o.Position = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *ForumForumModelV1) GetCategory() ForumForumModelV1Category {
	if o == nil || IsNil(o.Category) {
		var ret ForumForumModelV1Category
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumForumModelV1) GetCategoryOk() (*ForumForumModelV1Category, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *ForumForumModelV1) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given ForumForumModelV1Category and assigns it to the Category field.
func (o *ForumForumModelV1) SetCategory(v ForumForumModelV1Category) {
	o.Category = &v
}

// GetModerators returns the Moderators field value if set, zero value otherwise.
func (o *ForumForumModelV1) GetModerators() []ForumAdminModelV1 {
	if o == nil || IsNil(o.Moderators) {
		var ret []ForumAdminModelV1
		return ret
	}
	return o.Moderators
}

// GetModeratorsOk returns a tuple with the Moderators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumForumModelV1) GetModeratorsOk() ([]ForumAdminModelV1, bool) {
	if o == nil || IsNil(o.Moderators) {
		return nil, false
	}
	return o.Moderators, true
}

// HasModerators returns a boolean if a field has been set.
func (o *ForumForumModelV1) HasModerators() bool {
	if o != nil && !IsNil(o.Moderators) {
		return true
	}

	return false
}

// SetModerators gets a reference to the given []ForumAdminModelV1 and assigns it to the Moderators field.
func (o *ForumForumModelV1) SetModerators(v []ForumAdminModelV1) {
	o.Moderators = v
}

// GetSeries returns the Series field value if set, zero value otherwise.
func (o *ForumForumModelV1) GetSeries() SeriesModelSearchV1 {
	if o == nil || IsNil(o.Series) {
		var ret SeriesModelSearchV1
		return ret
	}
	return *o.Series
}

// GetSeriesOk returns a tuple with the Series field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumForumModelV1) GetSeriesOk() (*SeriesModelSearchV1, bool) {
	if o == nil || IsNil(o.Series) {
		return nil, false
	}
	return o.Series, true
}

// HasSeries returns a boolean if a field has been set.
func (o *ForumForumModelV1) HasSeries() bool {
	if o != nil && !IsNil(o.Series) {
		return true
	}

	return false
}

// SetSeries gets a reference to the given SeriesModelSearchV1 and assigns it to the Series field.
func (o *ForumForumModelV1) SetSeries(v SeriesModelSearchV1) {
	o.Series = &v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *ForumForumModelV1) GetStats() ForumForumModelV1Stats {
	if o == nil || IsNil(o.Stats) {
		var ret ForumForumModelV1Stats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumForumModelV1) GetStatsOk() (*ForumForumModelV1Stats, bool) {
	if o == nil || IsNil(o.Stats) {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *ForumForumModelV1) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given ForumForumModelV1Stats and assigns it to the Stats field.
func (o *ForumForumModelV1) SetStats(v ForumForumModelV1Stats) {
	o.Stats = &v
}

// GetLastTopic returns the LastTopic field value if set, zero value otherwise.
func (o *ForumForumModelV1) GetLastTopic() ForumTopicModelSearchV1 {
	if o == nil || IsNil(o.LastTopic) {
		var ret ForumTopicModelSearchV1
		return ret
	}
	return *o.LastTopic
}

// GetLastTopicOk returns a tuple with the LastTopic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumForumModelV1) GetLastTopicOk() (*ForumTopicModelSearchV1, bool) {
	if o == nil || IsNil(o.LastTopic) {
		return nil, false
	}
	return o.LastTopic, true
}

// HasLastTopic returns a boolean if a field has been set.
func (o *ForumForumModelV1) HasLastTopic() bool {
	if o != nil && !IsNil(o.LastTopic) {
		return true
	}

	return false
}

// SetLastTopic gets a reference to the given ForumTopicModelSearchV1 and assigns it to the LastTopic field.
func (o *ForumForumModelV1) SetLastTopic(v ForumTopicModelSearchV1) {
	o.LastTopic = &v
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *ForumForumModelV1) GetAdmin() ForumForumModelV1Admin {
	if o == nil || IsNil(o.Admin) {
		var ret ForumForumModelV1Admin
		return ret
	}
	return *o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumForumModelV1) GetAdminOk() (*ForumForumModelV1Admin, bool) {
	if o == nil || IsNil(o.Admin) {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *ForumForumModelV1) HasAdmin() bool {
	if o != nil && !IsNil(o.Admin) {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given ForumForumModelV1Admin and assigns it to the Admin field.
func (o *ForumForumModelV1) SetAdmin(v ForumForumModelV1Admin) {
	o.Admin = &v
}

func (o ForumForumModelV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForumForumModelV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ForumId) {
		toSerialize["forum_id"] = o.ForumId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Moderators) {
		toSerialize["moderators"] = o.Moderators
	}
	if !IsNil(o.Series) {
		toSerialize["series"] = o.Series
	}
	if !IsNil(o.Stats) {
		toSerialize["stats"] = o.Stats
	}
	if !IsNil(o.LastTopic) {
		toSerialize["last_topic"] = o.LastTopic
	}
	if !IsNil(o.Admin) {
		toSerialize["admin"] = o.Admin
	}
	return toSerialize, nil
}

type NullableForumForumModelV1 struct {
	value *ForumForumModelV1
	isSet bool
}

func (v NullableForumForumModelV1) Get() *ForumForumModelV1 {
	return v.value
}

func (v *NullableForumForumModelV1) Set(val *ForumForumModelV1) {
	v.value = val
	v.isSet = true
}

func (v NullableForumForumModelV1) IsSet() bool {
	return v.isSet
}

func (v *NullableForumForumModelV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForumForumModelV1(val *ForumForumModelV1) *NullableForumForumModelV1 {
	return &NullableForumForumModelV1{value: val, isSet: true}
}

func (v NullableForumForumModelV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForumForumModelV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
