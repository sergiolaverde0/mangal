/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UserSubscribedTopicModelV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSubscribedTopicModelV1{}

// UserSubscribedTopicModelV1 struct for UserSubscribedTopicModelV1
type UserSubscribedTopicModelV1 struct {
	TopicId             *int64                   `json:"topic_id,omitempty"`
	Topic               *ForumTopicModelSearchV1 `json:"topic,omitempty"`
	TimeSubscribedSince *TimeV1                  `json:"time_subscribed_since,omitempty"`
}

// NewUserSubscribedTopicModelV1 instantiates a new UserSubscribedTopicModelV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSubscribedTopicModelV1() *UserSubscribedTopicModelV1 {
	this := UserSubscribedTopicModelV1{}
	return &this
}

// NewUserSubscribedTopicModelV1WithDefaults instantiates a new UserSubscribedTopicModelV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSubscribedTopicModelV1WithDefaults() *UserSubscribedTopicModelV1 {
	this := UserSubscribedTopicModelV1{}
	return &this
}

// GetTopicId returns the TopicId field value if set, zero value otherwise.
func (o *UserSubscribedTopicModelV1) GetTopicId() int64 {
	if o == nil || IsNil(o.TopicId) {
		var ret int64
		return ret
	}
	return *o.TopicId
}

// GetTopicIdOk returns a tuple with the TopicId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSubscribedTopicModelV1) GetTopicIdOk() (*int64, bool) {
	if o == nil || IsNil(o.TopicId) {
		return nil, false
	}
	return o.TopicId, true
}

// HasTopicId returns a boolean if a field has been set.
func (o *UserSubscribedTopicModelV1) HasTopicId() bool {
	if o != nil && !IsNil(o.TopicId) {
		return true
	}

	return false
}

// SetTopicId gets a reference to the given int64 and assigns it to the TopicId field.
func (o *UserSubscribedTopicModelV1) SetTopicId(v int64) {
	o.TopicId = &v
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *UserSubscribedTopicModelV1) GetTopic() ForumTopicModelSearchV1 {
	if o == nil || IsNil(o.Topic) {
		var ret ForumTopicModelSearchV1
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSubscribedTopicModelV1) GetTopicOk() (*ForumTopicModelSearchV1, bool) {
	if o == nil || IsNil(o.Topic) {
		return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *UserSubscribedTopicModelV1) HasTopic() bool {
	if o != nil && !IsNil(o.Topic) {
		return true
	}

	return false
}

// SetTopic gets a reference to the given ForumTopicModelSearchV1 and assigns it to the Topic field.
func (o *UserSubscribedTopicModelV1) SetTopic(v ForumTopicModelSearchV1) {
	o.Topic = &v
}

// GetTimeSubscribedSince returns the TimeSubscribedSince field value if set, zero value otherwise.
func (o *UserSubscribedTopicModelV1) GetTimeSubscribedSince() TimeV1 {
	if o == nil || IsNil(o.TimeSubscribedSince) {
		var ret TimeV1
		return ret
	}
	return *o.TimeSubscribedSince
}

// GetTimeSubscribedSinceOk returns a tuple with the TimeSubscribedSince field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSubscribedTopicModelV1) GetTimeSubscribedSinceOk() (*TimeV1, bool) {
	if o == nil || IsNil(o.TimeSubscribedSince) {
		return nil, false
	}
	return o.TimeSubscribedSince, true
}

// HasTimeSubscribedSince returns a boolean if a field has been set.
func (o *UserSubscribedTopicModelV1) HasTimeSubscribedSince() bool {
	if o != nil && !IsNil(o.TimeSubscribedSince) {
		return true
	}

	return false
}

// SetTimeSubscribedSince gets a reference to the given TimeV1 and assigns it to the TimeSubscribedSince field.
func (o *UserSubscribedTopicModelV1) SetTimeSubscribedSince(v TimeV1) {
	o.TimeSubscribedSince = &v
}

func (o UserSubscribedTopicModelV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSubscribedTopicModelV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TopicId) {
		toSerialize["topic_id"] = o.TopicId
	}
	if !IsNil(o.Topic) {
		toSerialize["topic"] = o.Topic
	}
	if !IsNil(o.TimeSubscribedSince) {
		toSerialize["time_subscribed_since"] = o.TimeSubscribedSince
	}
	return toSerialize, nil
}

type NullableUserSubscribedTopicModelV1 struct {
	value *UserSubscribedTopicModelV1
	isSet bool
}

func (v NullableUserSubscribedTopicModelV1) Get() *UserSubscribedTopicModelV1 {
	return v.value
}

func (v *NullableUserSubscribedTopicModelV1) Set(val *UserSubscribedTopicModelV1) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSubscribedTopicModelV1) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSubscribedTopicModelV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSubscribedTopicModelV1(val *UserSubscribedTopicModelV1) *NullableUserSubscribedTopicModelV1 {
	return &NullableUserSubscribedTopicModelV1{value: val, isSet: true}
}

func (v NullableUserSubscribedTopicModelV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSubscribedTopicModelV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
