/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the TimeV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeV1{}

// TimeV1 struct for TimeV1
type TimeV1 struct {
	Timestamp *int64     `json:"timestamp,omitempty"`
	AsRfc3339 *time.Time `json:"as_rfc3339,omitempty"`
	AsString  *string    `json:"as_string,omitempty"`
}

// NewTimeV1 instantiates a new TimeV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeV1() *TimeV1 {
	this := TimeV1{}
	return &this
}

// NewTimeV1WithDefaults instantiates a new TimeV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeV1WithDefaults() *TimeV1 {
	this := TimeV1{}
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *TimeV1) GetTimestamp() int64 {
	if o == nil || IsNil(o.Timestamp) {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeV1) GetTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *TimeV1) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *TimeV1) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetAsRfc3339 returns the AsRfc3339 field value if set, zero value otherwise.
func (o *TimeV1) GetAsRfc3339() time.Time {
	if o == nil || IsNil(o.AsRfc3339) {
		var ret time.Time
		return ret
	}
	return *o.AsRfc3339
}

// GetAsRfc3339Ok returns a tuple with the AsRfc3339 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeV1) GetAsRfc3339Ok() (*time.Time, bool) {
	if o == nil || IsNil(o.AsRfc3339) {
		return nil, false
	}
	return o.AsRfc3339, true
}

// HasAsRfc3339 returns a boolean if a field has been set.
func (o *TimeV1) HasAsRfc3339() bool {
	if o != nil && !IsNil(o.AsRfc3339) {
		return true
	}

	return false
}

// SetAsRfc3339 gets a reference to the given time.Time and assigns it to the AsRfc3339 field.
func (o *TimeV1) SetAsRfc3339(v time.Time) {
	o.AsRfc3339 = &v
}

// GetAsString returns the AsString field value if set, zero value otherwise.
func (o *TimeV1) GetAsString() string {
	if o == nil || IsNil(o.AsString) {
		var ret string
		return ret
	}
	return *o.AsString
}

// GetAsStringOk returns a tuple with the AsString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeV1) GetAsStringOk() (*string, bool) {
	if o == nil || IsNil(o.AsString) {
		return nil, false
	}
	return o.AsString, true
}

// HasAsString returns a boolean if a field has been set.
func (o *TimeV1) HasAsString() bool {
	if o != nil && !IsNil(o.AsString) {
		return true
	}

	return false
}

// SetAsString gets a reference to the given string and assigns it to the AsString field.
func (o *TimeV1) SetAsString(v string) {
	o.AsString = &v
}

func (o TimeV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.AsRfc3339) {
		toSerialize["as_rfc3339"] = o.AsRfc3339
	}
	if !IsNil(o.AsString) {
		toSerialize["as_string"] = o.AsString
	}
	return toSerialize, nil
}

type NullableTimeV1 struct {
	value *TimeV1
	isSet bool
}

func (v NullableTimeV1) Get() *TimeV1 {
	return v.value
}

func (v *NullableTimeV1) Set(val *TimeV1) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeV1) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeV1(val *TimeV1) *NullableTimeV1 {
	return &NullableTimeV1{value: val, isSet: true}
}

func (v NullableTimeV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
