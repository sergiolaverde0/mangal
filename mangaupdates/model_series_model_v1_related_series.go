/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SeriesModelV1RelatedSeries type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SeriesModelV1RelatedSeries{}

// SeriesModelV1RelatedSeries struct for SeriesModelV1RelatedSeries
type SeriesModelV1RelatedSeries struct {
	RelationId            *int64  `json:"relation_id,omitempty"`
	RelationType          string  `json:"relation_type"`
	RelatedSeriesId       int64   `json:"related_series_id"`
	RelatedSeriesName     *string `json:"related_series_name,omitempty"`
	TriggeredByRelationId *int64  `json:"triggered_by_relation_id,omitempty"`
}

// NewSeriesModelV1RelatedSeries instantiates a new SeriesModelV1RelatedSeries object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSeriesModelV1RelatedSeries(relationType string, relatedSeriesId int64) *SeriesModelV1RelatedSeries {
	this := SeriesModelV1RelatedSeries{}
	this.RelationType = relationType
	this.RelatedSeriesId = relatedSeriesId
	return &this
}

// NewSeriesModelV1RelatedSeriesWithDefaults instantiates a new SeriesModelV1RelatedSeries object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSeriesModelV1RelatedSeriesWithDefaults() *SeriesModelV1RelatedSeries {
	this := SeriesModelV1RelatedSeries{}
	return &this
}

// GetRelationId returns the RelationId field value if set, zero value otherwise.
func (o *SeriesModelV1RelatedSeries) GetRelationId() int64 {
	if o == nil || IsNil(o.RelationId) {
		var ret int64
		return ret
	}
	return *o.RelationId
}

// GetRelationIdOk returns a tuple with the RelationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelV1RelatedSeries) GetRelationIdOk() (*int64, bool) {
	if o == nil || IsNil(o.RelationId) {
		return nil, false
	}
	return o.RelationId, true
}

// HasRelationId returns a boolean if a field has been set.
func (o *SeriesModelV1RelatedSeries) HasRelationId() bool {
	if o != nil && !IsNil(o.RelationId) {
		return true
	}

	return false
}

// SetRelationId gets a reference to the given int64 and assigns it to the RelationId field.
func (o *SeriesModelV1RelatedSeries) SetRelationId(v int64) {
	o.RelationId = &v
}

// GetRelationType returns the RelationType field value
func (o *SeriesModelV1RelatedSeries) GetRelationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RelationType
}

// GetRelationTypeOk returns a tuple with the RelationType field value
// and a boolean to check if the value has been set.
func (o *SeriesModelV1RelatedSeries) GetRelationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelationType, true
}

// SetRelationType sets field value
func (o *SeriesModelV1RelatedSeries) SetRelationType(v string) {
	o.RelationType = v
}

// GetRelatedSeriesId returns the RelatedSeriesId field value
func (o *SeriesModelV1RelatedSeries) GetRelatedSeriesId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RelatedSeriesId
}

// GetRelatedSeriesIdOk returns a tuple with the RelatedSeriesId field value
// and a boolean to check if the value has been set.
func (o *SeriesModelV1RelatedSeries) GetRelatedSeriesIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelatedSeriesId, true
}

// SetRelatedSeriesId sets field value
func (o *SeriesModelV1RelatedSeries) SetRelatedSeriesId(v int64) {
	o.RelatedSeriesId = v
}

// GetRelatedSeriesName returns the RelatedSeriesName field value if set, zero value otherwise.
func (o *SeriesModelV1RelatedSeries) GetRelatedSeriesName() string {
	if o == nil || IsNil(o.RelatedSeriesName) {
		var ret string
		return ret
	}
	return *o.RelatedSeriesName
}

// GetRelatedSeriesNameOk returns a tuple with the RelatedSeriesName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelV1RelatedSeries) GetRelatedSeriesNameOk() (*string, bool) {
	if o == nil || IsNil(o.RelatedSeriesName) {
		return nil, false
	}
	return o.RelatedSeriesName, true
}

// HasRelatedSeriesName returns a boolean if a field has been set.
func (o *SeriesModelV1RelatedSeries) HasRelatedSeriesName() bool {
	if o != nil && !IsNil(o.RelatedSeriesName) {
		return true
	}

	return false
}

// SetRelatedSeriesName gets a reference to the given string and assigns it to the RelatedSeriesName field.
func (o *SeriesModelV1RelatedSeries) SetRelatedSeriesName(v string) {
	o.RelatedSeriesName = &v
}

// GetTriggeredByRelationId returns the TriggeredByRelationId field value if set, zero value otherwise.
func (o *SeriesModelV1RelatedSeries) GetTriggeredByRelationId() int64 {
	if o == nil || IsNil(o.TriggeredByRelationId) {
		var ret int64
		return ret
	}
	return *o.TriggeredByRelationId
}

// GetTriggeredByRelationIdOk returns a tuple with the TriggeredByRelationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesModelV1RelatedSeries) GetTriggeredByRelationIdOk() (*int64, bool) {
	if o == nil || IsNil(o.TriggeredByRelationId) {
		return nil, false
	}
	return o.TriggeredByRelationId, true
}

// HasTriggeredByRelationId returns a boolean if a field has been set.
func (o *SeriesModelV1RelatedSeries) HasTriggeredByRelationId() bool {
	if o != nil && !IsNil(o.TriggeredByRelationId) {
		return true
	}

	return false
}

// SetTriggeredByRelationId gets a reference to the given int64 and assigns it to the TriggeredByRelationId field.
func (o *SeriesModelV1RelatedSeries) SetTriggeredByRelationId(v int64) {
	o.TriggeredByRelationId = &v
}

func (o SeriesModelV1RelatedSeries) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SeriesModelV1RelatedSeries) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RelationId) {
		toSerialize["relation_id"] = o.RelationId
	}
	toSerialize["relation_type"] = o.RelationType
	toSerialize["related_series_id"] = o.RelatedSeriesId
	if !IsNil(o.RelatedSeriesName) {
		toSerialize["related_series_name"] = o.RelatedSeriesName
	}
	if !IsNil(o.TriggeredByRelationId) {
		toSerialize["triggered_by_relation_id"] = o.TriggeredByRelationId
	}
	return toSerialize, nil
}

type NullableSeriesModelV1RelatedSeries struct {
	value *SeriesModelV1RelatedSeries
	isSet bool
}

func (v NullableSeriesModelV1RelatedSeries) Get() *SeriesModelV1RelatedSeries {
	return v.value
}

func (v *NullableSeriesModelV1RelatedSeries) Set(val *SeriesModelV1RelatedSeries) {
	v.value = val
	v.isSet = true
}

func (v NullableSeriesModelV1RelatedSeries) IsSet() bool {
	return v.isSet
}

func (v *NullableSeriesModelV1RelatedSeries) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSeriesModelV1RelatedSeries(val *SeriesModelV1RelatedSeries) *NullableSeriesModelV1RelatedSeries {
	return &NullableSeriesModelV1RelatedSeries{value: val, isSet: true}
}

func (v NullableSeriesModelV1RelatedSeries) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSeriesModelV1RelatedSeries) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
