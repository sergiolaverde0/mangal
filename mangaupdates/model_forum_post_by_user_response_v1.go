/*
MangaUpdates API

This API powers our website. Most API functions are public and do not require an account. For user-based functions, you must register an account. Currently, user registration must be done through our main website and is disabled via this API.  Download OpenAPI Specification: [openapi.yaml](openapi.yaml)  Please contact us at the following emails if you have questions:  * lambchopsil@mangaupdates.com * manick@mangaupdates.com  ## Warranties  MangaUpdates makes no warranties about service availability, correctness of the data, or anything else. The service is provided as is, and may change at any time.  ## Acceptable Use Policy  * You will credit MangaUpdates when using data provided by this API. * You will use reasonable spacing between requests so as not to overwhelm the MangaUpdates servers, and employ caching mechanisms when accessing data. * You will NOT use MangaUpdates data or API in a way that will:     * Deceive or defraud users     * Assist or perform an illegal action     * Create spam     * Damage the database  We reserve the right to change this policy at any time.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ForumPostByUserResponseV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ForumPostByUserResponseV1{}

// ForumPostByUserResponseV1 struct for ForumPostByUserResponseV1
type ForumPostByUserResponseV1 struct {
	TopicId    *int64  `json:"topic_id,omitempty"`
	PostIdList []int64 `json:"post_id_list,omitempty"`
}

// NewForumPostByUserResponseV1 instantiates a new ForumPostByUserResponseV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForumPostByUserResponseV1() *ForumPostByUserResponseV1 {
	this := ForumPostByUserResponseV1{}
	return &this
}

// NewForumPostByUserResponseV1WithDefaults instantiates a new ForumPostByUserResponseV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewForumPostByUserResponseV1WithDefaults() *ForumPostByUserResponseV1 {
	this := ForumPostByUserResponseV1{}
	return &this
}

// GetTopicId returns the TopicId field value if set, zero value otherwise.
func (o *ForumPostByUserResponseV1) GetTopicId() int64 {
	if o == nil || IsNil(o.TopicId) {
		var ret int64
		return ret
	}
	return *o.TopicId
}

// GetTopicIdOk returns a tuple with the TopicId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumPostByUserResponseV1) GetTopicIdOk() (*int64, bool) {
	if o == nil || IsNil(o.TopicId) {
		return nil, false
	}
	return o.TopicId, true
}

// HasTopicId returns a boolean if a field has been set.
func (o *ForumPostByUserResponseV1) HasTopicId() bool {
	if o != nil && !IsNil(o.TopicId) {
		return true
	}

	return false
}

// SetTopicId gets a reference to the given int64 and assigns it to the TopicId field.
func (o *ForumPostByUserResponseV1) SetTopicId(v int64) {
	o.TopicId = &v
}

// GetPostIdList returns the PostIdList field value if set, zero value otherwise.
func (o *ForumPostByUserResponseV1) GetPostIdList() []int64 {
	if o == nil || IsNil(o.PostIdList) {
		var ret []int64
		return ret
	}
	return o.PostIdList
}

// GetPostIdListOk returns a tuple with the PostIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ForumPostByUserResponseV1) GetPostIdListOk() ([]int64, bool) {
	if o == nil || IsNil(o.PostIdList) {
		return nil, false
	}
	return o.PostIdList, true
}

// HasPostIdList returns a boolean if a field has been set.
func (o *ForumPostByUserResponseV1) HasPostIdList() bool {
	if o != nil && !IsNil(o.PostIdList) {
		return true
	}

	return false
}

// SetPostIdList gets a reference to the given []int64 and assigns it to the PostIdList field.
func (o *ForumPostByUserResponseV1) SetPostIdList(v []int64) {
	o.PostIdList = v
}

func (o ForumPostByUserResponseV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ForumPostByUserResponseV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TopicId) {
		toSerialize["topic_id"] = o.TopicId
	}
	if !IsNil(o.PostIdList) {
		toSerialize["post_id_list"] = o.PostIdList
	}
	return toSerialize, nil
}

type NullableForumPostByUserResponseV1 struct {
	value *ForumPostByUserResponseV1
	isSet bool
}

func (v NullableForumPostByUserResponseV1) Get() *ForumPostByUserResponseV1 {
	return v.value
}

func (v *NullableForumPostByUserResponseV1) Set(val *ForumPostByUserResponseV1) {
	v.value = val
	v.isSet = true
}

func (v NullableForumPostByUserResponseV1) IsSet() bool {
	return v.isSet
}

func (v *NullableForumPostByUserResponseV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForumPostByUserResponseV1(val *ForumPostByUserResponseV1) *NullableForumPostByUserResponseV1 {
	return &NullableForumPostByUserResponseV1{value: val, isSet: true}
}

func (v NullableForumPostByUserResponseV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForumPostByUserResponseV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
